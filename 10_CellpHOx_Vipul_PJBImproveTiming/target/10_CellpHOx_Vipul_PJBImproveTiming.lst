
/Users/pjb/Dropbox/Particle_Projects/CellpHOx/10_CellpHOx_Vipul_PJBImproveTiming/target/10_CellpHOx_Vipul_PJBImproveTiming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d98  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08085db0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         000000f4  20000400  08085db4  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000002d0  200004f4  200004f4  000404f4  2**2
                  ALLOC
  5 .module_info_suffix 00000028  08085ea8  08085ea8  00035ea8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  08085ed0  08085ed0  00035ed0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0009f4d9  00000000  00000000  00035ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000eecb  00000000  00000000  000d53ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001466f  00000000  00000000  000e4278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001e98  00000000  00000000  000f88e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000031a8  00000000  00000000  000fa77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000243bd  00000000  00000000  000fd927  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00022055  00000000  00000000  00121ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000974c6  00000000  00000000  00143d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c088  00000000  00000000  001db200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	e4 55 08 08                                         .U..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f003 f8d1 	bl	80831d4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f003 f8f1 	bl	8083220 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08085db4 	.word	0x08085db4
 808004c:	200004f4 	.word	0x200004f4
 8080050:	200004f4 	.word	0x200004f4
 8080054:	200007c4 	.word	0x200007c4
 8080058:	200007c4 	.word	0x200007c4

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f001 fe6f 	bl	8081d40 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08085d74 	.word	0x08085d74
 8080084:	08085da4 	.word	0x08085da4

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b814 	b.w	80800b4 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f903 	bl	8080298 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f001 be15 	b.w	8081cc4 <_post_loop>

0808009a <_Znwj>:
 808009a:	f000 bc79 	b.w	8080990 <malloc>

0808009e <_ZdlPv>:
 808009e:	f000 bc7f 	b.w	80809a0 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <setup>:
enum State { PUBLISH_STATE, SLEEP_STATE };
State state = PUBLISH_STATE;

unsigned long stateTime = 0;

void setup() {
 80800b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  //set charging current to 1024mA (512 + 512 offset) (charge faster!):
  pmic.setChargeCurrent(0,0,1,0,0,0);
 80800b6:	2400      	movs	r4, #0
 80800b8:	4622      	mov	r2, r4
 80800ba:	4621      	mov	r1, r4
 80800bc:	9402      	str	r4, [sp, #8]
 80800be:	9401      	str	r4, [sp, #4]
 80800c0:	9400      	str	r4, [sp, #0]
 80800c2:	2301      	movs	r3, #1
 80800c4:	480f      	ldr	r0, [pc, #60]	; (8080104 <setup+0x50>)
 80800c6:	f001 f941 	bl	808134c <_ZN4PMIC16setChargeCurrentEbbbbbb>

  // Start here when waking up out of SLEEP_MODE_DEEP
  state = PUBLISH_STATE;
 80800ca:	4b0f      	ldr	r3, [pc, #60]	; (8080108 <setup+0x54>)
 80800cc:	701c      	strb	r4, [r3, #0]

  // Turn on USB comms
  Serial.begin(9600);
 80800ce:	f001 fd67 	bl	8081ba0 <_Z16_fetch_usbserialv>
 80800d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80800d6:	f001 fd57 	bl	8081b88 <_ZN9USBSerial5beginEl>
  Serial.println("Awake. Turn cell on.");
 80800da:	f001 fd61 	bl	8081ba0 <_Z16_fetch_usbserialv>
 80800de:	490b      	ldr	r1, [pc, #44]	; (808010c <setup+0x58>)
 80800e0:	f001 f99c 	bl	808141c <_ZN5Print7printlnEPKc>

  // SeapHOx serial; wait TIMEOUT_SEAPHOX_MS for a line to arrive
  Serial1.begin(115200);
 80800e4:	f001 fcd2 	bl	8081a8c <_Z22__fetch_global_Serial1v>
 80800e8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80800ec:	f001 fcc8 	bl	8081a80 <_ZN11USARTSerial5beginEm>
  Serial1.setTimeout(TIMEOUT_SEAPHOX_MS);
 80800f0:	f001 fccc 	bl	8081a8c <_Z22__fetch_global_Serial1v>
 80800f4:	f241 3188 	movw	r1, #5000	; 0x1388
}
 80800f8:	b004      	add	sp, #16
 80800fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.begin(9600);
  Serial.println("Awake. Turn cell on.");

  // SeapHOx serial; wait TIMEOUT_SEAPHOX_MS for a line to arrive
  Serial1.begin(115200);
  Serial1.setTimeout(TIMEOUT_SEAPHOX_MS);
 80800fe:	f001 ba42 	b.w	8081586 <_ZN6Stream10setTimeoutEm>
 8080102:	bf00      	nop
 8080104:	200004f8 	.word	0x200004f8
 8080108:	2000057c 	.word	0x2000057c
 808010c:	080855f8 	.word	0x080855f8

08080110 <_Z12parseSeapHOxPc>:
  break;

  }
}

bool parseSeapHOx(char* new_var){
 8080110:	b570      	push	{r4, r5, r6, lr}
 8080112:	4605      	mov	r5, r0
 8080114:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8080118:	ac1d      	add	r4, sp, #116	; 0x74
 	// Parse SeapHOx response
 	int count = 0;
 	char* parsed[300];

 	while (new_var != NULL) {
 808011a:	b13d      	cbz	r5, 808012c <_Z12parseSeapHOxPc+0x1c>
 		parsed[count] = new_var;
 808011c:	f844 5f04 	str.w	r5, [r4, #4]!
 		count++;
 		// Serial.println(new_var);
 		new_var = strtok(NULL, " \t");
 8080120:	4959      	ldr	r1, [pc, #356]	; (8080288 <_Z12parseSeapHOxPc+0x178>)
 8080122:	2000      	movs	r0, #0
 8080124:	f003 ff4e 	bl	8083fc4 <strtok>
 8080128:	4605      	mov	r5, r0
bool parseSeapHOx(char* new_var){
 	// Parse SeapHOx response
 	int count = 0;
 	char* parsed[300];

 	while (new_var != NULL) {
 808012a:	e7f6      	b.n	808011a <_Z12parseSeapHOxPc+0xa>
 		count++;
 		// Serial.println(new_var);
 		new_var = strtok(NULL, " \t");
 	}

 	if (parsed[0][8] == '#') {
 808012c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 808012e:	7a1b      	ldrb	r3, [r3, #8]
 8080130:	2b23      	cmp	r3, #35	; 0x23
 8080132:	f040 809e 	bne.w	8080272 <_Z12parseSeapHOxPc+0x162>
 		SeapHOx_Cell.Board_Date 			= parsed[1];
 8080136:	4c55      	ldr	r4, [pc, #340]	; (808028c <_Z12parseSeapHOxPc+0x17c>)
 8080138:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 		SeapHOx_Cell.Board_Time 			= parsed[2];
 		SeapHOx_Cell.Main_Batt_Volt   = strtof(parsed[3], NULL);
 808013a:	4629      	mov	r1, r5
 		// Serial.println(new_var);
 		new_var = strtok(NULL, " \t");
 	}

 	if (parsed[0][8] == '#') {
 		SeapHOx_Cell.Board_Date 			= parsed[1];
 808013c:	6063      	str	r3, [r4, #4]
 		SeapHOx_Cell.Board_Time 			= parsed[2];
 808013e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 		SeapHOx_Cell.Main_Batt_Volt   = strtof(parsed[3], NULL);
 8080140:	9821      	ldr	r0, [sp, #132]	; 0x84
 		new_var = strtok(NULL, " \t");
 	}

 	if (parsed[0][8] == '#') {
 		SeapHOx_Cell.Board_Date 			= parsed[1];
 		SeapHOx_Cell.Board_Time 			= parsed[2];
 8080142:	60a3      	str	r3, [r4, #8]
 		SeapHOx_Cell.Main_Batt_Volt   = strtof(parsed[3], NULL);
 8080144:	f003 ff24 	bl	8083f90 <strtof>
 		SeapHOx_Cell.V_Therm          = strtof(parsed[4], NULL);
 8080148:	4629      	mov	r1, r5
 	}

 	if (parsed[0][8] == '#') {
 		SeapHOx_Cell.Board_Date 			= parsed[1];
 		SeapHOx_Cell.Board_Time 			= parsed[2];
 		SeapHOx_Cell.Main_Batt_Volt   = strtof(parsed[3], NULL);
 808014a:	60e0      	str	r0, [r4, #12]
 		SeapHOx_Cell.V_Therm          = strtof(parsed[4], NULL);
 808014c:	9822      	ldr	r0, [sp, #136]	; 0x88
 808014e:	f003 ff1f 	bl	8083f90 <strtof>
 		SeapHOx_Cell.V_FET_INT        = strtof(parsed[5], NULL);
 8080152:	4629      	mov	r1, r5

 	if (parsed[0][8] == '#') {
 		SeapHOx_Cell.Board_Date 			= parsed[1];
 		SeapHOx_Cell.Board_Time 			= parsed[2];
 		SeapHOx_Cell.Main_Batt_Volt   = strtof(parsed[3], NULL);
 		SeapHOx_Cell.V_Therm          = strtof(parsed[4], NULL);
 8080154:	6120      	str	r0, [r4, #16]
 		SeapHOx_Cell.V_FET_INT        = strtof(parsed[5], NULL);
 8080156:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8080158:	f003 ff1a 	bl	8083f90 <strtof>
 		SeapHOx_Cell.V_FET_EXT        = strtof(parsed[6], NULL);
 808015c:	4629      	mov	r1, r5
 	if (parsed[0][8] == '#') {
 		SeapHOx_Cell.Board_Date 			= parsed[1];
 		SeapHOx_Cell.Board_Time 			= parsed[2];
 		SeapHOx_Cell.Main_Batt_Volt   = strtof(parsed[3], NULL);
 		SeapHOx_Cell.V_Therm          = strtof(parsed[4], NULL);
 		SeapHOx_Cell.V_FET_INT        = strtof(parsed[5], NULL);
 808015e:	6160      	str	r0, [r4, #20]
 		SeapHOx_Cell.V_FET_EXT        = strtof(parsed[6], NULL);
 8080160:	9824      	ldr	r0, [sp, #144]	; 0x90
 8080162:	f003 ff15 	bl	8083f90 <strtof>
 		SeapHOx_Cell.Durafet_Temp     = strtof(parsed[9], NULL);
 8080166:	4629      	mov	r1, r5
 		SeapHOx_Cell.Board_Date 			= parsed[1];
 		SeapHOx_Cell.Board_Time 			= parsed[2];
 		SeapHOx_Cell.Main_Batt_Volt   = strtof(parsed[3], NULL);
 		SeapHOx_Cell.V_Therm          = strtof(parsed[4], NULL);
 		SeapHOx_Cell.V_FET_INT        = strtof(parsed[5], NULL);
 		SeapHOx_Cell.V_FET_EXT        = strtof(parsed[6], NULL);
 8080168:	61a0      	str	r0, [r4, #24]
 		SeapHOx_Cell.Durafet_Temp     = strtof(parsed[9], NULL);
 808016a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 808016c:	f003 ff10 	bl	8083f90 <strtof>
 		SeapHOx_Cell.V_Pressure       = strtof(parsed[10], NULL);
 8080170:	4629      	mov	r1, r5
 		SeapHOx_Cell.Board_Time 			= parsed[2];
 		SeapHOx_Cell.Main_Batt_Volt   = strtof(parsed[3], NULL);
 		SeapHOx_Cell.V_Therm          = strtof(parsed[4], NULL);
 		SeapHOx_Cell.V_FET_INT        = strtof(parsed[5], NULL);
 		SeapHOx_Cell.V_FET_EXT        = strtof(parsed[6], NULL);
 		SeapHOx_Cell.Durafet_Temp     = strtof(parsed[9], NULL);
 8080172:	6260      	str	r0, [r4, #36]	; 0x24
 		SeapHOx_Cell.V_Pressure       = strtof(parsed[10], NULL);
 8080174:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8080176:	f003 ff0b 	bl	8083f90 <strtof>
 		SeapHOx_Cell.pHINT            = strtof(parsed[11], NULL);
 808017a:	4629      	mov	r1, r5
 		SeapHOx_Cell.Main_Batt_Volt   = strtof(parsed[3], NULL);
 		SeapHOx_Cell.V_Therm          = strtof(parsed[4], NULL);
 		SeapHOx_Cell.V_FET_INT        = strtof(parsed[5], NULL);
 		SeapHOx_Cell.V_FET_EXT        = strtof(parsed[6], NULL);
 		SeapHOx_Cell.Durafet_Temp     = strtof(parsed[9], NULL);
 		SeapHOx_Cell.V_Pressure       = strtof(parsed[10], NULL);
 808017c:	62a0      	str	r0, [r4, #40]	; 0x28
 		SeapHOx_Cell.pHINT            = strtof(parsed[11], NULL);
 808017e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8080180:	f003 ff06 	bl	8083f90 <strtof>
 		SeapHOx_Cell.pHEXT            = strtof(parsed[12], NULL);
 8080184:	4629      	mov	r1, r5
 		SeapHOx_Cell.V_Therm          = strtof(parsed[4], NULL);
 		SeapHOx_Cell.V_FET_INT        = strtof(parsed[5], NULL);
 		SeapHOx_Cell.V_FET_EXT        = strtof(parsed[6], NULL);
 		SeapHOx_Cell.Durafet_Temp     = strtof(parsed[9], NULL);
 		SeapHOx_Cell.V_Pressure       = strtof(parsed[10], NULL);
 		SeapHOx_Cell.pHINT            = strtof(parsed[11], NULL);
 8080186:	62e0      	str	r0, [r4, #44]	; 0x2c
 		SeapHOx_Cell.pHEXT            = strtof(parsed[12], NULL);
 8080188:	982a      	ldr	r0, [sp, #168]	; 0xa8
 808018a:	f003 ff01 	bl	8083f90 <strtof>
 		SeapHOx_Cell.O2uM             = strtof(parsed[17], NULL);
 808018e:	4629      	mov	r1, r5
 		SeapHOx_Cell.V_FET_INT        = strtof(parsed[5], NULL);
 		SeapHOx_Cell.V_FET_EXT        = strtof(parsed[6], NULL);
 		SeapHOx_Cell.Durafet_Temp     = strtof(parsed[9], NULL);
 		SeapHOx_Cell.V_Pressure       = strtof(parsed[10], NULL);
 		SeapHOx_Cell.pHINT            = strtof(parsed[11], NULL);
 		SeapHOx_Cell.pHEXT            = strtof(parsed[12], NULL);
 8080190:	6320      	str	r0, [r4, #48]	; 0x30
 		SeapHOx_Cell.O2uM             = strtof(parsed[17], NULL);
 8080192:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8080194:	f003 fefc 	bl	8083f90 <strtof>
 		SeapHOx_Cell.O2_Saturation    = strtof(parsed[18], NULL);
 8080198:	4629      	mov	r1, r5
 		SeapHOx_Cell.V_FET_EXT        = strtof(parsed[6], NULL);
 		SeapHOx_Cell.Durafet_Temp     = strtof(parsed[9], NULL);
 		SeapHOx_Cell.V_Pressure       = strtof(parsed[10], NULL);
 		SeapHOx_Cell.pHINT            = strtof(parsed[11], NULL);
 		SeapHOx_Cell.pHEXT            = strtof(parsed[12], NULL);
 		SeapHOx_Cell.O2uM             = strtof(parsed[17], NULL);
 808019a:	6460      	str	r0, [r4, #68]	; 0x44
 		SeapHOx_Cell.O2_Saturation    = strtof(parsed[18], NULL);
 808019c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 808019e:	f003 fef7 	bl	8083f90 <strtof>
 		SeapHOx_Cell.Optode_Temp      = strtof(parsed[19], NULL);
 80801a2:	4629      	mov	r1, r5
 		SeapHOx_Cell.Durafet_Temp     = strtof(parsed[9], NULL);
 		SeapHOx_Cell.V_Pressure       = strtof(parsed[10], NULL);
 		SeapHOx_Cell.pHINT            = strtof(parsed[11], NULL);
 		SeapHOx_Cell.pHEXT            = strtof(parsed[12], NULL);
 		SeapHOx_Cell.O2uM             = strtof(parsed[17], NULL);
 		SeapHOx_Cell.O2_Saturation    = strtof(parsed[18], NULL);
 80801a4:	64a0      	str	r0, [r4, #72]	; 0x48
 		SeapHOx_Cell.Optode_Temp      = strtof(parsed[19], NULL);
 80801a6:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80801a8:	f003 fef2 	bl	8083f90 <strtof>
 		SeapHOx_Cell.SBE37_Temp       = strtof(parsed[20], NULL);
 80801ac:	4629      	mov	r1, r5
 		SeapHOx_Cell.V_Pressure       = strtof(parsed[10], NULL);
 		SeapHOx_Cell.pHINT            = strtof(parsed[11], NULL);
 		SeapHOx_Cell.pHEXT            = strtof(parsed[12], NULL);
 		SeapHOx_Cell.O2uM             = strtof(parsed[17], NULL);
 		SeapHOx_Cell.O2_Saturation    = strtof(parsed[18], NULL);
 		SeapHOx_Cell.Optode_Temp      = strtof(parsed[19], NULL);
 80801ae:	64e0      	str	r0, [r4, #76]	; 0x4c
 		SeapHOx_Cell.SBE37_Temp       = strtof(parsed[20], NULL);
 80801b0:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80801b2:	f003 feed 	bl	8083f90 <strtof>
 		SeapHOx_Cell.SBE37_Cond       = strtof(parsed[21], NULL);
 80801b6:	4629      	mov	r1, r5
 		SeapHOx_Cell.pHINT            = strtof(parsed[11], NULL);
 		SeapHOx_Cell.pHEXT            = strtof(parsed[12], NULL);
 		SeapHOx_Cell.O2uM             = strtof(parsed[17], NULL);
 		SeapHOx_Cell.O2_Saturation    = strtof(parsed[18], NULL);
 		SeapHOx_Cell.Optode_Temp      = strtof(parsed[19], NULL);
 		SeapHOx_Cell.SBE37_Temp       = strtof(parsed[20], NULL);
 80801b8:	66e0      	str	r0, [r4, #108]	; 0x6c
 		SeapHOx_Cell.SBE37_Cond       = strtof(parsed[21], NULL);
 80801ba:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80801bc:	f003 fee8 	bl	8083f90 <strtof>
 		SeapHOx_Cell.SBE37_Salinity   = strtof(parsed[22], NULL);
 80801c0:	4629      	mov	r1, r5
 		SeapHOx_Cell.pHEXT            = strtof(parsed[12], NULL);
 		SeapHOx_Cell.O2uM             = strtof(parsed[17], NULL);
 		SeapHOx_Cell.O2_Saturation    = strtof(parsed[18], NULL);
 		SeapHOx_Cell.Optode_Temp      = strtof(parsed[19], NULL);
 		SeapHOx_Cell.SBE37_Temp       = strtof(parsed[20], NULL);
 		SeapHOx_Cell.SBE37_Cond       = strtof(parsed[21], NULL);
 80801c2:	6720      	str	r0, [r4, #112]	; 0x70
 		SeapHOx_Cell.SBE37_Salinity   = strtof(parsed[22], NULL);
 80801c4:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80801c6:	f003 fee3 	bl	8083f90 <strtof>
 80801ca:	6760      	str	r0, [r4, #116]	; 0x74

    Serial.printf("\nParsed SeapHOX \n Date-time %s-%s\n Main_Batt_Volt %.5f\n V_Therm %.5f\n V_FET_INT %.5f\n V_FET_EXT %.5f\n Durafet_Temp %2.5f\n V_Pressure %.5f\n pHINT %.5f\n pHEXT %.5f\n O2 %.5f\n O2_Saturation  %.5f\n Optode_Temp %.5f\n SBE37_Temp %.5f\n SBE37_Cond %.5f\n SBE37_Salinity %.5f\n",
 80801cc:	f001 fce8 	bl	8081ba0 <_Z16_fetch_usbserialv>
 80801d0:	4606      	mov	r6, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80801d2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80801d4:	f002 f8fa 	bl	80823cc <__aeabi_f2d>
 80801d8:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 80801dc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80801de:	f002 f8f5 	bl	80823cc <__aeabi_f2d>
 80801e2:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 80801e6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80801e8:	f002 f8f0 	bl	80823cc <__aeabi_f2d>
 80801ec:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80801f0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80801f2:	f002 f8eb 	bl	80823cc <__aeabi_f2d>
 80801f6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80801fa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80801fc:	f002 f8e6 	bl	80823cc <__aeabi_f2d>
 8080200:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8080204:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8080206:	f002 f8e1 	bl	80823cc <__aeabi_f2d>
 808020a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 808020e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8080210:	f002 f8dc 	bl	80823cc <__aeabi_f2d>
 8080214:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8080218:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808021a:	f002 f8d7 	bl	80823cc <__aeabi_f2d>
 808021e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8080222:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8080224:	f002 f8d2 	bl	80823cc <__aeabi_f2d>
 8080228:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 808022c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808022e:	f002 f8cd 	bl	80823cc <__aeabi_f2d>
 8080232:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8080236:	69a0      	ldr	r0, [r4, #24]
 8080238:	f002 f8c8 	bl	80823cc <__aeabi_f2d>
 808023c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8080240:	6960      	ldr	r0, [r4, #20]
 8080242:	f002 f8c3 	bl	80823cc <__aeabi_f2d>
 8080246:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808024a:	6920      	ldr	r0, [r4, #16]
 808024c:	f002 f8be 	bl	80823cc <__aeabi_f2d>
 8080250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8080254:	68e0      	ldr	r0, [r4, #12]
 8080256:	f002 f8b9 	bl	80823cc <__aeabi_f2d>
 808025a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808025e:	68a3      	ldr	r3, [r4, #8]
 8080260:	4a0b      	ldr	r2, [pc, #44]	; (8080290 <_Z12parseSeapHOxPc+0x180>)
 8080262:	9300      	str	r3, [sp, #0]
 8080264:	6863      	ldr	r3, [r4, #4]
 8080266:	4629      	mov	r1, r5
 8080268:	4630      	mov	r0, r6
 808026a:	f001 f90d 	bl	8081488 <_ZN5Print11printf_implEbPKcz>
                  SeapHOx_Cell.pHINT, SeapHOx_Cell.pHEXT,
                  SeapHOx_Cell.O2uM, SeapHOx_Cell.O2_Saturation,
                  SeapHOx_Cell.Optode_Temp, SeapHOx_Cell.SBE37_Temp,
                  SeapHOx_Cell.SBE37_Cond, SeapHOx_Cell.SBE37_Salinity
                );
    return true;
 808026e:	2001      	movs	r0, #1
 8080270:	e006      	b.n	8080280 <_Z12parseSeapHOxPc+0x170>
  }
  else{
    Serial.printf("Error: improper or incomplete data receive from seaPHOX");
 8080272:	f001 fc95 	bl	8081ba0 <_Z16_fetch_usbserialv>
 8080276:	4a07      	ldr	r2, [pc, #28]	; (8080294 <_Z12parseSeapHOxPc+0x184>)
 8080278:	4629      	mov	r1, r5
 808027a:	f001 f905 	bl	8081488 <_ZN5Print11printf_implEbPKcz>
    return false;
 808027e:	4628      	mov	r0, r5
  }
}
 8080280:	f50d 6da5 	add.w	sp, sp, #1320	; 0x528
 8080284:	bd70      	pop	{r4, r5, r6, pc}
 8080286:	bf00      	nop
 8080288:	0808560d 	.word	0x0808560d
 808028c:	200004fc 	.word	0x200004fc
 8080290:	08085610 	.word	0x08085610
 8080294:	0808571a 	.word	0x0808571a

08080298 <loop>:
  Serial1.begin(115200);
  Serial1.setTimeout(TIMEOUT_SEAPHOX_MS);
}


void loop() {
 8080298:	b5f0      	push	{r4, r5, r6, r7, lr}

  //////////////////////////////////////////////////////////////////////////////
  // Enter state machine
  switch(state) {
 808029a:	4db0      	ldr	r5, [pc, #704]	; (808055c <loop+0x2c4>)
  Serial1.begin(115200);
  Serial1.setTimeout(TIMEOUT_SEAPHOX_MS);
}


void loop() {
 808029c:	b0bd      	sub	sp, #244	; 0xf4

  //////////////////////////////////////////////////////////////////////////////
  // Enter state machine
  switch(state) {
 808029e:	782e      	ldrb	r6, [r5, #0]
 80802a0:	462f      	mov	r7, r5
 80802a2:	b38e      	cbz	r6, 8080308 <loop+0x70>
 80802a4:	2e01      	cmp	r6, #1
 80802a6:	f040 8157 	bne.w	8080558 <loop+0x2c0>
  /*** SLEEP_STATE ***/
  /*** Get here from PUBLISH_STATE and go to GPS_WAIT_STATE (if code makes it that far)
  or SLEEP_MODE_DEEP after calculating a wakeup time based off of the current time from the cloud.
  ***/
  case SLEEP_STATE: {
    Serial.println("going to sleep");
 80802aa:	f001 fc79 	bl	8081ba0 <_Z16_fetch_usbserialv>
 80802ae:	49ac      	ldr	r1, [pc, #688]	; (8080560 <loop+0x2c8>)
 80802b0:	f001 f8b4 	bl	808141c <_ZN5Print7printlnEPKc>
    delay(500);
 80802b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80802b8:	f000 fbaa 	bl	8080a10 <delay>

    // Calculate sleep time
  	int nextSampleMin = 5; // sample at 5 past the hour
  	int currentHour = Time.hour();
 80802bc:	f001 fb88 	bl	80819d0 <_ZN9TimeClass4hourEv>
 80802c0:	4607      	mov	r7, r0
  	int currentSecond = Time.now()%86400; // in UTC
 80802c2:	f001 fb7d 	bl	80819c0 <_ZN9TimeClass3nowEv>

  	// Calculate seconds since midnight of next sample
  	int nextSampleSec = (currentHour+1)*60*60+nextSampleMin*60; // sample at this time
   	int secondsToSleep = nextSampleSec - currentSecond;
 80802c6:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 80802ca:	fb07 4404 	mla	r4, r7, r4, r4
 80802ce:	4aa5      	ldr	r2, [pc, #660]	; (8080564 <loop+0x2cc>)
 80802d0:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 80802d4:	fb90 f4f2 	sdiv	r4, r0, r2
 80802d8:	fb04 0012 	mls	r0, r4, r2, r0
 80802dc:	1a1c      	subs	r4, r3, r0
  	Serial.printf("Sleep for %d seconds\n", secondsToSleep);
 80802de:	f001 fc5f 	bl	8081ba0 <_Z16_fetch_usbserialv>
 80802e2:	4623      	mov	r3, r4
 80802e4:	4aa0      	ldr	r2, [pc, #640]	; (8080568 <loop+0x2d0>)
 80802e6:	2100      	movs	r1, #0
 80802e8:	f001 f8ce 	bl	8081488 <_ZN5Print11printf_implEbPKcz>
   	System.sleep(SLEEP_MODE_DEEP, secondsToSleep);
 80802ec:	4b9f      	ldr	r3, [pc, #636]	; (808056c <loop+0x2d4>)
 80802ee:	4622      	mov	r2, r4
 80802f0:	681b      	ldr	r3, [r3, #0]
 80802f2:	4631      	mov	r1, r6
 80802f4:	a81e      	add	r0, sp, #120	; 0x78
 80802f6:	f001 fac9 	bl	808188c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80802fa:	f000 f9c5 	bl	8080688 <HAL_Timer_Get_Milli_Seconds>

    // It'll only make it here if the sleep call doesn't work for some reason
    stateTime = millis();
 80802fe:	4b9c      	ldr	r3, [pc, #624]	; (8080570 <loop+0x2d8>)
 8080300:	6018      	str	r0, [r3, #0]
    state = PUBLISH_STATE;
 8080302:	2300      	movs	r3, #0
 8080304:	702b      	strb	r3, [r5, #0]
  }
  break;

  }
}
 8080306:	e127      	b.n	8080558 <loop+0x2c0>

    bool isMaxTime = false;

    // Poll SeapHOx:
    // Clean out any residual junk in buffer and restart serial port
    Serial1.end();
 8080308:	f001 fbc0 	bl	8081a8c <_Z22__fetch_global_Serial1v>
 808030c:	f001 fbbb 	bl	8081a86 <_ZN11USARTSerial3endEv>
    delay(1000);
 8080310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080314:	f000 fb7c 	bl	8080a10 <delay>
    Serial1.begin(115200);
 8080318:	f001 fbb8 	bl	8081a8c <_Z22__fetch_global_Serial1v>
 808031c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8080320:	f001 fbae 	bl	8081a80 <_ZN11USARTSerial5beginEm>
    delay(500);
 8080324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080328:	f000 fb72 	bl	8080a10 <delay>
    Serial1.setTimeout(TIMEOUT_SEAPHOX_MS);
 808032c:	f001 fbae 	bl	8081a8c <_Z22__fetch_global_Serial1v>
 8080330:	f241 3188 	movw	r1, #5000	; 0x1388
 8080334:	f001 f927 	bl	8081586 <_ZN6Stream10setTimeoutEm>

    // Get data in file after current file pointer
    Serial1.println("glast");
 8080338:	f001 fba8 	bl	8081a8c <_Z22__fetch_global_Serial1v>
 808033c:	498d      	ldr	r1, [pc, #564]	; (8080574 <loop+0x2dc>)
 808033e:	f001 f86d 	bl	808141c <_ZN5Print7printlnEPKc>

    // Read SeapHOx response
    responseStr = Serial1.readString();
 8080342:	f001 fba3 	bl	8081a8c <_Z22__fetch_global_Serial1v>
 8080346:	4c8c      	ldr	r4, [pc, #560]	; (8080578 <loop+0x2e0>)
 8080348:	4601      	mov	r1, r0
 808034a:	a81e      	add	r0, sp, #120	; 0x78
 808034c:	f001 f91e 	bl	808158c <_ZN6Stream10readStringEv>
 8080350:	a91e      	add	r1, sp, #120	; 0x78
 8080352:	4620      	mov	r0, r4
 8080354:	f001 f9bf 	bl	80816d6 <_ZN6StringaSEOS_>
 8080358:	a81e      	add	r0, sp, #120	; 0x78
 808035a:	f001 f92b 	bl	80815b4 <_ZN6StringD1Ev>
    Serial.println(responseStr);
 808035e:	f001 fc1f 	bl	8081ba0 <_Z16_fetch_usbserialv>
 8080362:	6821      	ldr	r1, [r4, #0]
 8080364:	f001 f85a 	bl	808141c <_ZN5Print7printlnEPKc>

    String s2 = responseStr.replace("Error.txt f_read error: FR_OK\r\n", "");
 8080368:	4984      	ldr	r1, [pc, #528]	; (808057c <loop+0x2e4>)
 808036a:	a81a      	add	r0, sp, #104	; 0x68
 808036c:	f001 f969 	bl	8081642 <_ZN6StringC1EPK19__FlashStringHelper>
 8080370:	4983      	ldr	r1, [pc, #524]	; (8080580 <loop+0x2e8>)
 8080372:	a81e      	add	r0, sp, #120	; 0x78
 8080374:	f001 f965 	bl	8081642 <_ZN6StringC1EPK19__FlashStringHelper>
 8080378:	aa1e      	add	r2, sp, #120	; 0x78
 808037a:	a91a      	add	r1, sp, #104	; 0x68
 808037c:	4620      	mov	r0, r4
 808037e:	f001 f9fd 	bl	808177c <_ZN6String7replaceERKS_S1_>
 8080382:	4601      	mov	r1, r0
 8080384:	a816      	add	r0, sp, #88	; 0x58
 8080386:	f001 f99b 	bl	80816c0 <_ZN6StringC1ERKS_>
 808038a:	a81e      	add	r0, sp, #120	; 0x78
 808038c:	f001 f912 	bl	80815b4 <_ZN6StringD1Ev>
 8080390:	a81a      	add	r0, sp, #104	; 0x68
 8080392:	f001 f90f 	bl	80815b4 <_ZN6StringD1Ev>
    Serial.println(s2);
 8080396:	f001 fc03 	bl	8081ba0 <_Z16_fetch_usbserialv>
 808039a:	9916      	ldr	r1, [sp, #88]	; 0x58
 808039c:	f001 f83e 	bl	808141c <_ZN5Print7printlnEPKc>

    const char* s_args = s2.c_str();
    char* each_var = strtok(strdup(s_args), "\t");
 80803a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80803a2:	f002 ff7f 	bl	80832a4 <strdup>
 80803a6:	4977      	ldr	r1, [pc, #476]	; (8080584 <loop+0x2ec>)
 80803a8:	f003 fe0c 	bl	8083fc4 <strtok>
 80803ac:	4604      	mov	r4, r0

    char data[120];
    float cellVoltage = batteryMonitor.getVCell();
 80803ae:	4876      	ldr	r0, [pc, #472]	; (8080588 <loop+0x2f0>)
 80803b0:	f000 fe78 	bl	80810a4 <_ZN9FuelGauge8getVCellEv>
 80803b4:	4605      	mov	r5, r0
    float stateOfCharge = batteryMonitor.getSoC();
 80803b6:	4874      	ldr	r0, [pc, #464]	; (8080588 <loop+0x2f0>)
 80803b8:	f000 fe8a 	bl	80810d0 <_ZN9FuelGauge6getSoCEv>
 80803bc:	4606      	mov	r6, r0

    // Parse SeapHOx response and populate SeapHOx struct
    if (parseSeapHOx(each_var)){
 80803be:	4620      	mov	r0, r4
 80803c0:	f7ff fea6 	bl	8080110 <_Z12parseSeapHOxPc>
 80803c4:	4c71      	ldr	r4, [pc, #452]	; (808058c <loop+0x2f4>)
 80803c6:	2800      	cmp	r0, #0
 80803c8:	d035      	beq.n	8080436 <loop+0x19e>
                SeapHOx_Cell.Main_Batt_Volt, SeapHOx_Cell.V_FET_INT,
                SeapHOx_Cell.V_FET_EXT, SeapHOx_Cell.V_Pressure,
                SeapHOx_Cell.pHINT, SeapHOx_Cell.O2uM,
                SeapHOx_Cell.SBE37_Temp, SeapHOx_Cell.SBE37_Salinity,
                cellVoltage, stateOfCharge
              );
 80803ca:	4630      	mov	r0, r6
 80803cc:	f001 fffe 	bl	80823cc <__aeabi_f2d>
 80803d0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80803d4:	4628      	mov	r0, r5
 80803d6:	f001 fff9 	bl	80823cc <__aeabi_f2d>
 80803da:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80803de:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80803e0:	f001 fff4 	bl	80823cc <__aeabi_f2d>
 80803e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80803e8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80803ea:	f001 ffef 	bl	80823cc <__aeabi_f2d>
 80803ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80803f2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80803f4:	f001 ffea 	bl	80823cc <__aeabi_f2d>
 80803f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80803fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80803fe:	f001 ffe5 	bl	80823cc <__aeabi_f2d>
 8080402:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8080406:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8080408:	f001 ffe0 	bl	80823cc <__aeabi_f2d>
 808040c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8080410:	69a0      	ldr	r0, [r4, #24]
 8080412:	f001 ffdb 	bl	80823cc <__aeabi_f2d>
 8080416:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808041a:	6960      	ldr	r0, [r4, #20]
 808041c:	f001 ffd6 	bl	80823cc <__aeabi_f2d>
 8080420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8080424:	68e0      	ldr	r0, [r4, #12]
 8080426:	f001 ffd1 	bl	80823cc <__aeabi_f2d>
 808042a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808042e:	68a3      	ldr	r3, [r4, #8]
 8080430:	9300      	str	r3, [sp, #0]
 8080432:	6863      	ldr	r3, [r4, #4]
 8080434:	e034      	b.n	80804a0 <loop+0x208>
                SeapHOx_Cell.Main_Batt_Volt, SeapHOx_Cell.V_FET_INT,
                SeapHOx_Cell.V_FET_EXT, SeapHOx_Cell.V_Pressure,
                SeapHOx_Cell.pHINT, SeapHOx_Cell.O2uM,
                SeapHOx_Cell.SBE37_Temp, SeapHOx_Cell.SBE37_Salinity,
                cellVoltage, stateOfCharge
              );
 8080436:	4630      	mov	r0, r6
 8080438:	f001 ffc8 	bl	80823cc <__aeabi_f2d>
 808043c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8080440:	4628      	mov	r0, r5
 8080442:	f001 ffc3 	bl	80823cc <__aeabi_f2d>
 8080446:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 808044a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 808044c:	f001 ffbe 	bl	80823cc <__aeabi_f2d>
 8080450:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8080454:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8080456:	f001 ffb9 	bl	80823cc <__aeabi_f2d>
 808045a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 808045e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8080460:	f001 ffb4 	bl	80823cc <__aeabi_f2d>
 8080464:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8080468:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808046a:	f001 ffaf 	bl	80823cc <__aeabi_f2d>
 808046e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8080472:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8080474:	f001 ffaa 	bl	80823cc <__aeabi_f2d>
 8080478:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808047c:	69a0      	ldr	r0, [r4, #24]
 808047e:	f001 ffa5 	bl	80823cc <__aeabi_f2d>
 8080482:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8080486:	6960      	ldr	r0, [r4, #20]
 8080488:	f001 ffa0 	bl	80823cc <__aeabi_f2d>
 808048c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8080490:	68e0      	ldr	r0, [r4, #12]
 8080492:	f001 ff9b 	bl	80823cc <__aeabi_f2d>
 8080496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808049a:	68a3      	ldr	r3, [r4, #8]
 808049c:	9300      	str	r3, [sp, #0]
 808049e:	4b3c      	ldr	r3, [pc, #240]	; (8080590 <loop+0x2f8>)
 80804a0:	2178      	movs	r1, #120	; 0x78
 80804a2:	4a3c      	ldr	r2, [pc, #240]	; (8080594 <loop+0x2fc>)
 80804a4:	eb0d 0001 	add.w	r0, sp, r1
 80804a8:	f000 fa92 	bl	80809d0 <snprintf>
      Serial.println(data);
 80804ac:	f001 fb78 	bl	8081ba0 <_Z16_fetch_usbserialv>
 80804b0:	a91e      	add	r1, sp, #120	; 0x78
 80804b2:	f000 ffb3 	bl	808141c <_ZN5Print7printlnEPKc>
 80804b6:	f000 f8e7 	bl	8080688 <HAL_Timer_Get_Milli_Seconds>
    }

    stateTime = millis();
 80804ba:	4b2d      	ldr	r3, [pc, #180]	; (8080570 <loop+0x2d8>)
      {
        // Took too long to publish, just go to sleep
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS)
        {
          isMaxTime = true;
          state = SLEEP_STATE;
 80804bc:	2601      	movs	r6, #1
 80804be:	461d      	mov	r5, r3
                cellVoltage, stateOfCharge
              );
      Serial.println(data);
    }

    stateTime = millis();
 80804c0:	6018      	str	r0, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80804c2:	f000 fa3d 	bl	8080940 <spark_cloud_flag_connected>

    while(!isMaxTime)
    {
      //connect particle to the cloud
      if (Particle.connected() == false)
 80804c6:	b908      	cbnz	r0, 80804cc <loop+0x234>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80804c8:	f000 fa32 	bl	8080930 <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80804cc:	f000 fa38 	bl	8080940 <spark_cloud_flag_connected>
      {
        Particle.connect();
      }

      // If connected, publish data buffer
      if (Particle.connected())
 80804d0:	4604      	mov	r4, r0
 80804d2:	b340      	cbz	r0, 8080526 <loop+0x28e>
      {
        Serial.println("publishing data");
 80804d4:	f001 fb64 	bl	8081ba0 <_Z16_fetch_usbserialv>
 80804d8:	492f      	ldr	r1, [pc, #188]	; (8080598 <loop+0x300>)
 80804da:	f000 ff9f 	bl	808141c <_ZN5Print7printlnEPKc>
        Particle.publish(eventName, data, 60, PRIVATE);
 80804de:	4b2f      	ldr	r3, [pc, #188]	; (808059c <loop+0x304>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80804e0:	aa1e      	add	r2, sp, #120	; 0x78
 80804e2:	6819      	ldr	r1, [r3, #0]
 80804e4:	4b2e      	ldr	r3, [pc, #184]	; (80805a0 <loop+0x308>)
 80804e6:	a81a      	add	r0, sp, #104	; 0x68
 80804e8:	781b      	ldrb	r3, [r3, #0]
 80804ea:	f88d 3000 	strb.w	r3, [sp]
 80804ee:	233c      	movs	r3, #60	; 0x3c
 80804f0:	f000 fc1c 	bl	8080d2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80804f4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80804f6:	b17c      	cbz	r4, 8080518 <loop+0x280>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80804f8:	6863      	ldr	r3, [r4, #4]
 80804fa:	3b01      	subs	r3, #1
 80804fc:	6063      	str	r3, [r4, #4]
 80804fe:	b95b      	cbnz	r3, 8080518 <loop+0x280>
        {
          _M_dispose();
 8080500:	6823      	ldr	r3, [r4, #0]
 8080502:	4620      	mov	r0, r4
 8080504:	689b      	ldr	r3, [r3, #8]
 8080506:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080508:	68a3      	ldr	r3, [r4, #8]
 808050a:	3b01      	subs	r3, #1
 808050c:	60a3      	str	r3, [r4, #8]
 808050e:	b91b      	cbnz	r3, 8080518 <loop+0x280>
            _M_destroy();
 8080510:	6823      	ldr	r3, [r4, #0]
 8080512:	4620      	mov	r0, r4
 8080514:	68db      	ldr	r3, [r3, #12]
 8080516:	4798      	blx	r3

        // Wait for the publish data
        delay(TIME_AFTER_PUBLISH_MS);
 8080518:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 808051c:	f000 fa78 	bl	8080a10 <delay>
        isMaxTime = true;
        state = SLEEP_STATE;
 8080520:	2301      	movs	r3, #1
 8080522:	703b      	strb	r3, [r7, #0]
 8080524:	e015      	b.n	8080552 <loop+0x2ba>
 8080526:	f000 f8af 	bl	8080688 <HAL_Timer_Get_Milli_Seconds>
      }
      // If not connected after certain amount of time, go to sleep to save battery
      else
      {
        // Took too long to publish, just go to sleep
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS)
 808052a:	682b      	ldr	r3, [r5, #0]
 808052c:	1ac0      	subs	r0, r0, r3
 808052e:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8080532:	4298      	cmp	r0, r3
 8080534:	d906      	bls.n	8080544 <loop+0x2ac>
        {
          isMaxTime = true;
          state = SLEEP_STATE;
 8080536:	703e      	strb	r6, [r7, #0]
          Serial.println("max time for pulishing reach");
 8080538:	f001 fb32 	bl	8081ba0 <_Z16_fetch_usbserialv>
 808053c:	4919      	ldr	r1, [pc, #100]	; (80805a4 <loop+0x30c>)
 808053e:	f000 ff6d 	bl	808141c <_ZN5Print7printlnEPKc>
      else
      {
        // Took too long to publish, just go to sleep
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS)
        {
          isMaxTime = true;
 8080542:	2401      	movs	r4, #1
          state = SLEEP_STATE;
          Serial.println("max time for pulishing reach");
        }
        Serial.println("Not max time, try again to publish");
 8080544:	f001 fb2c 	bl	8081ba0 <_Z16_fetch_usbserialv>
 8080548:	4917      	ldr	r1, [pc, #92]	; (80805a8 <loop+0x310>)
 808054a:	f000 ff67 	bl	808141c <_ZN5Print7printlnEPKc>
      Serial.println(data);
    }

    stateTime = millis();

    while(!isMaxTime)
 808054e:	2c00      	cmp	r4, #0
 8080550:	d0b7      	beq.n	80804c2 <loop+0x22a>

    // Read SeapHOx response
    responseStr = Serial1.readString();
    Serial.println(responseStr);

    String s2 = responseStr.replace("Error.txt f_read error: FR_OK\r\n", "");
 8080552:	a816      	add	r0, sp, #88	; 0x58
 8080554:	f001 f82e 	bl	80815b4 <_ZN6StringD1Ev>
    state = PUBLISH_STATE;
  }
  break;

  }
}
 8080558:	b03d      	add	sp, #244	; 0xf4
 808055a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808055c:	2000057c 	.word	0x2000057c
 8080560:	0808580a 	.word	0x0808580a
 8080564:	00015180 	.word	0x00015180
 8080568:	08085819 	.word	0x08085819
 808056c:	20000580 	.word	0x20000580
 8080570:	2000059c 	.word	0x2000059c
 8080574:	08085752 	.word	0x08085752
 8080578:	20000584 	.word	0x20000584
 808057c:	08085758 	.word	0x08085758
 8080580:	0808560f 	.word	0x0808560f
 8080584:	0808560e 	.word	0x0808560e
 8080588:	20000594 	.word	0x20000594
 808058c:	200004fc 	.word	0x200004fc
 8080590:	080857b2 	.word	0x080857b2
 8080594:	08085778 	.word	0x08085778
 8080598:	080857ba 	.word	0x080857ba
 808059c:	20000400 	.word	0x20000400
 80805a0:	2000057d 	.word	0x2000057d
 80805a4:	080857ca 	.word	0x080857ca
 80805a8:	080857e7 	.word	0x080857e7

080805ac <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80805ac:	4b1f      	ldr	r3, [pc, #124]	; (808062c <_GLOBAL__sub_I_SystemMode+0x80>)
  }
  else{
    Serial.printf("Error: improper or incomplete data receive from seaPHOX");
    return false;
  }
}
 80805ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80805b0:	2500      	movs	r5, #0
 80805b2:	601d      	str	r5, [r3, #0]
 80805b4:	4b1e      	ldr	r3, [pc, #120]	; (8080630 <_GLOBAL__sub_I_SystemMode+0x84>)
 80805b6:	2601      	movs	r6, #1
 80805b8:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80805ba:	f000 f87d 	bl	80806b8 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80805be:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80805c2:	4c1c      	ldr	r4, [pc, #112]	; (8080634 <_GLOBAL__sub_I_SystemMode+0x88>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80805c4:	4630      	mov	r0, r6
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80805c6:	8063      	strh	r3, [r4, #2]
 80805c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80805cc:	7025      	strb	r5, [r4, #0]
 80805ce:	80a3      	strh	r3, [r4, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80805d0:	f000 f962 	bl	8080898 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80805d4:	a802      	add	r0, sp, #8
 80805d6:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80805da:	462a      	mov	r2, r5
 80805dc:	4629      	mov	r1, r5
 80805de:	f000 f843 	bl	8080668 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80805e2:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80805e4:	2b1e      	cmp	r3, #30
 80805e6:	d104      	bne.n	80805f2 <_GLOBAL__sub_I_SystemMode+0x46>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80805e8:	2303      	movs	r3, #3
 80805ea:	7023      	strb	r3, [r4, #0]
 80805ec:	2311      	movs	r3, #17
 80805ee:	8065      	strh	r5, [r4, #2]
 80805f0:	80a3      	strh	r3, [r4, #4]
// #include "Serial5/Serial5.h" // if we use Asset Tracker

SYSTEM_MODE(AUTOMATIC);

// Global objects
FuelGauge batteryMonitor;
 80805f2:	2100      	movs	r1, #0
 80805f4:	4810      	ldr	r0, [pc, #64]	; (8080638 <_GLOBAL__sub_I_SystemMode+0x8c>)
 80805f6:	f000 fd15 	bl	8081024 <_ZN9FuelGaugeC1Eb>
 80805fa:	4a10      	ldr	r2, [pc, #64]	; (808063c <_GLOBAL__sub_I_SystemMode+0x90>)
 80805fc:	4910      	ldr	r1, [pc, #64]	; (8080640 <_GLOBAL__sub_I_SystemMode+0x94>)
 80805fe:	480e      	ldr	r0, [pc, #56]	; (8080638 <_GLOBAL__sub_I_SystemMode+0x8c>)
 8080600:	f001 fc30 	bl	8081e64 <__aeabi_atexit>
PMIC pmic;
 8080604:	2100      	movs	r1, #0
 8080606:	480f      	ldr	r0, [pc, #60]	; (8080644 <_GLOBAL__sub_I_SystemMode+0x98>)
 8080608:	f000 fe35 	bl	8081276 <_ZN4PMICC1Eb>
 808060c:	4a0b      	ldr	r2, [pc, #44]	; (808063c <_GLOBAL__sub_I_SystemMode+0x90>)
 808060e:	490e      	ldr	r1, [pc, #56]	; (8080648 <_GLOBAL__sub_I_SystemMode+0x9c>)
 8080610:	480c      	ldr	r0, [pc, #48]	; (8080644 <_GLOBAL__sub_I_SystemMode+0x98>)
 8080612:	f001 fc27 	bl	8081e64 <__aeabi_atexit>
const unsigned long TIME_AFTER_PUBLISH_MS = 4000; // After publish, wait 4 seconds for data to go out
const unsigned long TIME_AFTER_BOOT_MS = 5000; // At boot, wait 5 seconds before going to sleep again (after coming online)
const unsigned long TIMEOUT_SEAPHOX_MS = 5000; // Max wait time for SeapHOx response

// SeapHOx struct for response variables
String responseStr;
 8080616:	490d      	ldr	r1, [pc, #52]	; (808064c <_GLOBAL__sub_I_SystemMode+0xa0>)
 8080618:	480d      	ldr	r0, [pc, #52]	; (8080650 <_GLOBAL__sub_I_SystemMode+0xa4>)
 808061a:	f001 f812 	bl	8081642 <_ZN6StringC1EPK19__FlashStringHelper>
 808061e:	4a07      	ldr	r2, [pc, #28]	; (808063c <_GLOBAL__sub_I_SystemMode+0x90>)
 8080620:	490c      	ldr	r1, [pc, #48]	; (8080654 <_GLOBAL__sub_I_SystemMode+0xa8>)
 8080622:	480b      	ldr	r0, [pc, #44]	; (8080650 <_GLOBAL__sub_I_SystemMode+0xa4>)
 8080624:	f001 fc1e 	bl	8081e64 <__aeabi_atexit>
  }
  else{
    Serial.printf("Error: improper or incomplete data receive from seaPHOX");
    return false;
  }
}
 8080628:	b002      	add	sp, #8
 808062a:	bd70      	pop	{r4, r5, r6, pc}
 808062c:	20000580 	.word	0x20000580
 8080630:	2000057d 	.word	0x2000057d
 8080634:	200005a0 	.word	0x200005a0
 8080638:	20000594 	.word	0x20000594
 808063c:	200004f4 	.word	0x200004f4
 8080640:	08081043 	.word	0x08081043
 8080644:	200004f8 	.word	0x200004f8
 8080648:	08081295 	.word	0x08081295
 808064c:	0808560f 	.word	0x0808560f
 8080650:	20000584 	.word	0x20000584
 8080654:	080815b5 	.word	0x080815b5

08080658 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8080658:	b508      	push	{r3, lr}
 808065a:	4b02      	ldr	r3, [pc, #8]	; (8080664 <os_mutex_create+0xc>)
 808065c:	681b      	ldr	r3, [r3, #0]
 808065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080660:	9301      	str	r3, [sp, #4]
 8080662:	bd08      	pop	{r3, pc}
 8080664:	080401d0 	.word	0x080401d0

08080668 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8080668:	b508      	push	{r3, lr}
 808066a:	4b02      	ldr	r3, [pc, #8]	; (8080674 <HAL_Core_Get_Last_Reset_Info+0xc>)
 808066c:	681b      	ldr	r3, [r3, #0]
 808066e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8080670:	9301      	str	r3, [sp, #4]
 8080672:	bd08      	pop	{r3, pc}
 8080674:	080401b8 	.word	0x080401b8

08080678 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080678:	b508      	push	{r3, lr}
 808067a:	4b02      	ldr	r3, [pc, #8]	; (8080684 <HAL_RNG_GetRandomNumber+0xc>)
 808067c:	681b      	ldr	r3, [r3, #0]
 808067e:	685b      	ldr	r3, [r3, #4]
 8080680:	9301      	str	r3, [sp, #4]
 8080682:	bd08      	pop	{r3, pc}
 8080684:	0804019c 	.word	0x0804019c

08080688 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080688:	b508      	push	{r3, lr}
 808068a:	4b02      	ldr	r3, [pc, #8]	; (8080694 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808068c:	681b      	ldr	r3, [r3, #0]
 808068e:	695b      	ldr	r3, [r3, #20]
 8080690:	9301      	str	r3, [sp, #4]
 8080692:	bd08      	pop	{r3, pc}
 8080694:	0804019c 	.word	0x0804019c

08080698 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8080698:	b508      	push	{r3, lr}
 808069a:	4b02      	ldr	r3, [pc, #8]	; (80806a4 <HAL_RTC_Get_UnixTime+0xc>)
 808069c:	681b      	ldr	r3, [r3, #0]
 808069e:	69db      	ldr	r3, [r3, #28]
 80806a0:	9301      	str	r3, [sp, #4]
 80806a2:	bd08      	pop	{r3, pc}
 80806a4:	0804019c 	.word	0x0804019c

080806a8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80806a8:	b508      	push	{r3, lr}
 80806aa:	4b02      	ldr	r3, [pc, #8]	; (80806b4 <HAL_RTC_Time_Is_Valid+0xc>)
 80806ac:	681b      	ldr	r3, [r3, #0]
 80806ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80806b0:	9301      	str	r3, [sp, #4]
 80806b2:	bd08      	pop	{r3, pc}
 80806b4:	0804019c 	.word	0x0804019c

080806b8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80806b8:	b508      	push	{r3, lr}
 80806ba:	4b02      	ldr	r3, [pc, #8]	; (80806c4 <HAL_Pin_Map+0xc>)
 80806bc:	681b      	ldr	r3, [r3, #0]
 80806be:	681b      	ldr	r3, [r3, #0]
 80806c0:	9301      	str	r3, [sp, #4]
 80806c2:	bd08      	pop	{r3, pc}
 80806c4:	080401b0 	.word	0x080401b0

080806c8 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80806c8:	b508      	push	{r3, lr}
 80806ca:	4b02      	ldr	r3, [pc, #8]	; (80806d4 <HAL_I2C_Request_Data+0xc>)
 80806cc:	681b      	ldr	r3, [r3, #0]
 80806ce:	695b      	ldr	r3, [r3, #20]
 80806d0:	9301      	str	r3, [sp, #4]
 80806d2:	bd08      	pop	{r3, pc}
 80806d4:	080401ac 	.word	0x080401ac

080806d8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80806d8:	b508      	push	{r3, lr}
 80806da:	4b02      	ldr	r3, [pc, #8]	; (80806e4 <HAL_I2C_Begin_Transmission+0xc>)
 80806dc:	681b      	ldr	r3, [r3, #0]
 80806de:	699b      	ldr	r3, [r3, #24]
 80806e0:	9301      	str	r3, [sp, #4]
 80806e2:	bd08      	pop	{r3, pc}
 80806e4:	080401ac 	.word	0x080401ac

080806e8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80806e8:	b508      	push	{r3, lr}
 80806ea:	4b02      	ldr	r3, [pc, #8]	; (80806f4 <HAL_I2C_End_Transmission+0xc>)
 80806ec:	681b      	ldr	r3, [r3, #0]
 80806ee:	69db      	ldr	r3, [r3, #28]
 80806f0:	9301      	str	r3, [sp, #4]
 80806f2:	bd08      	pop	{r3, pc}
 80806f4:	080401ac 	.word	0x080401ac

080806f8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80806f8:	b508      	push	{r3, lr}
 80806fa:	4b02      	ldr	r3, [pc, #8]	; (8080704 <HAL_I2C_Write_Data+0xc>)
 80806fc:	681b      	ldr	r3, [r3, #0]
 80806fe:	6a1b      	ldr	r3, [r3, #32]
 8080700:	9301      	str	r3, [sp, #4]
 8080702:	bd08      	pop	{r3, pc}
 8080704:	080401ac 	.word	0x080401ac

08080708 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8080708:	b508      	push	{r3, lr}
 808070a:	4b02      	ldr	r3, [pc, #8]	; (8080714 <HAL_I2C_Available_Data+0xc>)
 808070c:	681b      	ldr	r3, [r3, #0]
 808070e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080710:	9301      	str	r3, [sp, #4]
 8080712:	bd08      	pop	{r3, pc}
 8080714:	080401ac 	.word	0x080401ac

08080718 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8080718:	b508      	push	{r3, lr}
 808071a:	4b02      	ldr	r3, [pc, #8]	; (8080724 <HAL_I2C_Read_Data+0xc>)
 808071c:	681b      	ldr	r3, [r3, #0]
 808071e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080720:	9301      	str	r3, [sp, #4]
 8080722:	bd08      	pop	{r3, pc}
 8080724:	080401ac 	.word	0x080401ac

08080728 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8080728:	b508      	push	{r3, lr}
 808072a:	4b02      	ldr	r3, [pc, #8]	; (8080734 <HAL_I2C_Peek_Data+0xc>)
 808072c:	681b      	ldr	r3, [r3, #0]
 808072e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080730:	9301      	str	r3, [sp, #4]
 8080732:	bd08      	pop	{r3, pc}
 8080734:	080401ac 	.word	0x080401ac

08080738 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8080738:	b508      	push	{r3, lr}
 808073a:	4b02      	ldr	r3, [pc, #8]	; (8080744 <HAL_I2C_Flush_Data+0xc>)
 808073c:	681b      	ldr	r3, [r3, #0]
 808073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080740:	9301      	str	r3, [sp, #4]
 8080742:	bd08      	pop	{r3, pc}
 8080744:	080401ac 	.word	0x080401ac

08080748 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8080748:	b508      	push	{r3, lr}
 808074a:	4b02      	ldr	r3, [pc, #8]	; (8080754 <HAL_I2C_Init+0xc>)
 808074c:	681b      	ldr	r3, [r3, #0]
 808074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080750:	9301      	str	r3, [sp, #4]
 8080752:	bd08      	pop	{r3, pc}
 8080754:	080401ac 	.word	0x080401ac

08080758 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8080758:	b508      	push	{r3, lr}
 808075a:	4b02      	ldr	r3, [pc, #8]	; (8080764 <HAL_I2C_Acquire+0xc>)
 808075c:	681b      	ldr	r3, [r3, #0]
 808075e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8080760:	9301      	str	r3, [sp, #4]
 8080762:	bd08      	pop	{r3, pc}
 8080764:	080401ac 	.word	0x080401ac

08080768 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8080768:	b508      	push	{r3, lr}
 808076a:	4b02      	ldr	r3, [pc, #8]	; (8080774 <HAL_I2C_Release+0xc>)
 808076c:	681b      	ldr	r3, [r3, #0]
 808076e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080770:	9301      	str	r3, [sp, #4]
 8080772:	bd08      	pop	{r3, pc}
 8080774:	080401ac 	.word	0x080401ac

08080778 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8080778:	b508      	push	{r3, lr}
 808077a:	4b02      	ldr	r3, [pc, #8]	; (8080784 <HAL_SPI_Init+0xc>)
 808077c:	681b      	ldr	r3, [r3, #0]
 808077e:	69db      	ldr	r3, [r3, #28]
 8080780:	9301      	str	r3, [sp, #4]
 8080782:	bd08      	pop	{r3, pc}
 8080784:	080401b4 	.word	0x080401b4

08080788 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8080788:	b508      	push	{r3, lr}
 808078a:	4b02      	ldr	r3, [pc, #8]	; (8080794 <HAL_USART_Init+0xc>)
 808078c:	681b      	ldr	r3, [r3, #0]
 808078e:	699b      	ldr	r3, [r3, #24]
 8080790:	9301      	str	r3, [sp, #4]
 8080792:	bd08      	pop	{r3, pc}
 8080794:	080401c4 	.word	0x080401c4

08080798 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
 8080798:	b508      	push	{r3, lr}
 808079a:	4b02      	ldr	r3, [pc, #8]	; (80807a4 <HAL_USART_End+0xc>)
 808079c:	681b      	ldr	r3, [r3, #0]
 808079e:	6a1b      	ldr	r3, [r3, #32]
 80807a0:	9301      	str	r3, [sp, #4]
 80807a2:	bd08      	pop	{r3, pc}
 80807a4:	080401c4 	.word	0x080401c4

080807a8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80807a8:	b508      	push	{r3, lr}
 80807aa:	4b02      	ldr	r3, [pc, #8]	; (80807b4 <HAL_USART_Write_Data+0xc>)
 80807ac:	681b      	ldr	r3, [r3, #0]
 80807ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80807b0:	9301      	str	r3, [sp, #4]
 80807b2:	bd08      	pop	{r3, pc}
 80807b4:	080401c4 	.word	0x080401c4

080807b8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80807b8:	b508      	push	{r3, lr}
 80807ba:	4b02      	ldr	r3, [pc, #8]	; (80807c4 <HAL_USART_Available_Data+0xc>)
 80807bc:	681b      	ldr	r3, [r3, #0]
 80807be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80807c0:	9301      	str	r3, [sp, #4]
 80807c2:	bd08      	pop	{r3, pc}
 80807c4:	080401c4 	.word	0x080401c4

080807c8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80807c8:	b508      	push	{r3, lr}
 80807ca:	4b02      	ldr	r3, [pc, #8]	; (80807d4 <HAL_USART_Read_Data+0xc>)
 80807cc:	681b      	ldr	r3, [r3, #0]
 80807ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80807d0:	9301      	str	r3, [sp, #4]
 80807d2:	bd08      	pop	{r3, pc}
 80807d4:	080401c4 	.word	0x080401c4

080807d8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80807d8:	b508      	push	{r3, lr}
 80807da:	4b02      	ldr	r3, [pc, #8]	; (80807e4 <HAL_USART_Peek_Data+0xc>)
 80807dc:	681b      	ldr	r3, [r3, #0]
 80807de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80807e0:	9301      	str	r3, [sp, #4]
 80807e2:	bd08      	pop	{r3, pc}
 80807e4:	080401c4 	.word	0x080401c4

080807e8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80807e8:	b508      	push	{r3, lr}
 80807ea:	4b02      	ldr	r3, [pc, #8]	; (80807f4 <HAL_USART_Flush_Data+0xc>)
 80807ec:	681b      	ldr	r3, [r3, #0]
 80807ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80807f0:	9301      	str	r3, [sp, #4]
 80807f2:	bd08      	pop	{r3, pc}
 80807f4:	080401c4 	.word	0x080401c4

080807f8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80807f8:	b508      	push	{r3, lr}
 80807fa:	4b02      	ldr	r3, [pc, #8]	; (8080804 <HAL_USART_Available_Data_For_Write+0xc>)
 80807fc:	681b      	ldr	r3, [r3, #0]
 80807fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080800:	9301      	str	r3, [sp, #4]
 8080802:	bd08      	pop	{r3, pc}
 8080804:	080401c4 	.word	0x080401c4

08080808 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8080808:	b508      	push	{r3, lr}
 808080a:	4b02      	ldr	r3, [pc, #8]	; (8080814 <HAL_USART_BeginConfig+0xc>)
 808080c:	681b      	ldr	r3, [r3, #0]
 808080e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080810:	9301      	str	r3, [sp, #4]
 8080812:	bd08      	pop	{r3, pc}
 8080814:	080401c4 	.word	0x080401c4

08080818 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080818:	b508      	push	{r3, lr}
 808081a:	4b02      	ldr	r3, [pc, #8]	; (8080824 <HAL_USB_USART_Init+0xc>)
 808081c:	681b      	ldr	r3, [r3, #0]
 808081e:	681b      	ldr	r3, [r3, #0]
 8080820:	9301      	str	r3, [sp, #4]
 8080822:	bd08      	pop	{r3, pc}
 8080824:	0806001c 	.word	0x0806001c

08080828 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8080828:	b508      	push	{r3, lr}
 808082a:	4b02      	ldr	r3, [pc, #8]	; (8080834 <HAL_USB_USART_Begin+0xc>)
 808082c:	681b      	ldr	r3, [r3, #0]
 808082e:	685b      	ldr	r3, [r3, #4]
 8080830:	9301      	str	r3, [sp, #4]
 8080832:	bd08      	pop	{r3, pc}
 8080834:	0806001c 	.word	0x0806001c

08080838 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080838:	b508      	push	{r3, lr}
 808083a:	4b02      	ldr	r3, [pc, #8]	; (8080844 <HAL_USB_USART_Available_Data+0xc>)
 808083c:	681b      	ldr	r3, [r3, #0]
 808083e:	691b      	ldr	r3, [r3, #16]
 8080840:	9301      	str	r3, [sp, #4]
 8080842:	bd08      	pop	{r3, pc}
 8080844:	0806001c 	.word	0x0806001c

08080848 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080848:	b508      	push	{r3, lr}
 808084a:	4b02      	ldr	r3, [pc, #8]	; (8080854 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808084c:	681b      	ldr	r3, [r3, #0]
 808084e:	695b      	ldr	r3, [r3, #20]
 8080850:	9301      	str	r3, [sp, #4]
 8080852:	bd08      	pop	{r3, pc}
 8080854:	0806001c 	.word	0x0806001c

08080858 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080858:	b508      	push	{r3, lr}
 808085a:	4b02      	ldr	r3, [pc, #8]	; (8080864 <HAL_USB_USART_Receive_Data+0xc>)
 808085c:	681b      	ldr	r3, [r3, #0]
 808085e:	699b      	ldr	r3, [r3, #24]
 8080860:	9301      	str	r3, [sp, #4]
 8080862:	bd08      	pop	{r3, pc}
 8080864:	0806001c 	.word	0x0806001c

08080868 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080868:	b508      	push	{r3, lr}
 808086a:	4b02      	ldr	r3, [pc, #8]	; (8080874 <HAL_USB_USART_Send_Data+0xc>)
 808086c:	681b      	ldr	r3, [r3, #0]
 808086e:	69db      	ldr	r3, [r3, #28]
 8080870:	9301      	str	r3, [sp, #4]
 8080872:	bd08      	pop	{r3, pc}
 8080874:	0806001c 	.word	0x0806001c

08080878 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080878:	b508      	push	{r3, lr}
 808087a:	4b02      	ldr	r3, [pc, #8]	; (8080884 <HAL_USB_USART_Flush_Data+0xc>)
 808087c:	681b      	ldr	r3, [r3, #0]
 808087e:	6a1b      	ldr	r3, [r3, #32]
 8080880:	9301      	str	r3, [sp, #4]
 8080882:	bd08      	pop	{r3, pc}
 8080884:	0806001c 	.word	0x0806001c

08080888 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8080888:	b508      	push	{r3, lr}
 808088a:	4b02      	ldr	r3, [pc, #8]	; (8080894 <system_mode+0xc>)
 808088c:	681b      	ldr	r3, [r3, #0]
 808088e:	681b      	ldr	r3, [r3, #0]
 8080890:	9301      	str	r3, [sp, #4]
 8080892:	bd08      	pop	{r3, pc}
 8080894:	080401a4 	.word	0x080401a4

08080898 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080898:	b508      	push	{r3, lr}
 808089a:	4b02      	ldr	r3, [pc, #8]	; (80808a4 <set_system_mode+0xc>)
 808089c:	681b      	ldr	r3, [r3, #0]
 808089e:	685b      	ldr	r3, [r3, #4]
 80808a0:	9301      	str	r3, [sp, #4]
 80808a2:	bd08      	pop	{r3, pc}
 80808a4:	080401a4 	.word	0x080401a4

080808a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80808a8:	b508      	push	{r3, lr}
 80808aa:	4b02      	ldr	r3, [pc, #8]	; (80808b4 <system_delay_ms+0xc>)
 80808ac:	681b      	ldr	r3, [r3, #0]
 80808ae:	695b      	ldr	r3, [r3, #20]
 80808b0:	9301      	str	r3, [sp, #4]
 80808b2:	bd08      	pop	{r3, pc}
 80808b4:	080401a4 	.word	0x080401a4

080808b8 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80808b8:	b508      	push	{r3, lr}
 80808ba:	4b02      	ldr	r3, [pc, #8]	; (80808c4 <system_sleep+0xc>)
 80808bc:	681b      	ldr	r3, [r3, #0]
 80808be:	699b      	ldr	r3, [r3, #24]
 80808c0:	9301      	str	r3, [sp, #4]
 80808c2:	bd08      	pop	{r3, pc}
 80808c4:	080401a4 	.word	0x080401a4

080808c8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80808c8:	b508      	push	{r3, lr}
 80808ca:	4b02      	ldr	r3, [pc, #8]	; (80808d4 <application_thread_current+0xc>)
 80808cc:	681b      	ldr	r3, [r3, #0]
 80808ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80808d0:	9301      	str	r3, [sp, #4]
 80808d2:	bd08      	pop	{r3, pc}
 80808d4:	080401a4 	.word	0x080401a4

080808d8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80808d8:	b508      	push	{r3, lr}
 80808da:	4b02      	ldr	r3, [pc, #8]	; (80808e4 <application_thread_invoke+0xc>)
 80808dc:	681b      	ldr	r3, [r3, #0]
 80808de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80808e0:	9301      	str	r3, [sp, #4]
 80808e2:	bd08      	pop	{r3, pc}
 80808e4:	080401a4 	.word	0x080401a4

080808e8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80808e8:	b508      	push	{r3, lr}
 80808ea:	4b02      	ldr	r3, [pc, #8]	; (80808f4 <system_thread_get_state+0xc>)
 80808ec:	681b      	ldr	r3, [r3, #0]
 80808ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80808f0:	9301      	str	r3, [sp, #4]
 80808f2:	bd08      	pop	{r3, pc}
 80808f4:	080401a4 	.word	0x080401a4

080808f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80808f8:	b508      	push	{r3, lr}
 80808fa:	4b03      	ldr	r3, [pc, #12]	; (8080908 <system_ctrl_set_app_request_handler+0x10>)
 80808fc:	681b      	ldr	r3, [r3, #0]
 80808fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8080902:	9301      	str	r3, [sp, #4]
 8080904:	bd08      	pop	{r3, pc}
 8080906:	0000      	.short	0x0000
 8080908:	080401a4 	.word	0x080401a4

0808090c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808090c:	b508      	push	{r3, lr}
 808090e:	4b03      	ldr	r3, [pc, #12]	; (808091c <system_ctrl_set_result+0x10>)
 8080910:	681b      	ldr	r3, [r3, #0]
 8080912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080916:	9301      	str	r3, [sp, #4]
 8080918:	bd08      	pop	{r3, pc}
 808091a:	0000      	.short	0x0000
 808091c:	080401a4 	.word	0x080401a4

08080920 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8080920:	b508      	push	{r3, lr}
 8080922:	4b02      	ldr	r3, [pc, #8]	; (808092c <spark_process+0xc>)
 8080924:	681b      	ldr	r3, [r3, #0]
 8080926:	689b      	ldr	r3, [r3, #8]
 8080928:	9301      	str	r3, [sp, #4]
 808092a:	bd08      	pop	{r3, pc}
 808092c:	080401cc 	.word	0x080401cc

08080930 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8080930:	b508      	push	{r3, lr}
 8080932:	4b02      	ldr	r3, [pc, #8]	; (808093c <spark_cloud_flag_connect+0xc>)
 8080934:	681b      	ldr	r3, [r3, #0]
 8080936:	68db      	ldr	r3, [r3, #12]
 8080938:	9301      	str	r3, [sp, #4]
 808093a:	bd08      	pop	{r3, pc}
 808093c:	080401cc 	.word	0x080401cc

08080940 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8080940:	b508      	push	{r3, lr}
 8080942:	4b02      	ldr	r3, [pc, #8]	; (808094c <spark_cloud_flag_connected+0xc>)
 8080944:	681b      	ldr	r3, [r3, #0]
 8080946:	695b      	ldr	r3, [r3, #20]
 8080948:	9301      	str	r3, [sp, #4]
 808094a:	bd08      	pop	{r3, pc}
 808094c:	080401cc 	.word	0x080401cc

08080950 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8080950:	b508      	push	{r3, lr}
 8080952:	4b02      	ldr	r3, [pc, #8]	; (808095c <spark_send_event+0xc>)
 8080954:	681b      	ldr	r3, [r3, #0]
 8080956:	6a1b      	ldr	r3, [r3, #32]
 8080958:	9301      	str	r3, [sp, #4]
 808095a:	bd08      	pop	{r3, pc}
 808095c:	080401cc 	.word	0x080401cc

08080960 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8080960:	b508      	push	{r3, lr}
 8080962:	4b02      	ldr	r3, [pc, #8]	; (808096c <spark_sync_time_pending+0xc>)
 8080964:	681b      	ldr	r3, [r3, #0]
 8080966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080968:	9301      	str	r3, [sp, #4]
 808096a:	bd08      	pop	{r3, pc}
 808096c:	080401cc 	.word	0x080401cc

08080970 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080970:	b508      	push	{r3, lr}
 8080972:	4b02      	ldr	r3, [pc, #8]	; (808097c <spark_set_random_seed_from_cloud_handler+0xc>)
 8080974:	681b      	ldr	r3, [r3, #0]
 8080976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080978:	9301      	str	r3, [sp, #4]
 808097a:	bd08      	pop	{r3, pc}
 808097c:	080401cc 	.word	0x080401cc

08080980 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080980:	b508      	push	{r3, lr}
 8080982:	4b02      	ldr	r3, [pc, #8]	; (808098c <network_ready+0xc>)
 8080984:	681b      	ldr	r3, [r3, #0]
 8080986:	691b      	ldr	r3, [r3, #16]
 8080988:	9301      	str	r3, [sp, #4]
 808098a:	bd08      	pop	{r3, pc}
 808098c:	080401c8 	.word	0x080401c8

08080990 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080990:	b508      	push	{r3, lr}
 8080992:	4b02      	ldr	r3, [pc, #8]	; (808099c <malloc+0xc>)
 8080994:	681b      	ldr	r3, [r3, #0]
 8080996:	681b      	ldr	r3, [r3, #0]
 8080998:	9301      	str	r3, [sp, #4]
 808099a:	bd08      	pop	{r3, pc}
 808099c:	080401a0 	.word	0x080401a0

080809a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80809a0:	b508      	push	{r3, lr}
 80809a2:	4b02      	ldr	r3, [pc, #8]	; (80809ac <free+0xc>)
 80809a4:	681b      	ldr	r3, [r3, #0]
 80809a6:	685b      	ldr	r3, [r3, #4]
 80809a8:	9301      	str	r3, [sp, #4]
 80809aa:	bd08      	pop	{r3, pc}
 80809ac:	080401a0 	.word	0x080401a0

080809b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80809b0:	b508      	push	{r3, lr}
 80809b2:	4b02      	ldr	r3, [pc, #8]	; (80809bc <realloc+0xc>)
 80809b4:	681b      	ldr	r3, [r3, #0]
 80809b6:	689b      	ldr	r3, [r3, #8]
 80809b8:	9301      	str	r3, [sp, #4]
 80809ba:	bd08      	pop	{r3, pc}
 80809bc:	080401a0 	.word	0x080401a0

080809c0 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80809c0:	b508      	push	{r3, lr}
 80809c2:	4b02      	ldr	r3, [pc, #8]	; (80809cc <siscanf+0xc>)
 80809c4:	681b      	ldr	r3, [r3, #0]
 80809c6:	699b      	ldr	r3, [r3, #24]
 80809c8:	9301      	str	r3, [sp, #4]
 80809ca:	bd08      	pop	{r3, pc}
 80809cc:	080401a0 	.word	0x080401a0

080809d0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80809d0:	b508      	push	{r3, lr}
 80809d2:	4b02      	ldr	r3, [pc, #8]	; (80809dc <snprintf+0xc>)
 80809d4:	681b      	ldr	r3, [r3, #0]
 80809d6:	69db      	ldr	r3, [r3, #28]
 80809d8:	9301      	str	r3, [sp, #4]
 80809da:	bd08      	pop	{r3, pc}
 80809dc:	080401a0 	.word	0x080401a0

080809e0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80809e0:	b508      	push	{r3, lr}
 80809e2:	4b02      	ldr	r3, [pc, #8]	; (80809ec <vsnprintf+0xc>)
 80809e4:	681b      	ldr	r3, [r3, #0]
 80809e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80809e8:	9301      	str	r3, [sp, #4]
 80809ea:	bd08      	pop	{r3, pc}
 80809ec:	080401a0 	.word	0x080401a0

080809f0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80809f0:	b508      	push	{r3, lr}
 80809f2:	4b02      	ldr	r3, [pc, #8]	; (80809fc <abort+0xc>)
 80809f4:	681b      	ldr	r3, [r3, #0]
 80809f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80809f8:	9301      	str	r3, [sp, #4]
 80809fa:	bd08      	pop	{r3, pc}
 80809fc:	080401a0 	.word	0x080401a0

08080a00 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8080a00:	b508      	push	{r3, lr}
 8080a02:	4b02      	ldr	r3, [pc, #8]	; (8080a0c <_malloc_r+0xc>)
 8080a04:	681b      	ldr	r3, [r3, #0]
 8080a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080a08:	9301      	str	r3, [sp, #4]
 8080a0a:	bd08      	pop	{r3, pc}
 8080a0c:	080401a0 	.word	0x080401a0

08080a10 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080a10:	2100      	movs	r1, #0
 8080a12:	f7ff bf49 	b.w	80808a8 <system_delay_ms>

08080a16 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8080a16:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080a18:	6883      	ldr	r3, [r0, #8]
 8080a1a:	4604      	mov	r4, r0
 8080a1c:	b90b      	cbnz	r3, 8080a22 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8080a1e:	f001 fa26 	bl	8081e6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080a22:	68c3      	ldr	r3, [r0, #12]
 8080a24:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8080a26:	68a3      	ldr	r3, [r4, #8]
 8080a28:	b11b      	cbz	r3, 8080a32 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080a2a:	2203      	movs	r2, #3
 8080a2c:	4621      	mov	r1, r4
 8080a2e:	4620      	mov	r0, r4
 8080a30:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080a32:	4620      	mov	r0, r4
}
 8080a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080a38:	f7ff bb31 	b.w	808009e <_ZdlPv>

08080a3c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080a3c:	2200      	movs	r2, #0
 8080a3e:	4611      	mov	r1, r2
 8080a40:	4610      	mov	r0, r2
 8080a42:	f7ff bf9d 	b.w	8080980 <network_ready>
	...

08080a48 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 8080a48:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8080a4a:	4c0b      	ldr	r4, [pc, #44]	; (8080a78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 8080a4c:	2528      	movs	r5, #40	; 0x28
 8080a4e:	462a      	mov	r2, r5
 8080a50:	2100      	movs	r1, #0
 8080a52:	4620      	mov	r0, r4
 8080a54:	f002 fbe4 	bl	8083220 <memset>
        cid = -1;
 8080a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080a5c:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 8080a5e:	8025      	strh	r5, [r4, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 8080a60:	4c06      	ldr	r4, [pc, #24]	; (8080a7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8080a62:	4b07      	ldr	r3, [pc, #28]	; (8080a80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8080a64:	4620      	mov	r0, r4
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8080a66:	252c      	movs	r5, #44	; 0x2c
 8080a68:	f840 3b04 	str.w	r3, [r0], #4
 8080a6c:	462a      	mov	r2, r5
 8080a6e:	2100      	movs	r1, #0
 8080a70:	f002 fbd6 	bl	8083220 <memset>
        size = sizeof(*this);
 8080a74:	80a5      	strh	r5, [r4, #4]
 8080a76:	bd38      	pop	{r3, r4, r5, pc}
 8080a78:	200005d8 	.word	0x200005d8
 8080a7c:	200005a8 	.word	0x200005a8
 8080a80:	08085840 	.word	0x08085840

08080a84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080a84:	4770      	bx	lr

08080a86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8080a86:	2000      	movs	r0, #0
 8080a88:	4770      	bx	lr

08080a8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080a8a:	b510      	push	{r4, lr}
 8080a8c:	4604      	mov	r4, r0
 8080a8e:	f7ff fb06 	bl	808009e <_ZdlPv>
 8080a92:	4620      	mov	r0, r4
 8080a94:	bd10      	pop	{r4, pc}

08080a96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8080a96:	b508      	push	{r3, lr}
      { delete this; }
 8080a98:	b108      	cbz	r0, 8080a9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8080a9a:	f7ff fff6 	bl	8080a8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8080a9e:	bd08      	pop	{r3, pc}

08080aa0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080aa0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080aa2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080aa4:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080aa6:	b113      	cbz	r3, 8080aae <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080aa8:	2203      	movs	r2, #3
 8080aaa:	4601      	mov	r1, r0
 8080aac:	4798      	blx	r3
    }
 8080aae:	4620      	mov	r0, r4
 8080ab0:	bd10      	pop	{r4, pc}

08080ab2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8080ab2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8080ab4:	68c4      	ldr	r4, [r0, #12]
 8080ab6:	b1d4      	cbz	r4, 8080aee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8080ab8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8080aba:	2b02      	cmp	r3, #2
 8080abc:	d102      	bne.n	8080ac4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080abe:	68e0      	ldr	r0, [r4, #12]
 8080ac0:	f7ff ff6e 	bl	80809a0 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8080ac4:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8080ac6:	b12d      	cbz	r5, 8080ad4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080ac8:	4628      	mov	r0, r5
 8080aca:	f7ff ffe9 	bl	8080aa0 <_ZNSt14_Function_baseD1Ev>
 8080ace:	4628      	mov	r0, r5
 8080ad0:	f7ff fae5 	bl	808009e <_ZdlPv>
 8080ad4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8080ad6:	b12d      	cbz	r5, 8080ae4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8080ad8:	4628      	mov	r0, r5
 8080ada:	f7ff ffe1 	bl	8080aa0 <_ZNSt14_Function_baseD1Ev>
 8080ade:	4628      	mov	r0, r5
 8080ae0:	f7ff fadd 	bl	808009e <_ZdlPv>
 8080ae4:	4620      	mov	r0, r4
 8080ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8080aea:	f7ff bad8 	b.w	808009e <_ZdlPv>
 8080aee:	bd38      	pop	{r3, r4, r5, pc}

08080af0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080af0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080af2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080af4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8080af6:	b17c      	cbz	r4, 8080b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080af8:	6863      	ldr	r3, [r4, #4]
 8080afa:	3b01      	subs	r3, #1
 8080afc:	6063      	str	r3, [r4, #4]
 8080afe:	b95b      	cbnz	r3, 8080b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080b00:	6823      	ldr	r3, [r4, #0]
 8080b02:	4620      	mov	r0, r4
 8080b04:	689b      	ldr	r3, [r3, #8]
 8080b06:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080b08:	68a3      	ldr	r3, [r4, #8]
 8080b0a:	3b01      	subs	r3, #1
 8080b0c:	60a3      	str	r3, [r4, #8]
 8080b0e:	b91b      	cbnz	r3, 8080b18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080b10:	6823      	ldr	r3, [r4, #0]
 8080b12:	4620      	mov	r0, r4
 8080b14:	68db      	ldr	r3, [r3, #12]
 8080b16:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080b18:	4628      	mov	r0, r5
 8080b1a:	bd38      	pop	{r3, r4, r5, pc}

08080b1c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8080b1c:	b513      	push	{r0, r1, r4, lr}
 8080b1e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8080b20:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8080b24:	2300      	movs	r3, #0
 8080b26:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080b28:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8080b2a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8080b2c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080b2e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8080b30:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080b32:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080b34:	f7ff ffdc 	bl	8080af0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b38:	4620      	mov	r0, r4
 8080b3a:	b002      	add	sp, #8
 8080b3c:	bd10      	pop	{r4, pc}

08080b3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8080b3e:	680b      	ldr	r3, [r1, #0]
 8080b40:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8080b42:	b113      	cbz	r3, 8080b4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8080b44:	685a      	ldr	r2, [r3, #4]
 8080b46:	3201      	adds	r2, #1
 8080b48:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8080b4a:	4770      	bx	lr

08080b4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8080b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080b4e:	460c      	mov	r4, r1
 8080b50:	4606      	mov	r6, r0
 8080b52:	460f      	mov	r7, r1
 8080b54:	f854 3b04 	ldr.w	r3, [r4], #4
 8080b58:	ad02      	add	r5, sp, #8
 8080b5a:	f845 3d08 	str.w	r3, [r5, #-8]!
 8080b5e:	4621      	mov	r1, r4
 8080b60:	a801      	add	r0, sp, #4
 8080b62:	f7ff ffec 	bl	8080b3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8080b66:	4629      	mov	r1, r5
 8080b68:	4630      	mov	r0, r6
 8080b6a:	f7ff ffd7 	bl	8080b1c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080b6e:	a801      	add	r0, sp, #4
 8080b70:	f7ff ffbe 	bl	8080af0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b74:	4620      	mov	r0, r4
 8080b76:	f7ff ffbb 	bl	8080af0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8080b7a:	4638      	mov	r0, r7
 8080b7c:	f7ff fa8f 	bl	808009e <_ZdlPv>
        return p;
    }
 8080b80:	4630      	mov	r0, r6
 8080b82:	b003      	add	sp, #12
 8080b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080b86 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8080b86:	b513      	push	{r0, r1, r4, lr}
 8080b88:	460b      	mov	r3, r1
 8080b8a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080b8c:	c803      	ldmia	r0, {r0, r1}
 8080b8e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8080b92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8080b96:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8080b9a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8080b9e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8080ba2:	b002      	add	sp, #8
 8080ba4:	bd10      	pop	{r4, pc}

08080ba6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080ba6:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080ba8:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080baa:	b90a      	cbnz	r2, 8080bb0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8080bac:	f001 f95f 	bl	8081e6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080bb0:	68c3      	ldr	r3, [r0, #12]
    }
 8080bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080bb6:	4718      	bx	r3

08080bb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080bb8:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080bba:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8080bbc:	f100 0110 	add.w	r1, r0, #16
 8080bc0:	f7ff fff1 	bl	8080ba6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8080bc4:	bd08      	pop	{r3, pc}

08080bc6 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080bc6:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080bc8:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080bca:	b90a      	cbnz	r2, 8080bd0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8080bcc:	f001 f94f 	bl	8081e6e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080bd0:	68c3      	ldr	r3, [r0, #12]
    }
 8080bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080bd6:	4718      	bx	r3

08080bd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080bd8:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080bda:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8080bdc:	f100 0110 	add.w	r1, r0, #16
 8080be0:	f7ff fff1 	bl	8080bc6 <_ZNKSt8functionIFvRKbEEclES1_>
 8080be4:	bd08      	pop	{r3, pc}

08080be6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080be6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080be8:	2300      	movs	r3, #0
 8080bea:	6083      	str	r3, [r0, #8]
 8080bec:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080bee:	4604      	mov	r4, r0
 8080bf0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080bf2:	b12b      	cbz	r3, 8080c00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080bf4:	2202      	movs	r2, #2
 8080bf6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080bf8:	68eb      	ldr	r3, [r5, #12]
 8080bfa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080bfc:	68ab      	ldr	r3, [r5, #8]
 8080bfe:	60a3      	str	r3, [r4, #8]
	}
    }
 8080c00:	4620      	mov	r0, r4
 8080c02:	bd38      	pop	{r3, r4, r5, pc}

08080c04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8080c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8080c08:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8080c0c:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8080c0e:	f04f 0002 	mov.w	r0, #2
 8080c12:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080c14:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8080c18:	808b      	strh	r3, [r1, #4]
 8080c1a:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080c1c:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8080c1e:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 8080c22:	600b      	str	r3, [r1, #0]
 8080c24:	e8d4 1f4f 	ldrexb	r1, [r4]
 8080c28:	4299      	cmp	r1, r3
 8080c2a:	d103      	bne.n	8080c34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 8080c2c:	e8c4 0f45 	strexb	r5, r0, [r4]
 8080c30:	2d00      	cmp	r5, #0
 8080c32:	d1f7      	bne.n	8080c24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8080c34:	d002      	beq.n	8080c3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 8080c36:	f88d 1000 	strb.w	r1, [sp]
 8080c3a:	e06b      	b.n	8080d14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8080c3c:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080c40:	bf1c      	itt	ne
 8080c42:	60e7      	strne	r7, [r4, #12]
 8080c44:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8080c46:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8080c4a:	bf18      	it	ne
 8080c4c:	461f      	movne	r7, r3
 8080c4e:	2301      	movs	r3, #1
 8080c50:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8080c52:	f3bf 8f5f 	dmb	sy
 8080c56:	f104 0308 	add.w	r3, r4, #8
 8080c5a:	2000      	movs	r0, #0
 8080c5c:	e853 6f00 	ldrex	r6, [r3]
 8080c60:	e843 0200 	strex	r2, r0, [r3]
 8080c64:	2a00      	cmp	r2, #0
 8080c66:	d1f9      	bne.n	8080c5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 8080c68:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8080c6c:	2e00      	cmp	r6, #0
 8080c6e:	d051      	beq.n	8080d14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8080c70:	f7ff fe2a 	bl	80808c8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8080c74:	b120      	cbz	r0, 8080c80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080c76:	4629      	mov	r1, r5
 8080c78:	4630      	mov	r0, r6
 8080c7a:	f7ff ff94 	bl	8080ba6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8080c7e:	e043      	b.n	8080d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080c80:	4631      	mov	r1, r6
 8080c82:	4668      	mov	r0, sp
 8080c84:	f7ff ffaf 	bl	8080be6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8080c88:	68e0      	ldr	r0, [r4, #12]
 8080c8a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080c8e:	b108      	cbz	r0, 8080c94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 8080c90:	f002 fb08 	bl	80832a4 <strdup>
 8080c94:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080c96:	2010      	movs	r0, #16
 8080c98:	f8ad 5014 	strh.w	r5, [sp, #20]
 8080c9c:	f7ff f9fd 	bl	808009a <_Znwj>
 8080ca0:	4605      	mov	r5, r0
 8080ca2:	b330      	cbz	r0, 8080cf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080ca4:	f04f 0800 	mov.w	r8, #0
 8080ca8:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080cac:	2018      	movs	r0, #24
 8080cae:	f7ff f9f4 	bl	808009a <_Znwj>
 8080cb2:	4604      	mov	r4, r0
 8080cb4:	b1c0      	cbz	r0, 8080ce8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080cb6:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8080cba:	4601      	mov	r1, r0
 8080cbc:	4668      	mov	r0, sp
 8080cbe:	f7ff ff62 	bl	8080b86 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080cc2:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8080cc4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080cc6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080cc8:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8080cca:	9202      	str	r2, [sp, #8]
 8080ccc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8080cce:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080cd0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8080cd4:	9203      	str	r2, [sp, #12]
 8080cd6:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8080cd8:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8080cdc:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080ce0:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8080ce2:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080ce6:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080ce8:	4b0d      	ldr	r3, [pc, #52]	; (8080d20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080cea:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080cec:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080cee:	4b0d      	ldr	r3, [pc, #52]	; (8080d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 8080cf0:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080cf2:	9804      	ldr	r0, [sp, #16]
 8080cf4:	f7ff fe54 	bl	80809a0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080cf8:	4668      	mov	r0, sp
 8080cfa:	f7ff fed1 	bl	8080aa0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8080cfe:	2200      	movs	r2, #0
 8080d00:	4629      	mov	r1, r5
 8080d02:	4809      	ldr	r0, [pc, #36]	; (8080d28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 8080d04:	f7ff fde8 	bl	80808d8 <application_thread_invoke>
 8080d08:	4630      	mov	r0, r6
 8080d0a:	f7ff fec9 	bl	8080aa0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8080d0e:	4630      	mov	r0, r6
 8080d10:	f7ff f9c5 	bl	808009e <_ZdlPv>
 8080d14:	4638      	mov	r0, r7
 8080d16:	f7ff fe43 	bl	80809a0 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8080d1a:	b006      	add	sp, #24
 8080d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080d20:	08080bb9 	.word	0x08080bb9
 8080d24:	08080e15 	.word	0x08080e15
 8080d28:	08080a17 	.word	0x08080a17

08080d2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8080d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080d30:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8080d32:	ad07      	add	r5, sp, #28
 8080d34:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8080d38:	4606      	mov	r6, r0
 8080d3a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8080d3c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8080d3e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8080d40:	460f      	mov	r7, r1
 8080d42:	4690      	mov	r8, r2
 8080d44:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8080d48:	f8c5 b004 	str.w	fp, [r5, #4]
 8080d4c:	f8c5 b008 	str.w	fp, [r5, #8]
 8080d50:	9307      	str	r3, [sp, #28]
 8080d52:	f7ff f9a2 	bl	808009a <_Znwj>
 8080d56:	4604      	mov	r4, r0
 8080d58:	b138      	cbz	r0, 8080d6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8080d5a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8080d5e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8080d62:	f8c0 b004 	str.w	fp, [r0, #4]
 8080d66:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8080d6a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080d6c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8080d6e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8080d70:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080d72:	f7ff f992 	bl	808009a <_Znwj>
 8080d76:	b128      	cbz	r0, 8080d84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8080d78:	2301      	movs	r3, #1
 8080d7a:	6043      	str	r3, [r0, #4]
 8080d7c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8080d7e:	4b23      	ldr	r3, [pc, #140]	; (8080e0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 8080d80:	60c4      	str	r4, [r0, #12]
 8080d82:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8080d84:	4b22      	ldr	r3, [pc, #136]	; (8080e10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080d86:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8080d88:	2008      	movs	r0, #8
 8080d8a:	9308      	str	r3, [sp, #32]
 8080d8c:	f7ff f985 	bl	808009a <_Znwj>
 8080d90:	4604      	mov	r4, r0
 8080d92:	b128      	cbz	r0, 8080da0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080d94:	9b03      	ldr	r3, [sp, #12]
 8080d96:	a904      	add	r1, sp, #16
 8080d98:	f840 3b04 	str.w	r3, [r0], #4
 8080d9c:	f7ff fecf 	bl	8080b3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8080da0:	9500      	str	r5, [sp, #0]
 8080da2:	fa5f f38a 	uxtb.w	r3, sl
 8080da6:	464a      	mov	r2, r9
 8080da8:	4641      	mov	r1, r8
 8080daa:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8080dac:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8080dae:	f7ff fdcf 	bl	8080950 <spark_send_event>
 8080db2:	b9b8      	cbnz	r0, 8080de4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8080db4:	9b03      	ldr	r3, [sp, #12]
 8080db6:	785b      	ldrb	r3, [r3, #1]
 8080db8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8080dbc:	b993      	cbnz	r3, 8080de4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8080dbe:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8080dc2:	a905      	add	r1, sp, #20
 8080dc4:	a803      	add	r0, sp, #12
 8080dc6:	9205      	str	r2, [sp, #20]
 8080dc8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8080dcc:	f7ff ff1a 	bl	8080c04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080dd0:	9805      	ldr	r0, [sp, #20]
 8080dd2:	f7ff fde5 	bl	80809a0 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8080dd6:	a805      	add	r0, sp, #20
 8080dd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8080dda:	f7ff feb7 	bl	8080b4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080dde:	a806      	add	r0, sp, #24
 8080de0:	f7ff fe86 	bl	8080af0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080de4:	9b03      	ldr	r3, [sp, #12]
 8080de6:	a904      	add	r1, sp, #16
 8080de8:	a806      	add	r0, sp, #24
 8080dea:	9305      	str	r3, [sp, #20]
 8080dec:	f7ff fea7 	bl	8080b3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8080df0:	a905      	add	r1, sp, #20
 8080df2:	4630      	mov	r0, r6
 8080df4:	f7ff fe92 	bl	8080b1c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080df8:	a806      	add	r0, sp, #24
 8080dfa:	f7ff fe79 	bl	8080af0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080dfe:	a804      	add	r0, sp, #16
 8080e00:	f7ff fe76 	bl	8080af0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8080e04:	4630      	mov	r0, r6
 8080e06:	b00b      	add	sp, #44	; 0x2c
 8080e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080e0c:	0808584c 	.word	0x0808584c
 8080e10:	08080f7d 	.word	0x08080f7d

08080e14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080e14:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8080e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080e18:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8080e1a:	d006      	beq.n	8080e2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8080e1c:	2a03      	cmp	r2, #3
 8080e1e:	d017      	beq.n	8080e50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8080e20:	2a01      	cmp	r2, #1
 8080e22:	d120      	bne.n	8080e66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080e24:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080e26:	6003      	str	r3, [r0, #0]
	      break;
 8080e28:	e01d      	b.n	8080e66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080e2a:	2018      	movs	r0, #24
 8080e2c:	680e      	ldr	r6, [r1, #0]
 8080e2e:	f7ff f934 	bl	808009a <_Znwj>
 8080e32:	4605      	mov	r5, r0
 8080e34:	b150      	cbz	r0, 8080e4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8080e36:	4631      	mov	r1, r6
 8080e38:	f7ff fed5 	bl	8080be6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8080e3c:	6930      	ldr	r0, [r6, #16]
 8080e3e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080e42:	b108      	cbz	r0, 8080e48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8080e44:	f002 fa2e 	bl	80832a4 <strdup>
 8080e48:	6128      	str	r0, [r5, #16]
 8080e4a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080e4c:	6025      	str	r5, [r4, #0]
 8080e4e:	e00a      	b.n	8080e66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080e50:	6804      	ldr	r4, [r0, #0]
 8080e52:	b144      	cbz	r4, 8080e66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080e54:	6920      	ldr	r0, [r4, #16]
 8080e56:	f7ff fda3 	bl	80809a0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080e5a:	4620      	mov	r0, r4
 8080e5c:	f7ff fe20 	bl	8080aa0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080e60:	4620      	mov	r0, r4
 8080e62:	f7ff f91c 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080e66:	2000      	movs	r0, #0
 8080e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080e6a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080e6a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080e6c:	2300      	movs	r3, #0
 8080e6e:	6083      	str	r3, [r0, #8]
 8080e70:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080e72:	4604      	mov	r4, r0
 8080e74:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080e76:	b12b      	cbz	r3, 8080e84 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080e78:	2202      	movs	r2, #2
 8080e7a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080e7c:	68eb      	ldr	r3, [r5, #12]
 8080e7e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080e80:	68ab      	ldr	r3, [r5, #8]
 8080e82:	60a3      	str	r3, [r4, #8]
	}
    }
 8080e84:	4620      	mov	r0, r4
 8080e86:	bd38      	pop	{r3, r4, r5, pc}

08080e88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080e88:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8080e8a:	b570      	push	{r4, r5, r6, lr}
 8080e8c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8080e8e:	d006      	beq.n	8080e9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8080e90:	2a03      	cmp	r2, #3
 8080e92:	d011      	beq.n	8080eb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8080e94:	2a01      	cmp	r2, #1
 8080e96:	d117      	bne.n	8080ec8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080e98:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080e9a:	6003      	str	r3, [r0, #0]
	      break;
 8080e9c:	e014      	b.n	8080ec8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080e9e:	2014      	movs	r0, #20
 8080ea0:	680e      	ldr	r6, [r1, #0]
 8080ea2:	f7ff f8fa 	bl	808009a <_Znwj>
 8080ea6:	4605      	mov	r5, r0
 8080ea8:	b120      	cbz	r0, 8080eb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8080eaa:	4631      	mov	r1, r6
 8080eac:	f7ff ffdd 	bl	8080e6a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8080eb0:	7c33      	ldrb	r3, [r6, #16]
 8080eb2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080eb4:	6025      	str	r5, [r4, #0]
 8080eb6:	e007      	b.n	8080ec8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080eb8:	6804      	ldr	r4, [r0, #0]
 8080eba:	b12c      	cbz	r4, 8080ec8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080ebc:	4620      	mov	r0, r4
 8080ebe:	f7ff fdef 	bl	8080aa0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080ec2:	4620      	mov	r0, r4
 8080ec4:	f7ff f8eb 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080ec8:	2000      	movs	r0, #0
 8080eca:	bd70      	pop	{r4, r5, r6, pc}

08080ecc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8080ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080ece:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8080ed0:	f3bf 8f5f 	dmb	sy
 8080ed4:	b087      	sub	sp, #28
 8080ed6:	2300      	movs	r3, #0
 8080ed8:	e850 6f00 	ldrex	r6, [r0]
 8080edc:	e840 3200 	strex	r2, r3, [r0]
 8080ee0:	2a00      	cmp	r2, #0
 8080ee2:	d1f9      	bne.n	8080ed8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8080ee4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8080ee8:	2e00      	cmp	r6, #0
 8080eea:	d03e      	beq.n	8080f6a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8080eec:	4618      	mov	r0, r3
 8080eee:	f7ff fceb 	bl	80808c8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8080ef2:	4607      	mov	r7, r0
 8080ef4:	b120      	cbz	r0, 8080f00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080ef6:	4621      	mov	r1, r4
 8080ef8:	4630      	mov	r0, r6
 8080efa:	f7ff fe64 	bl	8080bc6 <_ZNKSt8functionIFvRKbEEclES1_>
 8080efe:	e02e      	b.n	8080f5e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080f00:	4631      	mov	r1, r6
 8080f02:	a801      	add	r0, sp, #4
 8080f04:	f7ff ffb1 	bl	8080e6a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8080f08:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080f0a:	2010      	movs	r0, #16
 8080f0c:	f88d 3014 	strb.w	r3, [sp, #20]
 8080f10:	f7ff f8c3 	bl	808009a <_Znwj>
 8080f14:	4605      	mov	r5, r0
 8080f16:	b1d0      	cbz	r0, 8080f4e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080f18:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080f1a:	2014      	movs	r0, #20
 8080f1c:	f7ff f8bd 	bl	808009a <_Znwj>
 8080f20:	4604      	mov	r4, r0
 8080f22:	b178      	cbz	r0, 8080f44 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080f24:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8080f26:	4601      	mov	r1, r0
 8080f28:	a801      	add	r0, sp, #4
 8080f2a:	f7ff fe2c 	bl	8080b86 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080f2e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8080f30:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080f32:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080f34:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8080f36:	9203      	str	r2, [sp, #12]
 8080f38:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8080f3a:	60e3      	str	r3, [r4, #12]
 8080f3c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080f40:	9204      	str	r2, [sp, #16]
 8080f42:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080f44:	4b0a      	ldr	r3, [pc, #40]	; (8080f70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080f46:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080f48:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080f4a:	4b0a      	ldr	r3, [pc, #40]	; (8080f74 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8080f4c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080f4e:	a801      	add	r0, sp, #4
 8080f50:	f7ff fda6 	bl	8080aa0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8080f54:	2200      	movs	r2, #0
 8080f56:	4629      	mov	r1, r5
 8080f58:	4807      	ldr	r0, [pc, #28]	; (8080f78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8080f5a:	f7ff fcbd 	bl	80808d8 <application_thread_invoke>
 8080f5e:	4630      	mov	r0, r6
 8080f60:	f7ff fd9e 	bl	8080aa0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8080f64:	4630      	mov	r0, r6
 8080f66:	f7ff f89a 	bl	808009e <_ZdlPv>
        }
    }
 8080f6a:	b007      	add	sp, #28
 8080f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080f6e:	bf00      	nop
 8080f70:	08080bd9 	.word	0x08080bd9
 8080f74:	08080e89 	.word	0x08080e89
 8080f78:	08080a17 	.word	0x08080a17

08080f7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8080f7c:	b530      	push	{r4, r5, lr}
 8080f7e:	4604      	mov	r4, r0
 8080f80:	b085      	sub	sp, #20
 8080f82:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8080f84:	4668      	mov	r0, sp
 8080f86:	4611      	mov	r1, r2
 8080f88:	f7ff fde0 	bl	8080b4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8080f8c:	b17c      	cbz	r4, 8080fae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8080f8e:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080f90:	4628      	mov	r0, r5
 8080f92:	b10d      	cbz	r5, 8080f98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8080f94:	f002 f986 	bl	80832a4 <strdup>
 8080f98:	9002      	str	r0, [sp, #8]
 8080f9a:	a902      	add	r1, sp, #8
 8080f9c:	4668      	mov	r0, sp
 8080f9e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8080fa2:	f7ff fe2f 	bl	8080c04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080fa6:	9802      	ldr	r0, [sp, #8]
 8080fa8:	f7ff fcfa 	bl	80809a0 <free>
 8080fac:	e01d      	b.n	8080fea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8080fae:	f04f 0201 	mov.w	r2, #1
 8080fb2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8080fb4:	f88d 4008 	strb.w	r4, [sp, #8]
 8080fb8:	e8d0 3f4f 	ldrexb	r3, [r0]
 8080fbc:	42a3      	cmp	r3, r4
 8080fbe:	d103      	bne.n	8080fc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8080fc0:	e8c0 2f41 	strexb	r1, r2, [r0]
 8080fc4:	2900      	cmp	r1, #0
 8080fc6:	d1f7      	bne.n	8080fb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8080fc8:	d002      	beq.n	8080fd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8080fca:	f88d 3008 	strb.w	r3, [sp, #8]
 8080fce:	e00c      	b.n	8080fea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8080fd0:	f110 010c 	adds.w	r1, r0, #12
 8080fd4:	f04f 0301 	mov.w	r3, #1
 8080fd8:	bf18      	it	ne
 8080fda:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8080fdc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8080fe0:	3004      	adds	r0, #4
 8080fe2:	f800 3c03 	strb.w	r3, [r0, #-3]
 8080fe6:	f7ff ff71 	bl	8080ecc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8080fea:	a801      	add	r0, sp, #4
 8080fec:	f7ff fd80 	bl	8080af0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8080ff0:	b005      	add	sp, #20
 8080ff2:	bd30      	pop	{r4, r5, pc}

08080ff4 <_ZN6detail9_getVCellEhh>:
    return i2c_.isEnabled();
}

namespace detail {
	// Converts VCELL_REGISTER reading to Battery Voltage
	float _getVCell(byte MSB, byte LSB) {
 8080ff4:	b508      	push	{r3, lr}
		// VCELL = 12-bit value, 1.25mV (1V/800) per bit
		float value = (float)((MSB << 4) | (LSB >> 4));
		return value / 800.0;
 8080ff6:	0909      	lsrs	r1, r1, #4
 8080ff8:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 8080ffc:	f001 fe3c 	bl	8082c78 <__aeabi_i2f>
 8081000:	4901      	ldr	r1, [pc, #4]	; (8081008 <_ZN6detail9_getVCellEhh+0x14>)
 8081002:	f001 ff41 	bl	8082e88 <__aeabi_fdiv>
	}
 8081006:	bd08      	pop	{r3, pc}
 8081008:	44480000 	.word	0x44480000

0808100c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808100c:	6800      	ldr	r0, [r0, #0]
 808100e:	f000 b8da 	b.w	80811c6 <_ZN7TwoWire4lockEv>

08081012 <_ZN9FuelGaugeC1ER7TwoWireb>:
    FuelGauge(Wire, _lock)
#endif /* (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION) */
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8081012:	b510      	push	{r4, lr}
 8081014:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8081016:	6001      	str	r1, [r0, #0]
 8081018:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808101a:	b10a      	cbz	r2, 8081020 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808101c:	f7ff fff6 	bl	808100c <_ZN9FuelGauge4lockEv>
    }
}
 8081020:	4620      	mov	r0, r4
 8081022:	bd10      	pop	{r4, pc}

08081024 <_ZN9FuelGaugeC1Eb>:

#include "spark_wiring_fuel.h"
#include <mutex>
#include "spark_wiring_power.h"

FuelGauge::FuelGauge(bool _lock) :
 8081024:	b538      	push	{r3, r4, r5, lr}
 8081026:	4604      	mov	r4, r0
 8081028:	460d      	mov	r5, r1
#if (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION)
    FuelGauge(Wire3, _lock)
 808102a:	f000 feb5 	bl	8081d98 <_Z20__fetch_global_Wire3v>
 808102e:	462a      	mov	r2, r5
 8081030:	4601      	mov	r1, r0
 8081032:	4620      	mov	r0, r4
 8081034:	f7ff ffed 	bl	8081012 <_ZN9FuelGaugeC1ER7TwoWireb>
#else
    FuelGauge(Wire, _lock)
#endif /* (PLATFORM_ID == PLATFORM_ELECTRON_PRODUCTION) */
{
}
 8081038:	4620      	mov	r0, r4
 808103a:	bd38      	pop	{r3, r4, r5, pc}

0808103c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 808103c:	6800      	ldr	r0, [r0, #0]
 808103e:	f000 b8cb 	b.w	80811d8 <_ZN7TwoWire6unlockEv>

08081042 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8081042:	b510      	push	{r4, lr}
{
    if (lock_) {
 8081044:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8081046:	4604      	mov	r4, r0
{
    if (lock_) {
 8081048:	b10b      	cbz	r3, 808104e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808104a:	f7ff fff7 	bl	808103c <_ZN9FuelGauge6unlockEv>
    }
}
 808104e:	4620      	mov	r0, r4
 8081050:	bd10      	pop	{r4, pc}

08081052 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8081052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081054:	4604      	mov	r4, r0
 8081056:	460f      	mov	r7, r1
 8081058:	4616      	mov	r6, r2
 808105a:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 808105c:	f7ff ffd6 	bl	808100c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8081060:	6820      	ldr	r0, [r4, #0]
 8081062:	2136      	movs	r1, #54	; 0x36
 8081064:	f000 f8a8 	bl	80811b8 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8081068:	6820      	ldr	r0, [r4, #0]
 808106a:	4639      	mov	r1, r7
 808106c:	6803      	ldr	r3, [r0, #0]
 808106e:	689b      	ldr	r3, [r3, #8]
 8081070:	4798      	blx	r3
    i2c_.endTransmission(true);
 8081072:	2101      	movs	r1, #1
 8081074:	6820      	ldr	r0, [r4, #0]
 8081076:	f000 f8a2 	bl	80811be <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808107a:	2202      	movs	r2, #2
 808107c:	2136      	movs	r1, #54	; 0x36
 808107e:	2301      	movs	r3, #1
 8081080:	6820      	ldr	r0, [r4, #0]
 8081082:	f000 f890 	bl	80811a6 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 8081086:	6820      	ldr	r0, [r4, #0]
 8081088:	6803      	ldr	r3, [r0, #0]
 808108a:	695b      	ldr	r3, [r3, #20]
 808108c:	4798      	blx	r3
 808108e:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8081090:	6820      	ldr	r0, [r4, #0]
 8081092:	6803      	ldr	r3, [r0, #0]
 8081094:	695b      	ldr	r3, [r3, #20]
 8081096:	4798      	blx	r3
 8081098:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808109a:	4620      	mov	r0, r4
}
 808109c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80810a0:	f7ff bfcc 	b.w	808103c <_ZN9FuelGauge6unlockEv>

080810a4 <_ZN9FuelGauge8getVCellEv>:
		return MSB + decimal;
	}
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {
 80810a4:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
 80810a6:	2200      	movs	r2, #0
	byte LSB = 0;
 80810a8:	ab02      	add	r3, sp, #8
} // namespace detail

// Read and return the cell voltage
float FuelGauge::getVCell() {

	byte MSB = 0;
 80810aa:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;
 80810ae:	f803 2d01 	strb.w	r2, [r3, #-1]!

	readRegister(VCELL_REGISTER, MSB, LSB);
 80810b2:	2102      	movs	r1, #2
 80810b4:	f10d 0206 	add.w	r2, sp, #6
 80810b8:	f7ff ffcb 	bl	8081052 <_ZN9FuelGauge12readRegisterEhRhS0_>
	return detail::_getVCell(MSB, LSB);
 80810bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80810c0:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 80810c4:	b003      	add	sp, #12
 80810c6:	f85d eb04 	ldr.w	lr, [sp], #4

	byte MSB = 0;
	byte LSB = 0;

	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
 80810ca:	f7ff bf93 	b.w	8080ff4 <_ZN6detail9_getVCellEhh>
	...

080810d0 <_ZN9FuelGauge6getSoCEv>:
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 80810d0:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 80810d2:	2200      	movs	r2, #0
	byte LSB = 0;
 80810d4:	ab02      	add	r3, sp, #8
 80810d6:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 80810da:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 80810de:	2104      	movs	r1, #4
 80810e0:	f10d 0206 	add.w	r2, sp, #6
 80810e4:	f7ff ffb5 	bl	8081052 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 80810e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80810ec:	f001 f95c 	bl	80823a8 <__aeabi_i2d>
 80810f0:	2200      	movs	r2, #0
 80810f2:	4b08      	ldr	r3, [pc, #32]	; (8081114 <_ZN9FuelGauge6getSoCEv+0x44>)
 80810f4:	f001 f9be 	bl	8082474 <__aeabi_dmul>
 80810f8:	f001 fcb4 	bl	8082a64 <__aeabi_d2f>
 80810fc:	4604      	mov	r4, r0
 80810fe:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8081102:	f001 fdb9 	bl	8082c78 <__aeabi_i2f>
 8081106:	4601      	mov	r1, r0
 8081108:	4620      	mov	r0, r4
 808110a:	f001 fd01 	bl	8082b10 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 808110e:	b002      	add	sp, #8
 8081110:	bd10      	pop	{r4, pc}
 8081112:	bf00      	nop
 8081114:	3f700000 	.word	0x3f700000

08081118 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8081118:	4770      	bx	lr

0808111a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808111a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808111c:	4606      	mov	r6, r0
 808111e:	4615      	mov	r5, r2
 8081120:	460c      	mov	r4, r1
 8081122:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081124:	42bc      	cmp	r4, r7
 8081126:	d006      	beq.n	8081136 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8081128:	6833      	ldr	r3, [r6, #0]
 808112a:	f814 1b01 	ldrb.w	r1, [r4], #1
 808112e:	689b      	ldr	r3, [r3, #8]
 8081130:	4630      	mov	r0, r6
 8081132:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081134:	e7f6      	b.n	8081124 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8081136:	4628      	mov	r0, r5
 8081138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808113a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808113a:	2200      	movs	r2, #0
 808113c:	7c00      	ldrb	r0, [r0, #16]
 808113e:	f7ff badb 	b.w	80806f8 <HAL_I2C_Write_Data>

08081142 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8081142:	2100      	movs	r1, #0
 8081144:	7c00      	ldrb	r0, [r0, #16]
 8081146:	f7ff badf 	b.w	8080708 <HAL_I2C_Available_Data>

0808114a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808114a:	2100      	movs	r1, #0
 808114c:	7c00      	ldrb	r0, [r0, #16]
 808114e:	f7ff bae3 	b.w	8080718 <HAL_I2C_Read_Data>

08081152 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8081152:	2100      	movs	r1, #0
 8081154:	7c00      	ldrb	r0, [r0, #16]
 8081156:	f7ff bae7 	b.w	8080728 <HAL_I2C_Peek_Data>

0808115a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808115a:	2100      	movs	r1, #0
 808115c:	7c00      	ldrb	r0, [r0, #16]
 808115e:	f7ff baeb 	b.w	8080738 <HAL_I2C_Flush_Data>

08081162 <_ZN7TwoWireD0Ev>:
 8081162:	b510      	push	{r4, lr}
 8081164:	4604      	mov	r4, r0
 8081166:	f7fe ff9a 	bl	808009e <_ZdlPv>
 808116a:	4620      	mov	r0, r4
 808116c:	bd10      	pop	{r4, pc}
	...

08081170 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081170:	b510      	push	{r4, lr}
 8081172:	4604      	mov	r4, r0
 8081174:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8081176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808117a:	60a3      	str	r3, [r4, #8]
 808117c:	4b04      	ldr	r3, [pc, #16]	; (8081190 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808117e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8081180:	7420      	strb	r0, [r4, #16]
 8081182:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081184:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8081186:	f7ff fadf 	bl	8080748 <HAL_I2C_Init>

}
 808118a:	4620      	mov	r0, r4
 808118c:	bd10      	pop	{r4, pc}
 808118e:	bf00      	nop
 8081190:	08085868 	.word	0x08085868

08081194 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8081194:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 8081196:	2400      	movs	r4, #0
 8081198:	7c00      	ldrb	r0, [r0, #16]
 808119a:	9400      	str	r4, [sp, #0]
 808119c:	f7ff fa94 	bl	80806c8 <HAL_I2C_Request_Data>
  return result;
}
 80811a0:	b2c0      	uxtb	r0, r0
 80811a2:	b002      	add	sp, #8
 80811a4:	bd10      	pop	{r4, pc}

080811a6 <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 80811a6:	b2db      	uxtb	r3, r3
 80811a8:	b2d2      	uxtb	r2, r2
 80811aa:	b2c9      	uxtb	r1, r1
 80811ac:	f7ff bff2 	b.w	8081194 <_ZN7TwoWire11requestFromEhhh>

080811b0 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80811b0:	2200      	movs	r2, #0
 80811b2:	7c00      	ldrb	r0, [r0, #16]
 80811b4:	f7ff ba90 	b.w	80806d8 <HAL_I2C_Begin_Transmission>

080811b8 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80811b8:	b2c9      	uxtb	r1, r1
 80811ba:	f7ff bff9 	b.w	80811b0 <_ZN7TwoWire17beginTransmissionEh>

080811be <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80811be:	2200      	movs	r2, #0
 80811c0:	7c00      	ldrb	r0, [r0, #16]
 80811c2:	f7ff ba91 	b.w	80806e8 <HAL_I2C_End_Transmission>

080811c6 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80811c6:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 80811c8:	2100      	movs	r1, #0
 80811ca:	7c00      	ldrb	r0, [r0, #16]
 80811cc:	f7ff fac4 	bl	8080758 <HAL_I2C_Acquire>
}
 80811d0:	fab0 f080 	clz	r0, r0
 80811d4:	0940      	lsrs	r0, r0, #5
 80811d6:	bd08      	pop	{r3, pc}

080811d8 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80811d8:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 80811da:	2100      	movs	r1, #0
 80811dc:	7c00      	ldrb	r0, [r0, #16]
 80811de:	f7ff fac3 	bl	8080768 <HAL_I2C_Release>
}
 80811e2:	fab0 f080 	clz	r0, r0
 80811e6:	0940      	lsrs	r0, r0, #5
 80811e8:	bd08      	pop	{r3, pc}

080811ea <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80811ea:	4770      	bx	lr

080811ec <_ZN9IPAddressD0Ev>:
 80811ec:	b510      	push	{r4, lr}
 80811ee:	4604      	mov	r4, r0
 80811f0:	f7fe ff55 	bl	808009e <_ZdlPv>
 80811f4:	4620      	mov	r0, r4
 80811f6:	bd10      	pop	{r4, pc}

080811f8 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80811f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80811fa:	460f      	mov	r7, r1
 80811fc:	f100 0608 	add.w	r6, r0, #8
 8081200:	1d05      	adds	r5, r0, #4
 8081202:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081204:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8081208:	220a      	movs	r2, #10
 808120a:	4638      	mov	r0, r7
 808120c:	f000 f93a 	bl	8081484 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081210:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081212:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081214:	d007      	beq.n	8081226 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8081216:	2c00      	cmp	r4, #0
 8081218:	d0f4      	beq.n	8081204 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808121a:	212e      	movs	r1, #46	; 0x2e
 808121c:	4638      	mov	r0, r7
 808121e:	f000 f8ee 	bl	80813fe <_ZN5Print5printEc>
 8081222:	4404      	add	r4, r0
 8081224:	e7ee      	b.n	8081204 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8081226:	4620      	mov	r0, r4
 8081228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808122a <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 808122a:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808122c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8081230:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8081234:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8081238:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808123c:	6041      	str	r1, [r0, #4]
 808123e:	bd10      	pop	{r4, pc}

08081240 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8081240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081242:	4d04      	ldr	r5, [pc, #16]	; (8081254 <_ZN9IPAddressC1Ehhhh+0x14>)
 8081244:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8081246:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808124a:	9500      	str	r5, [sp, #0]
 808124c:	f7ff ffed 	bl	808122a <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8081250:	b003      	add	sp, #12
 8081252:	bd30      	pop	{r4, r5, pc}
 8081254:	08085890 	.word	0x08085890

08081258 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8081258:	4a01      	ldr	r2, [pc, #4]	; (8081260 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808125a:	4b02      	ldr	r3, [pc, #8]	; (8081264 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808125c:	601a      	str	r2, [r3, #0]
 808125e:	4770      	bx	lr
 8081260:	0808594f 	.word	0x0808594f
 8081264:	20000600 	.word	0x20000600

08081268 <_ZN4PMIC4lockEv>:
    Wire3.write(DATA);
    Wire3.endTransmission(true);
#endif
}

bool PMIC::lock() {
 8081268:	b508      	push	{r3, lr}
#if Wiring_Wire3
    return Wire3.lock();
 808126a:	f000 fd95 	bl	8081d98 <_Z20__fetch_global_Wire3v>
#endif
    return false;
}
 808126e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
}

bool PMIC::lock() {
#if Wiring_Wire3
    return Wire3.lock();
 8081272:	f7ff bfa8 	b.w	80811c6 <_ZN7TwoWire4lockEv>

08081276 <_ZN4PMICC1Eb>:


#include "spark_wiring_power.h"
#include <mutex>

PMIC::PMIC(bool _lock) :
 8081276:	b510      	push	{r4, lr}
 8081278:	4604      	mov	r4, r0
    lock_(_lock)
 808127a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 808127c:	b109      	cbz	r1, 8081282 <_ZN4PMICC1Eb+0xc>
        lock();
 808127e:	f7ff fff3 	bl	8081268 <_ZN4PMIC4lockEv>
    }
}
 8081282:	4620      	mov	r0, r4
 8081284:	bd10      	pop	{r4, pc}

08081286 <_ZN4PMIC6unlockEv>:
    return Wire3.lock();
#endif
    return false;
}

bool PMIC::unlock() {
 8081286:	b508      	push	{r3, lr}
#if Wiring_Wire3
    return Wire3.unlock();
 8081288:	f000 fd86 	bl	8081d98 <_Z20__fetch_global_Wire3v>
#endif
    return false;
}
 808128c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return false;
}

bool PMIC::unlock() {
#if Wiring_Wire3
    return Wire3.unlock();
 8081290:	f7ff bfa2 	b.w	80811d8 <_ZN7TwoWire6unlockEv>

08081294 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8081294:	b510      	push	{r4, lr}
{
    if (lock_) {
 8081296:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8081298:	4604      	mov	r4, r0
{
    if (lock_) {
 808129a:	b10b      	cbz	r3, 80812a0 <_ZN4PMICD1Ev+0xc>
        unlock();
 808129c:	f7ff fff3 	bl	8081286 <_ZN4PMIC6unlockEv>
    }
}
 80812a0:	4620      	mov	r0, r4
 80812a2:	bd10      	pop	{r4, pc}

080812a4 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80812a4:	b510      	push	{r4, lr}
 80812a6:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80812a8:	6800      	ldr	r0, [r0, #0]
 80812aa:	f7ff ffec 	bl	8081286 <_ZN4PMIC6unlockEv>
 80812ae:	4620      	mov	r0, r4
 80812b0:	bd10      	pop	{r4, pc}

080812b2 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 80812b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80812b4:	ac02      	add	r4, sp, #8
 80812b6:	460d      	mov	r5, r1
 80812b8:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80812bc:	f7ff ffd4 	bl	8081268 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
#if Wiring_Wire3
    Wire3.beginTransmission(PMIC_ADDRESS);
 80812c0:	f000 fd6a 	bl	8081d98 <_Z20__fetch_global_Wire3v>
 80812c4:	216b      	movs	r1, #107	; 0x6b
 80812c6:	f7ff ff77 	bl	80811b8 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(startAddress);
 80812ca:	f000 fd65 	bl	8081d98 <_Z20__fetch_global_Wire3v>
 80812ce:	6803      	ldr	r3, [r0, #0]
 80812d0:	4629      	mov	r1, r5
 80812d2:	689b      	ldr	r3, [r3, #8]
 80812d4:	4798      	blx	r3
    Wire3.endTransmission(true);
 80812d6:	f000 fd5f 	bl	8081d98 <_Z20__fetch_global_Wire3v>
 80812da:	2101      	movs	r1, #1
 80812dc:	f7ff ff6f 	bl	80811be <_ZN7TwoWire15endTransmissionEh>

    Wire3.requestFrom(PMIC_ADDRESS, 1, true);
 80812e0:	f000 fd5a 	bl	8081d98 <_Z20__fetch_global_Wire3v>
 80812e4:	2301      	movs	r3, #1
 80812e6:	461a      	mov	r2, r3
 80812e8:	216b      	movs	r1, #107	; 0x6b
 80812ea:	f7ff ff5c 	bl	80811a6 <_ZN7TwoWire11requestFromEiii>
    DATA = Wire3.read();
 80812ee:	f000 fd53 	bl	8081d98 <_Z20__fetch_global_Wire3v>
 80812f2:	6803      	ldr	r3, [r0, #0]
 80812f4:	695b      	ldr	r3, [r3, #20]
 80812f6:	4798      	blx	r3
 80812f8:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 80812fa:	4620      	mov	r0, r4
 80812fc:	f7ff ffd2 	bl	80812a4 <_ZNSt10lock_guardI4PMICED1Ev>

    Wire3.requestFrom(PMIC_ADDRESS, 1, true);
    DATA = Wire3.read();
#endif
    return DATA;
}
 8081300:	b2e8      	uxtb	r0, r5
 8081302:	b003      	add	sp, #12
 8081304:	bd30      	pop	{r4, r5, pc}

08081306 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 8081306:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081308:	ac02      	add	r4, sp, #8
 808130a:	4615      	mov	r5, r2
 808130c:	460e      	mov	r6, r1
 808130e:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8081312:	f7ff ffa9 	bl	8081268 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
#if Wiring_Wire3
    Wire3.beginTransmission(PMIC_ADDRESS);
 8081316:	f000 fd3f 	bl	8081d98 <_Z20__fetch_global_Wire3v>
 808131a:	216b      	movs	r1, #107	; 0x6b
 808131c:	f7ff ff4c 	bl	80811b8 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(address);
 8081320:	f000 fd3a 	bl	8081d98 <_Z20__fetch_global_Wire3v>
 8081324:	6803      	ldr	r3, [r0, #0]
 8081326:	4631      	mov	r1, r6
 8081328:	689b      	ldr	r3, [r3, #8]
 808132a:	4798      	blx	r3
    Wire3.write(DATA);
 808132c:	f000 fd34 	bl	8081d98 <_Z20__fetch_global_Wire3v>
 8081330:	6803      	ldr	r3, [r0, #0]
 8081332:	4629      	mov	r1, r5
 8081334:	689b      	ldr	r3, [r3, #8]
 8081336:	4798      	blx	r3
    Wire3.endTransmission(true);
 8081338:	f000 fd2e 	bl	8081d98 <_Z20__fetch_global_Wire3v>
 808133c:	2101      	movs	r1, #1
 808133e:	f7ff ff3e 	bl	80811be <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 8081342:	4620      	mov	r0, r4
 8081344:	f7ff ffae 	bl	80812a4 <_ZNSt10lock_guardI4PMICED1Ev>
    Wire3.beginTransmission(PMIC_ADDRESS);
    Wire3.write(address);
    Wire3.write(DATA);
    Wire3.endTransmission(true);
#endif
}
 8081348:	b002      	add	sp, #8
 808134a:	bd70      	pop	{r4, r5, r6, pc}

0808134c <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 808134c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808134e:	460c      	mov	r4, r1
 8081350:	4617      	mov	r7, r2
 8081352:	4605      	mov	r5, r0
 8081354:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081356:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081358:	f7ff ff86 	bl	8081268 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 808135c:	2c00      	cmp	r4, #0
 808135e:	bf0c      	ite	eq
 8081360:	2400      	moveq	r4, #0
 8081362:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8081364:	b117      	cbz	r7, 808136c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8081366:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 808136a:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 808136c:	b10e      	cbz	r6, 8081372 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 808136e:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8081372:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8081376:	b10b      	cbz	r3, 808137c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8081378:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 808137c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8081380:	b10b      	cbz	r3, 8081386 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8081382:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8081386:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 808138a:	b10b      	cbz	r3, 8081390 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 808138c:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8081390:	2102      	movs	r1, #2
 8081392:	4628      	mov	r0, r5
 8081394:	f7ff ff8d 	bl	80812b2 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8081398:	f000 0201 	and.w	r2, r0, #1
 808139c:	4322      	orrs	r2, r4
 808139e:	2102      	movs	r1, #2
 80813a0:	4628      	mov	r0, r5
 80813a2:	f7ff ffb0 	bl	8081306 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 80813a6:	a801      	add	r0, sp, #4
 80813a8:	f7ff ff7c 	bl	80812a4 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 80813ac:	2001      	movs	r0, #1
 80813ae:	b003      	add	sp, #12
 80813b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080813b2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80813b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80813b4:	4606      	mov	r6, r0
 80813b6:	460d      	mov	r5, r1
 80813b8:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80813ba:	2400      	movs	r4, #0
  while (size--) {
 80813bc:	42bd      	cmp	r5, r7
 80813be:	d00c      	beq.n	80813da <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80813c0:	6833      	ldr	r3, [r6, #0]
 80813c2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80813c6:	689b      	ldr	r3, [r3, #8]
 80813c8:	4630      	mov	r0, r6
 80813ca:	4798      	blx	r3
     if (chunk>=0)
 80813cc:	2800      	cmp	r0, #0
 80813ce:	db01      	blt.n	80813d4 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80813d0:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80813d2:	e7f3      	b.n	80813bc <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80813d4:	2c00      	cmp	r4, #0
 80813d6:	bf08      	it	eq
 80813d8:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80813da:	4620      	mov	r0, r4
 80813dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080813de <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80813de:	b570      	push	{r4, r5, r6, lr}
 80813e0:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80813e2:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80813e4:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80813e6:	b149      	cbz	r1, 80813fc <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80813e8:	f001 ff77 	bl	80832da <strlen>
 80813ec:	682b      	ldr	r3, [r5, #0]
 80813ee:	4602      	mov	r2, r0
 80813f0:	4621      	mov	r1, r4
 80813f2:	4628      	mov	r0, r5
    }
 80813f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80813f8:	68db      	ldr	r3, [r3, #12]
 80813fa:	4718      	bx	r3
    }
 80813fc:	bd70      	pop	{r4, r5, r6, pc}

080813fe <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80813fe:	6803      	ldr	r3, [r0, #0]
 8081400:	689b      	ldr	r3, [r3, #8]
 8081402:	4718      	bx	r3

08081404 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8081404:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8081406:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8081408:	4605      	mov	r5, r0
  size_t n = print('\r');
 808140a:	f7ff fff8 	bl	80813fe <_ZN5Print5printEc>
  n += print('\n');
 808140e:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8081410:	4604      	mov	r4, r0
  n += print('\n');
 8081412:	4628      	mov	r0, r5
 8081414:	f7ff fff3 	bl	80813fe <_ZN5Print5printEc>
  return n;
}
 8081418:	4420      	add	r0, r4
 808141a:	bd38      	pop	{r3, r4, r5, pc}

0808141c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808141c:	b538      	push	{r3, r4, r5, lr}
 808141e:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8081420:	f7ff ffdd 	bl	80813de <_ZN5Print5writeEPKc>
 8081424:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8081426:	4628      	mov	r0, r5
 8081428:	f7ff ffec 	bl	8081404 <_ZN5Print7printlnEv>
  return n;
}
 808142c:	4420      	add	r0, r4
 808142e:	bd38      	pop	{r3, r4, r5, pc}

08081430 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8081430:	2a01      	cmp	r2, #1
 8081432:	bf98      	it	ls
 8081434:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8081436:	b530      	push	{r4, r5, lr}
 8081438:	460b      	mov	r3, r1
 808143a:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808143c:	2100      	movs	r1, #0
 808143e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8081442:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8081446:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 808144a:	fb05 3312 	mls	r3, r5, r2, r3
 808144e:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8081450:	2b09      	cmp	r3, #9
 8081452:	bf94      	ite	ls
 8081454:	3330      	addls	r3, #48	; 0x30
 8081456:	3337      	addhi	r3, #55	; 0x37
 8081458:	b2db      	uxtb	r3, r3
 808145a:	4621      	mov	r1, r4
 808145c:	f804 3901 	strb.w	r3, [r4], #-1
 8081460:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8081462:	2d00      	cmp	r5, #0
 8081464:	d1ef      	bne.n	8081446 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8081466:	f7ff ffba 	bl	80813de <_ZN5Print5writeEPKc>
}
 808146a:	b00b      	add	sp, #44	; 0x2c
 808146c:	bd30      	pop	{r4, r5, pc}

0808146e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 808146e:	b410      	push	{r4}
  if (base == 0) return write(n);
 8081470:	b922      	cbnz	r2, 808147c <_ZN5Print5printEmi+0xe>
 8081472:	6803      	ldr	r3, [r0, #0]
 8081474:	b2c9      	uxtb	r1, r1
 8081476:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8081478:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 808147a:	4718      	bx	r3
  else return printNumber(n, base);
 808147c:	b2d2      	uxtb	r2, r2
}
 808147e:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8081480:	f7ff bfd6 	b.w	8081430 <_ZN5Print11printNumberEmh>

08081484 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8081484:	f7ff bff3 	b.w	808146e <_ZN5Print5printEmi>

08081488 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8081488:	b40c      	push	{r2, r3}
 808148a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808148e:	b087      	sub	sp, #28
 8081490:	af00      	add	r7, sp, #0
 8081492:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8081496:	f854 9b04 	ldr.w	r9, [r4], #4
 808149a:	4605      	mov	r5, r0
 808149c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 808149e:	4623      	mov	r3, r4
 80814a0:	464a      	mov	r2, r9
 80814a2:	2114      	movs	r1, #20
 80814a4:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80814a6:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80814a8:	f7ff fa9a 	bl	80809e0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80814ac:	2813      	cmp	r0, #19
 80814ae:	d805      	bhi.n	80814bc <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80814b0:	1d39      	adds	r1, r7, #4
 80814b2:	4628      	mov	r0, r5
 80814b4:	f7ff ff93 	bl	80813de <_ZN5Print5writeEPKc>
 80814b8:	4604      	mov	r4, r0
 80814ba:	e013      	b.n	80814e4 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80814bc:	f100 0308 	add.w	r3, r0, #8
 80814c0:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80814c4:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80814c6:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80814ca:	1c41      	adds	r1, r0, #1
 80814cc:	4623      	mov	r3, r4
 80814ce:	464a      	mov	r2, r9
 80814d0:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80814d2:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80814d4:	f7ff fa84 	bl	80809e0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80814d8:	4669      	mov	r1, sp
 80814da:	4628      	mov	r0, r5
 80814dc:	f7ff ff7f 	bl	80813de <_ZN5Print5writeEPKc>
 80814e0:	4604      	mov	r4, r0
 80814e2:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80814e4:	b11e      	cbz	r6, 80814ee <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80814e6:	4628      	mov	r0, r5
 80814e8:	f7ff ff8c 	bl	8081404 <_ZN5Print7printlnEv>
 80814ec:	4404      	add	r4, r0
    return n;
}
 80814ee:	4620      	mov	r0, r4
 80814f0:	371c      	adds	r7, #28
 80814f2:	46bd      	mov	sp, r7
 80814f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80814f8:	b002      	add	sp, #8
 80814fa:	4770      	bx	lr

080814fc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80814fc:	b510      	push	{r4, lr}
 80814fe:	4604      	mov	r4, r0
 8081500:	f7ff face 	bl	8080aa0 <_ZNSt14_Function_baseD1Ev>
 8081504:	4620      	mov	r0, r4
 8081506:	bd10      	pop	{r4, pc}

08081508 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081508:	4803      	ldr	r0, [pc, #12]	; (8081518 <_GLOBAL__sub_I_RGB+0x10>)
 808150a:	2300      	movs	r3, #0
 808150c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808150e:	4a03      	ldr	r2, [pc, #12]	; (808151c <_GLOBAL__sub_I_RGB+0x14>)
 8081510:	4903      	ldr	r1, [pc, #12]	; (8081520 <_GLOBAL__sub_I_RGB+0x18>)
 8081512:	f000 bca7 	b.w	8081e64 <__aeabi_atexit>
 8081516:	bf00      	nop
 8081518:	20000604 	.word	0x20000604
 808151c:	200004f4 	.word	0x200004f4
 8081520:	080814fd 	.word	0x080814fd

08081524 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8081524:	4770      	bx	lr

08081526 <_ZN8SPIClassD0Ev>:
 8081526:	b510      	push	{r4, lr}
 8081528:	4604      	mov	r4, r0
 808152a:	f7fe fdb8 	bl	808009e <_ZdlPv>
 808152e:	4620      	mov	r0, r4
 8081530:	bd10      	pop	{r4, pc}
	...

08081534 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8081534:	b570      	push	{r4, r5, r6, lr}
 8081536:	4604      	mov	r4, r0
 8081538:	460e      	mov	r6, r1
 808153a:	4b07      	ldr	r3, [pc, #28]	; (8081558 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 808153c:	2500      	movs	r5, #0
 808153e:	6003      	str	r3, [r0, #0]
 8081540:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8081544:	f7ff f888 	bl	8080658 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8081548:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808154a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 808154c:	f7ff f914 	bl	8080778 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8081550:	60a5      	str	r5, [r4, #8]
}
 8081552:	4620      	mov	r0, r4
 8081554:	bd70      	pop	{r4, r5, r6, pc}
 8081556:	bf00      	nop
 8081558:	08085980 	.word	0x08085980

0808155c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 808155c:	b510      	push	{r4, lr}
 808155e:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8081560:	f7ff f892 	bl	8080688 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 8081564:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 8081566:	6823      	ldr	r3, [r4, #0]
 8081568:	4620      	mov	r0, r4
 808156a:	695b      	ldr	r3, [r3, #20]
 808156c:	4798      	blx	r3
    if (c >= 0) return c;
 808156e:	2800      	cmp	r0, #0
 8081570:	da08      	bge.n	8081584 <_ZN6Stream9timedReadEv+0x28>
 8081572:	f7ff f889 	bl	8080688 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 8081576:	68e3      	ldr	r3, [r4, #12]
 8081578:	1ac0      	subs	r0, r0, r3
 808157a:	68a3      	ldr	r3, [r4, #8]
 808157c:	4298      	cmp	r0, r3
 808157e:	d3f2      	bcc.n	8081566 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 8081580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8081584:	bd10      	pop	{r4, pc}

08081586 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 8081586:	6081      	str	r1, [r0, #8]
 8081588:	4770      	bx	lr
	...

0808158c <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808158c:	b538      	push	{r3, r4, r5, lr}
 808158e:	460d      	mov	r5, r1
  String ret;
 8081590:	4907      	ldr	r1, [pc, #28]	; (80815b0 <_ZN6Stream10readStringEv+0x24>)
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 8081592:	4604      	mov	r4, r0
  String ret;
 8081594:	f000 f855 	bl	8081642 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 8081598:	4628      	mov	r0, r5
 808159a:	f7ff ffdf 	bl	808155c <_ZN6Stream9timedReadEv>
  while (c >= 0)
 808159e:	2800      	cmp	r0, #0
 80815a0:	db04      	blt.n	80815ac <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 80815a2:	b2c1      	uxtb	r1, r0
 80815a4:	4620      	mov	r0, r4
 80815a6:	f000 f8b5 	bl	8081714 <_ZN6String6concatEc>
 80815aa:	e7f5      	b.n	8081598 <_ZN6Stream10readStringEv+0xc>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 80815ac:	4620      	mov	r0, r4
 80815ae:	bd38      	pop	{r3, r4, r5, pc}
 80815b0:	0808560f 	.word	0x0808560f

080815b4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80815b4:	b510      	push	{r4, lr}
 80815b6:	4604      	mov	r4, r0
{
	free(buffer);
 80815b8:	6800      	ldr	r0, [r0, #0]
 80815ba:	f7ff f9f1 	bl	80809a0 <free>
}
 80815be:	4620      	mov	r0, r4
 80815c0:	bd10      	pop	{r4, pc}

080815c2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80815c2:	b510      	push	{r4, lr}
 80815c4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80815c6:	6800      	ldr	r0, [r0, #0]
 80815c8:	b108      	cbz	r0, 80815ce <_ZN6String10invalidateEv+0xc>
 80815ca:	f7ff f9e9 	bl	80809a0 <free>
	buffer = NULL;
 80815ce:	2300      	movs	r3, #0
 80815d0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80815d2:	60a3      	str	r3, [r4, #8]
 80815d4:	6063      	str	r3, [r4, #4]
 80815d6:	bd10      	pop	{r4, pc}

080815d8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80815d8:	b538      	push	{r3, r4, r5, lr}
 80815da:	4604      	mov	r4, r0
 80815dc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80815de:	6800      	ldr	r0, [r0, #0]
 80815e0:	3101      	adds	r1, #1
 80815e2:	f7ff f9e5 	bl	80809b0 <realloc>
	if (newbuffer) {
 80815e6:	b110      	cbz	r0, 80815ee <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80815e8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80815ec:	2001      	movs	r0, #1
	}
	return 0;
}
 80815ee:	bd38      	pop	{r3, r4, r5, pc}

080815f0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80815f0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80815f2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80815f4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80815f6:	b113      	cbz	r3, 80815fe <_ZN6String7reserveEj+0xe>
 80815f8:	6843      	ldr	r3, [r0, #4]
 80815fa:	428b      	cmp	r3, r1
 80815fc:	d207      	bcs.n	808160e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80815fe:	4620      	mov	r0, r4
 8081600:	f7ff ffea 	bl	80815d8 <_ZN6String12changeBufferEj>
 8081604:	b120      	cbz	r0, 8081610 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8081606:	68a3      	ldr	r3, [r4, #8]
 8081608:	b90b      	cbnz	r3, 808160e <_ZN6String7reserveEj+0x1e>
 808160a:	6822      	ldr	r2, [r4, #0]
 808160c:	7013      	strb	r3, [r2, #0]
 808160e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8081610:	bd10      	pop	{r4, pc}

08081612 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081612:	b570      	push	{r4, r5, r6, lr}
 8081614:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8081616:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081618:	4604      	mov	r4, r0
 808161a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808161c:	f7ff ffe8 	bl	80815f0 <_ZN6String7reserveEj>
 8081620:	b918      	cbnz	r0, 808162a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8081622:	4620      	mov	r0, r4
 8081624:	f7ff ffcd 	bl	80815c2 <_ZN6String10invalidateEv>
		return *this;
 8081628:	e009      	b.n	808163e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 808162a:	462a      	mov	r2, r5
 808162c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808162e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8081630:	6820      	ldr	r0, [r4, #0]
 8081632:	f001 fdcf 	bl	80831d4 <memcpy>
	buffer[len] = 0;
 8081636:	6822      	ldr	r2, [r4, #0]
 8081638:	68a3      	ldr	r3, [r4, #8]
 808163a:	2100      	movs	r1, #0
 808163c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808163e:	4620      	mov	r0, r4
 8081640:	bd70      	pop	{r4, r5, r6, pc}

08081642 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081642:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081644:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081646:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081648:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808164a:	6043      	str	r3, [r0, #4]
	len = 0;
 808164c:	6083      	str	r3, [r0, #8]
	flags = 0;
 808164e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8081650:	460d      	mov	r5, r1
 8081652:	b139      	cbz	r1, 8081664 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8081654:	4608      	mov	r0, r1
 8081656:	f001 fe40 	bl	80832da <strlen>
 808165a:	4629      	mov	r1, r5
 808165c:	4602      	mov	r2, r0
 808165e:	4620      	mov	r0, r4
 8081660:	f7ff ffd7 	bl	8081612 <_ZN6String4copyEPKcj>
}
 8081664:	4620      	mov	r0, r4
 8081666:	bd38      	pop	{r3, r4, r5, pc}

08081668 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8081668:	b538      	push	{r3, r4, r5, lr}
 808166a:	4605      	mov	r5, r0
	if (buffer) {
 808166c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808166e:	460c      	mov	r4, r1
	if (buffer) {
 8081670:	b160      	cbz	r0, 808168c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8081672:	686a      	ldr	r2, [r5, #4]
 8081674:	688b      	ldr	r3, [r1, #8]
 8081676:	429a      	cmp	r2, r3
 8081678:	d306      	bcc.n	8081688 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 808167a:	6809      	ldr	r1, [r1, #0]
 808167c:	f001 fe0a 	bl	8083294 <strcpy>
			len = rhs.len;
 8081680:	68a3      	ldr	r3, [r4, #8]
 8081682:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8081684:	2300      	movs	r3, #0
 8081686:	e00a      	b.n	808169e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 8081688:	f7ff f98a 	bl	80809a0 <free>
		}
	}
	buffer = rhs.buffer;
 808168c:	6823      	ldr	r3, [r4, #0]
 808168e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8081690:	6863      	ldr	r3, [r4, #4]
 8081692:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8081694:	68a3      	ldr	r3, [r4, #8]
 8081696:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8081698:	2300      	movs	r3, #0
 808169a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 808169c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 808169e:	60a3      	str	r3, [r4, #8]
 80816a0:	bd38      	pop	{r3, r4, r5, pc}

080816a2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80816a2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80816a4:	b510      	push	{r4, lr}
 80816a6:	460b      	mov	r3, r1
 80816a8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80816aa:	d007      	beq.n	80816bc <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80816ac:	6809      	ldr	r1, [r1, #0]
 80816ae:	b119      	cbz	r1, 80816b8 <_ZN6StringaSERKS_+0x16>
 80816b0:	689a      	ldr	r2, [r3, #8]
 80816b2:	f7ff ffae 	bl	8081612 <_ZN6String4copyEPKcj>
 80816b6:	e001      	b.n	80816bc <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80816b8:	f7ff ff83 	bl	80815c2 <_ZN6String10invalidateEv>

	return *this;
}
 80816bc:	4620      	mov	r0, r4
 80816be:	bd10      	pop	{r4, pc}

080816c0 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80816c0:	b510      	push	{r4, lr}
 80816c2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80816c4:	2300      	movs	r3, #0
 80816c6:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80816c8:	6043      	str	r3, [r0, #4]
	len = 0;
 80816ca:	6083      	str	r3, [r0, #8]
	flags = 0;
 80816cc:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80816ce:	f7ff ffe8 	bl	80816a2 <_ZN6StringaSERKS_>
}
 80816d2:	4620      	mov	r0, r4
 80816d4:	bd10      	pop	{r4, pc}

080816d6 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80816d6:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80816d8:	b510      	push	{r4, lr}
 80816da:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80816dc:	d001      	beq.n	80816e2 <_ZN6StringaSEOS_+0xc>
 80816de:	f7ff ffc3 	bl	8081668 <_ZN6String4moveERS_>
	return *this;
}
 80816e2:	4620      	mov	r0, r4
 80816e4:	bd10      	pop	{r4, pc}

080816e6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80816e6:	b570      	push	{r4, r5, r6, lr}
 80816e8:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80816ea:	460e      	mov	r6, r1
 80816ec:	b909      	cbnz	r1, 80816f2 <_ZN6String6concatEPKcj+0xc>
 80816ee:	2000      	movs	r0, #0
 80816f0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80816f2:	b16a      	cbz	r2, 8081710 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80816f4:	6883      	ldr	r3, [r0, #8]
 80816f6:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80816f8:	4629      	mov	r1, r5
 80816fa:	f7ff ff79 	bl	80815f0 <_ZN6String7reserveEj>
 80816fe:	2800      	cmp	r0, #0
 8081700:	d0f5      	beq.n	80816ee <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8081702:	6820      	ldr	r0, [r4, #0]
 8081704:	68a3      	ldr	r3, [r4, #8]
 8081706:	4631      	mov	r1, r6
 8081708:	4418      	add	r0, r3
 808170a:	f001 fdc3 	bl	8083294 <strcpy>
	len = newlen;
 808170e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8081710:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8081712:	bd70      	pop	{r4, r5, r6, pc}

08081714 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 8081714:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8081716:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 8081718:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 808171c:	2201      	movs	r2, #1
 808171e:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8081720:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 8081724:	f7ff ffdf 	bl	80816e6 <_ZN6String6concatEPKcj>
}
 8081728:	b003      	add	sp, #12
 808172a:	f85d fb04 	ldr.w	pc, [sp], #4

0808172e <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
 808172e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081732:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 8081734:	688a      	ldr	r2, [r1, #8]
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
 8081736:	460f      	mov	r7, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 8081738:	b1ca      	cbz	r2, 808176e <_ZNK6String11lastIndexOfERKS_j+0x40>
 808173a:	6883      	ldr	r3, [r0, #8]
 808173c:	b1bb      	cbz	r3, 808176e <_ZNK6String11lastIndexOfERKS_j+0x40>
 808173e:	429a      	cmp	r2, r3
 8081740:	d815      	bhi.n	808176e <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 8081742:	6806      	ldr	r6, [r0, #0]
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
 8081744:	42ab      	cmp	r3, r5
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 8081746:	4630      	mov	r0, r6
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
 8081748:	bf98      	it	ls
 808174a:	f103 35ff 	addls.w	r5, r3, #4294967295	; 0xffffffff
	int found = -1;
 808174e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 8081752:	eb06 0805 	add.w	r8, r6, r5
 8081756:	4540      	cmp	r0, r8
 8081758:	d80d      	bhi.n	8081776 <_ZNK6String11lastIndexOfERKS_j+0x48>
		p = strstr(p, s2.buffer);
 808175a:	6839      	ldr	r1, [r7, #0]
 808175c:	f001 fdda 	bl	8083314 <strstr>
		if (!p) break;
 8081760:	b148      	cbz	r0, 8081776 <_ZNK6String11lastIndexOfERKS_j+0x48>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
 8081762:	1b83      	subs	r3, r0, r6
 8081764:	429d      	cmp	r5, r3
 8081766:	bf28      	it	cs
 8081768:	461c      	movcs	r4, r3
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 808176a:	3001      	adds	r0, #1
 808176c:	e7f3      	b.n	8081756 <_ZNK6String11lastIndexOfERKS_j+0x28>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 808176e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8081772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081776:	4620      	mov	r0, r4
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
 8081778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808177c <_ZN6String7replaceERKS_S1_>:
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
 808177c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (len == 0 || find.len == 0) return *this;
 8081780:	f8d0 a008 	ldr.w	sl, [r0, #8]
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
 8081784:	4605      	mov	r5, r0
 8081786:	4688      	mov	r8, r1
 8081788:	4616      	mov	r6, r2
	if (len == 0 || find.len == 0) return *this;
 808178a:	f1ba 0f00 	cmp.w	sl, #0
 808178e:	d078      	beq.n	8081882 <_ZN6String7replaceERKS_S1_+0x106>
 8081790:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8081794:	f1bb 0f00 	cmp.w	fp, #0
 8081798:	d073      	beq.n	8081882 <_ZN6String7replaceERKS_S1_+0x106>
	int diff = replace.len - find.len;
 808179a:	6897      	ldr	r7, [r2, #8]
	char *readFrom = buffer;
 808179c:	6804      	ldr	r4, [r0, #0]
}

String& String::replace(const String& find, const String& replace)
{
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
 808179e:	ebcb 0707 	rsb	r7, fp, r7
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
 80817a2:	2f00      	cmp	r7, #0
 80817a4:	d10e      	bne.n	80817c4 <_ZN6String7replaceERKS_S1_+0x48>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80817a6:	4620      	mov	r0, r4
 80817a8:	f8d8 1000 	ldr.w	r1, [r8]
 80817ac:	f001 fdb2 	bl	8083314 <strstr>
 80817b0:	4604      	mov	r4, r0
 80817b2:	2800      	cmp	r0, #0
 80817b4:	d065      	beq.n	8081882 <_ZN6String7replaceERKS_S1_+0x106>
			memcpy(foundAt, replace.buffer, replace.len);
 80817b6:	68b2      	ldr	r2, [r6, #8]
 80817b8:	6831      	ldr	r1, [r6, #0]
 80817ba:	f001 fd0b 	bl	80831d4 <memcpy>
			readFrom = foundAt + replace.len;
 80817be:	68b0      	ldr	r0, [r6, #8]
 80817c0:	4404      	add	r4, r0
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80817c2:	e7f0      	b.n	80817a6 <_ZN6String7replaceERKS_S1_+0x2a>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
 80817c4:	da22      	bge.n	808180c <_ZN6String7replaceERKS_S1_+0x90>
 80817c6:	46a1      	mov	r9, r4
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80817c8:	f8d8 1000 	ldr.w	r1, [r8]
 80817cc:	4620      	mov	r0, r4
 80817ce:	f001 fda1 	bl	8083314 <strstr>
 80817d2:	4683      	mov	fp, r0
 80817d4:	b1a8      	cbz	r0, 8081802 <_ZN6String7replaceERKS_S1_+0x86>
			unsigned int n = foundAt - readFrom;
 80817d6:	ebc4 0a00 	rsb	sl, r4, r0
			memcpy(writeTo, readFrom, n);
 80817da:	4621      	mov	r1, r4
 80817dc:	4652      	mov	r2, sl
 80817de:	4648      	mov	r0, r9
			writeTo += n;
 80817e0:	44d1      	add	r9, sl
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
 80817e2:	f001 fcf7 	bl	80831d4 <memcpy>
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
 80817e6:	4648      	mov	r0, r9
 80817e8:	68b2      	ldr	r2, [r6, #8]
 80817ea:	6831      	ldr	r1, [r6, #0]
 80817ec:	f001 fcf2 	bl	80831d4 <memcpy>
			writeTo += replace.len;
 80817f0:	68b3      	ldr	r3, [r6, #8]
			readFrom = foundAt + find.len;
 80817f2:	f8d8 4008 	ldr.w	r4, [r8, #8]
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
 80817f6:	4499      	add	r9, r3
			readFrom = foundAt + find.len;
			len += diff;
 80817f8:	68ab      	ldr	r3, [r5, #8]
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
 80817fa:	445c      	add	r4, fp
			len += diff;
 80817fc:	443b      	add	r3, r7
 80817fe:	60ab      	str	r3, [r5, #8]
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8081800:	e7e2      	b.n	80817c8 <_ZN6String7replaceERKS_S1_+0x4c>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
 8081802:	4621      	mov	r1, r4
 8081804:	4648      	mov	r0, r9
 8081806:	f001 fd45 	bl	8083294 <strcpy>
 808180a:	e03a      	b.n	8081882 <_ZN6String7replaceERKS_S1_+0x106>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 808180c:	46d1      	mov	r9, sl
 808180e:	680b      	ldr	r3, [r1, #0]
 8081810:	4619      	mov	r1, r3
 8081812:	4620      	mov	r0, r4
 8081814:	9301      	str	r3, [sp, #4]
 8081816:	f001 fd7d 	bl	8083314 <strstr>
 808181a:	b120      	cbz	r0, 8081826 <_ZN6String7replaceERKS_S1_+0xaa>
			readFrom = foundAt + find.len;
 808181c:	eb00 040b 	add.w	r4, r0, fp
			size += diff;
 8081820:	44b9      	add	r9, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8081822:	9b01      	ldr	r3, [sp, #4]
 8081824:	e7f4      	b.n	8081810 <_ZN6String7replaceERKS_S1_+0x94>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
 8081826:	45d1      	cmp	r9, sl
 8081828:	d02b      	beq.n	8081882 <_ZN6String7replaceERKS_S1_+0x106>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
 808182a:	686b      	ldr	r3, [r5, #4]
 808182c:	4599      	cmp	r9, r3
 808182e:	d904      	bls.n	808183a <_ZN6String7replaceERKS_S1_+0xbe>
 8081830:	4649      	mov	r1, r9
 8081832:	4628      	mov	r0, r5
 8081834:	f7ff fed0 	bl	80815d8 <_ZN6String12changeBufferEj>
 8081838:	b318      	cbz	r0, 8081882 <_ZN6String7replaceERKS_S1_+0x106>
		int index = len - 1;
 808183a:	68aa      	ldr	r2, [r5, #8]
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
			buffer[len] = 0;
 808183c:	f04f 0900 	mov.w	r9, #0
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
 8081840:	3a01      	subs	r2, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 8081842:	2a00      	cmp	r2, #0
 8081844:	db1d      	blt.n	8081882 <_ZN6String7replaceERKS_S1_+0x106>
 8081846:	4641      	mov	r1, r8
 8081848:	4628      	mov	r0, r5
 808184a:	f7ff ff70 	bl	808172e <_ZNK6String11lastIndexOfERKS_j>
 808184e:	1e04      	subs	r4, r0, #0
 8081850:	db17      	blt.n	8081882 <_ZN6String7replaceERKS_S1_+0x106>
			readFrom = buffer + index + find.len;
 8081852:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8081856:	6829      	ldr	r1, [r5, #0]
 8081858:	4423      	add	r3, r4
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 808185a:	68aa      	ldr	r2, [r5, #8]
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
 808185c:	4419      	add	r1, r3
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 808185e:	1ad2      	subs	r2, r2, r3
 8081860:	19c8      	adds	r0, r1, r7
 8081862:	f001 fcc2 	bl	80831ea <memmove>
			len += diff;
 8081866:	68ab      	ldr	r3, [r5, #8]
			buffer[len] = 0;
 8081868:	682a      	ldr	r2, [r5, #0]
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
 808186a:	443b      	add	r3, r7
 808186c:	60ab      	str	r3, [r5, #8]
			buffer[len] = 0;
 808186e:	f802 9003 	strb.w	r9, [r2, r3]
			memcpy(buffer + index, replace.buffer, replace.len);
 8081872:	6828      	ldr	r0, [r5, #0]
 8081874:	68b2      	ldr	r2, [r6, #8]
 8081876:	6831      	ldr	r1, [r6, #0]
 8081878:	4420      	add	r0, r4
 808187a:	f001 fcab 	bl	80831d4 <memcpy>
			index--;
 808187e:	1e62      	subs	r2, r4, #1
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 8081880:	e7df      	b.n	8081842 <_ZN6String7replaceERKS_S1_+0xc6>
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
        return *this;
}
 8081882:	4628      	mov	r0, r5
 8081884:	b003      	add	sp, #12
 8081886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808188c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 808188c:	b510      	push	{r4, lr}
 808188e:	4604      	mov	r4, r0
 8081890:	4608      	mov	r0, r1
 8081892:	4611      	mov	r1, r2
 8081894:	461a      	mov	r2, r3
    system_sleep(sleepMode, seconds, flags.value(), NULL);
 8081896:	2300      	movs	r3, #0
 8081898:	f7ff f80e 	bl	80808b8 <system_sleep>
    System.sleepResult_ = SleepResult();
 808189c:	4b07      	ldr	r3, [pc, #28]	; (80818bc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x30>)
 808189e:	2200      	movs	r2, #0
 80818a0:	701a      	strb	r2, [r3, #0]
 80818a2:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80818a6:	805a      	strh	r2, [r3, #2]
 80818a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80818ac:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 80818ae:	681a      	ldr	r2, [r3, #0]
 80818b0:	889b      	ldrh	r3, [r3, #4]
 80818b2:	6022      	str	r2, [r4, #0]
 80818b4:	80a3      	strh	r3, [r4, #4]
}
 80818b6:	4620      	mov	r0, r4
 80818b8:	bd10      	pop	{r4, pc}
 80818ba:	bf00      	nop
 80818bc:	20000614 	.word	0x20000614

080818c0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80818c0:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80818c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80818c6:	4c0d      	ldr	r4, [pc, #52]	; (80818fc <_GLOBAL__sub_I_System+0x3c>)
 80818c8:	2500      	movs	r5, #0
 80818ca:	8063      	strh	r3, [r4, #2]
 80818cc:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80818d0:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80818d2:	80a3      	strh	r3, [r4, #4]
 80818d4:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80818d6:	f7fe ffdf 	bl	8080898 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80818da:	a802      	add	r0, sp, #8
 80818dc:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80818e0:	462a      	mov	r2, r5
 80818e2:	4629      	mov	r1, r5
 80818e4:	f7fe fec0 	bl	8080668 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80818e8:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80818ea:	2b1e      	cmp	r3, #30
 80818ec:	d104      	bne.n	80818f8 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80818ee:	2303      	movs	r3, #3
 80818f0:	7023      	strb	r3, [r4, #0]
 80818f2:	2311      	movs	r3, #17
 80818f4:	8065      	strh	r5, [r4, #2]
 80818f6:	80a3      	strh	r3, [r4, #4]
 80818f8:	b003      	add	sp, #12
 80818fa:	bd30      	pop	{r4, r5, pc}
 80818fc:	20000614 	.word	0x20000614

08081900 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8081900:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8081902:	4b14      	ldr	r3, [pc, #80]	; (8081954 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8081904:	4f14      	ldr	r7, [pc, #80]	; (8081958 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8081906:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8081908:	4b14      	ldr	r3, [pc, #80]	; (808195c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808190a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 808190c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 808190e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8081910:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8081912:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8081914:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8081916:	d01b      	beq.n	8081950 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8081918:	a80a      	add	r0, sp, #40	; 0x28
 808191a:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 808191e:	f001 fb5d 	bl	8082fdc <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8081922:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8081924:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8081926:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8081928:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 808192c:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 808192e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8081930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8081932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8081934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8081936:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808193a:	4c09      	ldr	r4, [pc, #36]	; (8081960 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808193c:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8081940:	ad01      	add	r5, sp, #4
 8081942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808194a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808194c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8081950:	b00b      	add	sp, #44	; 0x2c
 8081952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081954:	2000064c 	.word	0x2000064c
 8081958:	20000648 	.word	0x20000648
 808195c:	20000644 	.word	0x20000644
 8081960:	2000061c 	.word	0x2000061c

08081964 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8081964:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8081966:	2000      	movs	r0, #0
 8081968:	f7fe fffa 	bl	8080960 <spark_sync_time_pending>
 808196c:	b128      	cbz	r0, 808197a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808196e:	f7fe ffe7 	bl	8080940 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8081972:	f080 0001 	eor.w	r0, r0, #1
 8081976:	b2c0      	uxtb	r0, r0
 8081978:	bd08      	pop	{r3, pc}
 808197a:	2001      	movs	r0, #1
    }
 808197c:	bd08      	pop	{r3, pc}

0808197e <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 808197e:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8081980:	2000      	movs	r0, #0
 8081982:	f7fe fe91 	bl	80806a8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8081986:	4604      	mov	r4, r0
 8081988:	b968      	cbnz	r0, 80819a6 <_ZN9TimeClass7isValidEv+0x28>
        }
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 808198a:	f7fe ff7d 	bl	8080888 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 808198e:	2801      	cmp	r0, #1
 8081990:	d10b      	bne.n	80819aa <_ZN9TimeClass7isValidEv+0x2c>
 8081992:	4620      	mov	r0, r4
 8081994:	f7fe ffa8 	bl	80808e8 <system_thread_get_state>
 8081998:	b938      	cbnz	r0, 80819aa <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 808199a:	f7ff ffe3 	bl	8081964 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808199e:	b930      	cbnz	r0, 80819ae <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80819a0:	f7fe ffbe 	bl	8080920 <spark_process>
 80819a4:	e7f9      	b.n	808199a <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80819a6:	2001      	movs	r0, #1
 80819a8:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80819aa:	2000      	movs	r0, #0
 80819ac:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80819ae:	f7ff ffd9 	bl	8081964 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80819b2:	2000      	movs	r0, #0
 80819b4:	f7fe fe78 	bl	80806a8 <HAL_RTC_Time_Is_Valid>
 80819b8:	3000      	adds	r0, #0
 80819ba:	bf18      	it	ne
 80819bc:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80819be:	bd10      	pop	{r4, pc}

080819c0 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80819c0:	b508      	push	{r3, lr}
    (void)isValid();
 80819c2:	f7ff ffdc 	bl	808197e <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80819c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80819ca:	f7fe be65 	b.w	8080698 <HAL_RTC_Get_UnixTime>
	...

080819d0 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80819d0:	b508      	push	{r3, lr}
	return hour(now());
 80819d2:	f7ff fff5 	bl	80819c0 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80819d6:	f7ff ff93 	bl	8081900 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80819da:	4b01      	ldr	r3, [pc, #4]	; (80819e0 <_ZN9TimeClass4hourEv+0x10>)
 80819dc:	6898      	ldr	r0, [r3, #8]
 80819de:	bd08      	pop	{r3, pc}
 80819e0:	2000061c 	.word	0x2000061c

080819e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80819e4:	4b02      	ldr	r3, [pc, #8]	; (80819f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80819e6:	681a      	ldr	r2, [r3, #0]
 80819e8:	4b02      	ldr	r3, [pc, #8]	; (80819f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80819ea:	601a      	str	r2, [r3, #0]
 80819ec:	4770      	bx	lr
 80819ee:	bf00      	nop
 80819f0:	20000404 	.word	0x20000404
 80819f4:	20000640 	.word	0x20000640

080819f8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80819f8:	4770      	bx	lr

080819fa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80819fa:	7441      	strb	r1, [r0, #17]
 80819fc:	4770      	bx	lr

080819fe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80819fe:	7c00      	ldrb	r0, [r0, #16]
 8081a00:	f7fe befa 	b.w	80807f8 <HAL_USART_Available_Data_For_Write>

08081a04 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8081a04:	7c00      	ldrb	r0, [r0, #16]
 8081a06:	f7fe bed7 	b.w	80807b8 <HAL_USART_Available_Data>

08081a0a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8081a0a:	7c00      	ldrb	r0, [r0, #16]
 8081a0c:	f7fe bee4 	b.w	80807d8 <HAL_USART_Peek_Data>

08081a10 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8081a10:	7c00      	ldrb	r0, [r0, #16]
 8081a12:	f7fe bed9 	b.w	80807c8 <HAL_USART_Read_Data>

08081a16 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8081a16:	7c00      	ldrb	r0, [r0, #16]
 8081a18:	f7fe bee6 	b.w	80807e8 <HAL_USART_Flush_Data>

08081a1c <_ZN11USARTSerialD0Ev>:
 8081a1c:	b510      	push	{r4, lr}
 8081a1e:	4604      	mov	r4, r0
 8081a20:	f7fe fb3d 	bl	808009e <_ZdlPv>
 8081a24:	4620      	mov	r0, r4
 8081a26:	bd10      	pop	{r4, pc}

08081a28 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8081a28:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8081a2a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8081a2c:	4604      	mov	r4, r0
 8081a2e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8081a30:	b925      	cbnz	r5, 8081a3c <_ZN11USARTSerial5writeEh+0x14>
 8081a32:	7c00      	ldrb	r0, [r0, #16]
 8081a34:	f7fe fee0 	bl	80807f8 <HAL_USART_Available_Data_For_Write>
 8081a38:	2800      	cmp	r0, #0
 8081a3a:	dd05      	ble.n	8081a48 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8081a3c:	4631      	mov	r1, r6
 8081a3e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8081a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8081a44:	f7fe beb0 	b.w	80807a8 <HAL_USART_Write_Data>
  }
  return 0;
}
 8081a48:	4628      	mov	r0, r5
 8081a4a:	bd70      	pop	{r4, r5, r6, pc}

08081a4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081a4c:	b510      	push	{r4, lr}
 8081a4e:	4604      	mov	r4, r0
 8081a50:	4608      	mov	r0, r1
 8081a52:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081a54:	2200      	movs	r2, #0
 8081a56:	6062      	str	r2, [r4, #4]
 8081a58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8081a5c:	60a2      	str	r2, [r4, #8]
 8081a5e:	4a05      	ldr	r2, [pc, #20]	; (8081a74 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8081a60:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081a62:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8081a64:	2201      	movs	r2, #1
 8081a66:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8081a68:	461a      	mov	r2, r3
 8081a6a:	f7fe fe8d 	bl	8080788 <HAL_USART_Init>
}
 8081a6e:	4620      	mov	r0, r4
 8081a70:	bd10      	pop	{r4, pc}
 8081a72:	bf00      	nop
 8081a74:	080859b8 	.word	0x080859b8

08081a78 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8081a78:	2300      	movs	r3, #0
 8081a7a:	7c00      	ldrb	r0, [r0, #16]
 8081a7c:	f7fe bec4 	b.w	8080808 <HAL_USART_BeginConfig>

08081a80 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8081a80:	2200      	movs	r2, #0
 8081a82:	f7ff bff9 	b.w	8081a78 <_ZN11USARTSerial5beginEmm>

08081a86 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
 8081a86:	7c00      	ldrb	r0, [r0, #16]
 8081a88:	f7fe be86 	b.w	8080798 <HAL_USART_End>

08081a8c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8081a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 8081a8e:	4c19      	ldr	r4, [pc, #100]	; (8081af4 <_Z22__fetch_global_Serial1v+0x68>)
 8081a90:	6825      	ldr	r5, [r4, #0]
 8081a92:	b94d      	cbnz	r5, 8081aa8 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 8081a94:	2084      	movs	r0, #132	; 0x84
 8081a96:	f7fe fb00 	bl	808009a <_Znwj>
 8081a9a:	4606      	mov	r6, r0
 8081a9c:	b118      	cbz	r0, 8081aa6 <_Z22__fetch_global_Serial1v+0x1a>
 8081a9e:	2284      	movs	r2, #132	; 0x84
 8081aa0:	4629      	mov	r1, r5
 8081aa2:	f001 fbbd 	bl	8083220 <memset>
 8081aa6:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 8081aa8:	4d13      	ldr	r5, [pc, #76]	; (8081af8 <_Z22__fetch_global_Serial1v+0x6c>)
 8081aaa:	682e      	ldr	r6, [r5, #0]
 8081aac:	b94e      	cbnz	r6, 8081ac2 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 8081aae:	2084      	movs	r0, #132	; 0x84
 8081ab0:	f7fe faf3 	bl	808009a <_Znwj>
 8081ab4:	4607      	mov	r7, r0
 8081ab6:	b118      	cbz	r0, 8081ac0 <_Z22__fetch_global_Serial1v+0x34>
 8081ab8:	2284      	movs	r2, #132	; 0x84
 8081aba:	4631      	mov	r1, r6
 8081abc:	f001 fbb0 	bl	8083220 <memset>
 8081ac0:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 8081ac2:	4f0e      	ldr	r7, [pc, #56]	; (8081afc <_Z22__fetch_global_Serial1v+0x70>)
 8081ac4:	6839      	ldr	r1, [r7, #0]
 8081ac6:	f011 0601 	ands.w	r6, r1, #1
 8081aca:	d111      	bne.n	8081af0 <_Z22__fetch_global_Serial1v+0x64>
 8081acc:	4638      	mov	r0, r7
 8081ace:	f7fe fae8 	bl	80800a2 <__cxa_guard_acquire>
 8081ad2:	b168      	cbz	r0, 8081af0 <_Z22__fetch_global_Serial1v+0x64>
 8081ad4:	6822      	ldr	r2, [r4, #0]
 8081ad6:	4631      	mov	r1, r6
 8081ad8:	682b      	ldr	r3, [r5, #0]
 8081ada:	4809      	ldr	r0, [pc, #36]	; (8081b00 <_Z22__fetch_global_Serial1v+0x74>)
 8081adc:	f7ff ffb6 	bl	8081a4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8081ae0:	4638      	mov	r0, r7
 8081ae2:	f7fe fae3 	bl	80800ac <__cxa_guard_release>
 8081ae6:	4a07      	ldr	r2, [pc, #28]	; (8081b04 <_Z22__fetch_global_Serial1v+0x78>)
 8081ae8:	4907      	ldr	r1, [pc, #28]	; (8081b08 <_Z22__fetch_global_Serial1v+0x7c>)
 8081aea:	4805      	ldr	r0, [pc, #20]	; (8081b00 <_Z22__fetch_global_Serial1v+0x74>)
 8081aec:	f000 f9ba 	bl	8081e64 <__aeabi_atexit>
#endif
	return serial1;
}
 8081af0:	4803      	ldr	r0, [pc, #12]	; (8081b00 <_Z22__fetch_global_Serial1v+0x74>)
 8081af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8081af4:	2000066c 	.word	0x2000066c
 8081af8:	20000664 	.word	0x20000664
 8081afc:	20000668 	.word	0x20000668
 8081b00:	20000650 	.word	0x20000650
 8081b04:	200004f4 	.word	0x200004f4
 8081b08:	080819f9 	.word	0x080819f9

08081b0c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081b0c:	7441      	strb	r1, [r0, #17]
 8081b0e:	4770      	bx	lr

08081b10 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 8081b10:	4770      	bx	lr

08081b12 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 8081b12:	2100      	movs	r1, #0
 8081b14:	7c00      	ldrb	r0, [r0, #16]
 8081b16:	f7fe be9f 	b.w	8080858 <HAL_USB_USART_Receive_Data>

08081b1a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8081b1a:	2101      	movs	r1, #1
 8081b1c:	7c00      	ldrb	r0, [r0, #16]
 8081b1e:	f7fe be9b 	b.w	8080858 <HAL_USB_USART_Receive_Data>

08081b22 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8081b22:	7c00      	ldrb	r0, [r0, #16]
 8081b24:	f7fe be90 	b.w	8080848 <HAL_USB_USART_Available_Data_For_Write>

08081b28 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8081b28:	7c00      	ldrb	r0, [r0, #16]
 8081b2a:	f7fe be85 	b.w	8080838 <HAL_USB_USART_Available_Data>

08081b2e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8081b2e:	b538      	push	{r3, r4, r5, lr}
 8081b30:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081b32:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8081b34:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081b36:	f7fe fe87 	bl	8080848 <HAL_USB_USART_Available_Data_For_Write>
 8081b3a:	2800      	cmp	r0, #0
 8081b3c:	dc01      	bgt.n	8081b42 <_ZN9USBSerial5writeEh+0x14>
 8081b3e:	7c60      	ldrb	r0, [r4, #17]
 8081b40:	b120      	cbz	r0, 8081b4c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8081b42:	4629      	mov	r1, r5
 8081b44:	7c20      	ldrb	r0, [r4, #16]
 8081b46:	f7fe fe8f 	bl	8080868 <HAL_USB_USART_Send_Data>
    return 1;
 8081b4a:	2001      	movs	r0, #1
  }
  return 0;
}
 8081b4c:	bd38      	pop	{r3, r4, r5, pc}

08081b4e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8081b4e:	7c00      	ldrb	r0, [r0, #16]
 8081b50:	f7fe be92 	b.w	8080878 <HAL_USB_USART_Flush_Data>

08081b54 <_ZN9USBSerialD0Ev>:
 8081b54:	b510      	push	{r4, lr}
 8081b56:	4604      	mov	r4, r0
 8081b58:	f7fe faa1 	bl	808009e <_ZdlPv>
 8081b5c:	4620      	mov	r0, r4
 8081b5e:	bd10      	pop	{r4, pc}

08081b60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081b60:	b510      	push	{r4, lr}
 8081b62:	4604      	mov	r4, r0
 8081b64:	2300      	movs	r3, #0
 8081b66:	6063      	str	r3, [r4, #4]
 8081b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081b6c:	60a3      	str	r3, [r4, #8]
 8081b6e:	4b05      	ldr	r3, [pc, #20]	; (8081b84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8081b70:	4608      	mov	r0, r1
 8081b72:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8081b74:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8081b76:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8081b78:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8081b7a:	4611      	mov	r1, r2
 8081b7c:	f7fe fe4c 	bl	8080818 <HAL_USB_USART_Init>
}
 8081b80:	4620      	mov	r0, r4
 8081b82:	bd10      	pop	{r4, pc}
 8081b84:	080859e8 	.word	0x080859e8

08081b88 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8081b88:	2200      	movs	r2, #0
 8081b8a:	7c00      	ldrb	r0, [r0, #16]
 8081b8c:	f7fe be4c 	b.w	8080828 <HAL_USB_USART_Begin>

08081b90 <_Z19acquireSerialBufferv>:
 8081b90:	b510      	push	{r4, lr}
 8081b92:	4604      	mov	r4, r0
 8081b94:	2214      	movs	r2, #20
 8081b96:	2100      	movs	r1, #0
 8081b98:	f001 fb42 	bl	8083220 <memset>
 8081b9c:	4620      	mov	r0, r4
 8081b9e:	bd10      	pop	{r4, pc}

08081ba0 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8081ba0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081ba2:	4d0e      	ldr	r5, [pc, #56]	; (8081bdc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8081ba4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8081ba6:	a801      	add	r0, sp, #4
 8081ba8:	f7ff fff2 	bl	8081b90 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081bac:	6829      	ldr	r1, [r5, #0]
 8081bae:	f011 0401 	ands.w	r4, r1, #1
 8081bb2:	d110      	bne.n	8081bd6 <_Z16_fetch_usbserialv+0x36>
 8081bb4:	4628      	mov	r0, r5
 8081bb6:	f7fe fa74 	bl	80800a2 <__cxa_guard_acquire>
 8081bba:	b160      	cbz	r0, 8081bd6 <_Z16_fetch_usbserialv+0x36>
 8081bbc:	aa01      	add	r2, sp, #4
 8081bbe:	4621      	mov	r1, r4
 8081bc0:	4807      	ldr	r0, [pc, #28]	; (8081be0 <_Z16_fetch_usbserialv+0x40>)
 8081bc2:	f7ff ffcd 	bl	8081b60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081bc6:	4628      	mov	r0, r5
 8081bc8:	f7fe fa70 	bl	80800ac <__cxa_guard_release>
 8081bcc:	4a05      	ldr	r2, [pc, #20]	; (8081be4 <_Z16_fetch_usbserialv+0x44>)
 8081bce:	4906      	ldr	r1, [pc, #24]	; (8081be8 <_Z16_fetch_usbserialv+0x48>)
 8081bd0:	4803      	ldr	r0, [pc, #12]	; (8081be0 <_Z16_fetch_usbserialv+0x40>)
 8081bd2:	f000 f947 	bl	8081e64 <__aeabi_atexit>
	return _usbserial;
}
 8081bd6:	4802      	ldr	r0, [pc, #8]	; (8081be0 <_Z16_fetch_usbserialv+0x40>)
 8081bd8:	b007      	add	sp, #28
 8081bda:	bd30      	pop	{r4, r5, pc}
 8081bdc:	20000670 	.word	0x20000670
 8081be0:	20000678 	.word	0x20000678
 8081be4:	200004f4 	.word	0x200004f4
 8081be8:	08081b11 	.word	0x08081b11

08081bec <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081bec:	b510      	push	{r4, lr}
 8081bee:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081bf0:	2214      	movs	r2, #20
 8081bf2:	2100      	movs	r1, #0
 8081bf4:	f001 fb14 	bl	8083220 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081bf8:	4620      	mov	r0, r4
 8081bfa:	bd10      	pop	{r4, pc}

08081bfc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081bfc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081bfe:	4c0e      	ldr	r4, [pc, #56]	; (8081c38 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8081c00:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8081c02:	a801      	add	r0, sp, #4
 8081c04:	f7ff fff2 	bl	8081bec <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081c08:	6823      	ldr	r3, [r4, #0]
 8081c0a:	07db      	lsls	r3, r3, #31
 8081c0c:	d410      	bmi.n	8081c30 <_Z17_fetch_usbserial1v+0x34>
 8081c0e:	4620      	mov	r0, r4
 8081c10:	f7fe fa47 	bl	80800a2 <__cxa_guard_acquire>
 8081c14:	b160      	cbz	r0, 8081c30 <_Z17_fetch_usbserial1v+0x34>
 8081c16:	aa01      	add	r2, sp, #4
 8081c18:	2101      	movs	r1, #1
 8081c1a:	4808      	ldr	r0, [pc, #32]	; (8081c3c <_Z17_fetch_usbserial1v+0x40>)
 8081c1c:	f7ff ffa0 	bl	8081b60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081c20:	4620      	mov	r0, r4
 8081c22:	f7fe fa43 	bl	80800ac <__cxa_guard_release>
 8081c26:	4a06      	ldr	r2, [pc, #24]	; (8081c40 <_Z17_fetch_usbserial1v+0x44>)
 8081c28:	4906      	ldr	r1, [pc, #24]	; (8081c44 <_Z17_fetch_usbserial1v+0x48>)
 8081c2a:	4804      	ldr	r0, [pc, #16]	; (8081c3c <_Z17_fetch_usbserial1v+0x40>)
 8081c2c:	f000 f91a 	bl	8081e64 <__aeabi_atexit>
  return _usbserial1;
}
 8081c30:	4802      	ldr	r0, [pc, #8]	; (8081c3c <_Z17_fetch_usbserial1v+0x40>)
 8081c32:	b006      	add	sp, #24
 8081c34:	bd10      	pop	{r4, pc}
 8081c36:	bf00      	nop
 8081c38:	20000674 	.word	0x20000674
 8081c3c:	2000068c 	.word	0x2000068c
 8081c40:	200004f4 	.word	0x200004f4
 8081c44:	08081b11 	.word	0x08081b11

08081c48 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8081c48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8081c4a:	4b18      	ldr	r3, [pc, #96]	; (8081cac <serialEventRun+0x64>)
 8081c4c:	b133      	cbz	r3, 8081c5c <serialEventRun+0x14>
 8081c4e:	f7ff ffa7 	bl	8081ba0 <_Z16_fetch_usbserialv>
 8081c52:	6803      	ldr	r3, [r0, #0]
 8081c54:	691b      	ldr	r3, [r3, #16]
 8081c56:	4798      	blx	r3
 8081c58:	2800      	cmp	r0, #0
 8081c5a:	dc1e      	bgt.n	8081c9a <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8081c5c:	4b14      	ldr	r3, [pc, #80]	; (8081cb0 <serialEventRun+0x68>)
 8081c5e:	b133      	cbz	r3, 8081c6e <serialEventRun+0x26>
 8081c60:	f7ff ff14 	bl	8081a8c <_Z22__fetch_global_Serial1v>
 8081c64:	6803      	ldr	r3, [r0, #0]
 8081c66:	691b      	ldr	r3, [r3, #16]
 8081c68:	4798      	blx	r3
 8081c6a:	2800      	cmp	r0, #0
 8081c6c:	dc18      	bgt.n	8081ca0 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8081c6e:	4b11      	ldr	r3, [pc, #68]	; (8081cb4 <serialEventRun+0x6c>)
 8081c70:	b10b      	cbz	r3, 8081c76 <serialEventRun+0x2e>
 8081c72:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8081c76:	4b10      	ldr	r3, [pc, #64]	; (8081cb8 <serialEventRun+0x70>)
 8081c78:	b10b      	cbz	r3, 8081c7e <serialEventRun+0x36>
 8081c7a:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8081c7e:	4b0f      	ldr	r3, [pc, #60]	; (8081cbc <serialEventRun+0x74>)
 8081c80:	b10b      	cbz	r3, 8081c86 <serialEventRun+0x3e>
 8081c82:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8081c86:	4b0e      	ldr	r3, [pc, #56]	; (8081cc0 <serialEventRun+0x78>)
 8081c88:	b17b      	cbz	r3, 8081caa <serialEventRun+0x62>
 8081c8a:	f7ff ffb7 	bl	8081bfc <_Z17_fetch_usbserial1v>
 8081c8e:	6803      	ldr	r3, [r0, #0]
 8081c90:	691b      	ldr	r3, [r3, #16]
 8081c92:	4798      	blx	r3
 8081c94:	2800      	cmp	r0, #0
 8081c96:	dc06      	bgt.n	8081ca6 <serialEventRun+0x5e>
 8081c98:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8081c9a:	f3af 8000 	nop.w
 8081c9e:	e7dd      	b.n	8081c5c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8081ca0:	f3af 8000 	nop.w
 8081ca4:	e7e3      	b.n	8081c6e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8081ca6:	f3af 8000 	nop.w
 8081caa:	bd08      	pop	{r3, pc}
	...

08081cc4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8081cc4:	b508      	push	{r3, lr}
	serialEventRun();
 8081cc6:	f7ff ffbf 	bl	8081c48 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081cca:	f7fe fcdd 	bl	8080688 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8081cce:	4b01      	ldr	r3, [pc, #4]	; (8081cd4 <_post_loop+0x10>)
 8081cd0:	6018      	str	r0, [r3, #0]
 8081cd2:	bd08      	pop	{r3, pc}
 8081cd4:	200006a8 	.word	0x200006a8

08081cd8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8081cd8:	4802      	ldr	r0, [pc, #8]	; (8081ce4 <_Z33system_initialize_user_backup_ramv+0xc>)
 8081cda:	4a03      	ldr	r2, [pc, #12]	; (8081ce8 <_Z33system_initialize_user_backup_ramv+0x10>)
 8081cdc:	4903      	ldr	r1, [pc, #12]	; (8081cec <_Z33system_initialize_user_backup_ramv+0x14>)
 8081cde:	1a12      	subs	r2, r2, r0
 8081ce0:	f001 ba78 	b.w	80831d4 <memcpy>
 8081ce4:	40024000 	.word	0x40024000
 8081ce8:	40024004 	.word	0x40024004
 8081cec:	08085db0 	.word	0x08085db0

08081cf0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8081cf0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081cf2:	2300      	movs	r3, #0
 8081cf4:	9300      	str	r3, [sp, #0]
 8081cf6:	461a      	mov	r2, r3
 8081cf8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081cfc:	f7fe fe06 	bl	808090c <system_ctrl_set_result>
}
 8081d00:	b003      	add	sp, #12
 8081d02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081d08 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8081d08:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8081d0a:	8843      	ldrh	r3, [r0, #2]
 8081d0c:	2b0a      	cmp	r3, #10
 8081d0e:	d008      	beq.n	8081d22 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8081d10:	2b50      	cmp	r3, #80	; 0x50
 8081d12:	d109      	bne.n	8081d28 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8081d14:	4b09      	ldr	r3, [pc, #36]	; (8081d3c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8081d16:	681b      	ldr	r3, [r3, #0]
 8081d18:	b13b      	cbz	r3, 8081d2a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8081d1a:	b003      	add	sp, #12
 8081d1c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8081d20:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8081d22:	f7ff ffe5 	bl	8081cf0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8081d26:	e006      	b.n	8081d36 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081d28:	2300      	movs	r3, #0
 8081d2a:	9300      	str	r3, [sp, #0]
 8081d2c:	461a      	mov	r2, r3
 8081d2e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081d32:	f7fe fdeb 	bl	808090c <system_ctrl_set_result>
        break;
    }
}
 8081d36:	b003      	add	sp, #12
 8081d38:	f85d fb04 	ldr.w	pc, [sp], #4
 8081d3c:	200006a0 	.word	0x200006a0

08081d40 <module_user_init_hook>:

void module_user_init_hook()
{
 8081d40:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8081d42:	4c10      	ldr	r4, [pc, #64]	; (8081d84 <module_user_init_hook+0x44>)
 8081d44:	4d10      	ldr	r5, [pc, #64]	; (8081d88 <module_user_init_hook+0x48>)
 8081d46:	6823      	ldr	r3, [r4, #0]
 8081d48:	42ab      	cmp	r3, r5
 8081d4a:	4b10      	ldr	r3, [pc, #64]	; (8081d8c <module_user_init_hook+0x4c>)
 8081d4c:	bf0c      	ite	eq
 8081d4e:	2201      	moveq	r2, #1
 8081d50:	2200      	movne	r2, #0
 8081d52:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8081d54:	d002      	beq.n	8081d5c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8081d56:	f7ff ffbf 	bl	8081cd8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8081d5a:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 8081d5c:	f7fe fc8c 	bl	8080678 <HAL_RNG_GetRandomNumber>
 8081d60:	f001 fa66 	bl	8083230 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8081d64:	4b0a      	ldr	r3, [pc, #40]	; (8081d90 <module_user_init_hook+0x50>)
 8081d66:	b11b      	cbz	r3, 8081d70 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 8081d68:	f7fe fc86 	bl	8080678 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 8081d6c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8081d70:	2100      	movs	r1, #0
 8081d72:	4807      	ldr	r0, [pc, #28]	; (8081d90 <module_user_init_hook+0x50>)
 8081d74:	f7fe fdfc 	bl	8080970 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8081d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8081d7c:	2100      	movs	r1, #0
 8081d7e:	4805      	ldr	r0, [pc, #20]	; (8081d94 <module_user_init_hook+0x54>)
 8081d80:	f7fe bdba 	b.w	80808f8 <system_ctrl_set_app_request_handler>
 8081d84:	40024000 	.word	0x40024000
 8081d88:	9a271c1e 	.word	0x9a271c1e
 8081d8c:	200006a4 	.word	0x200006a4
 8081d90:	00000000 	.word	0x00000000
 8081d94:	08081d09 	.word	0x08081d09

08081d98 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8081d98:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 8081d9a:	4c0b      	ldr	r4, [pc, #44]	; (8081dc8 <_Z20__fetch_global_Wire3v+0x30>)
 8081d9c:	6823      	ldr	r3, [r4, #0]
 8081d9e:	07db      	lsls	r3, r3, #31
 8081da0:	d40f      	bmi.n	8081dc2 <_Z20__fetch_global_Wire3v+0x2a>
 8081da2:	4620      	mov	r0, r4
 8081da4:	f7fe f97d 	bl	80800a2 <__cxa_guard_acquire>
 8081da8:	b158      	cbz	r0, 8081dc2 <_Z20__fetch_global_Wire3v+0x2a>
 8081daa:	2102      	movs	r1, #2
 8081dac:	4807      	ldr	r0, [pc, #28]	; (8081dcc <_Z20__fetch_global_Wire3v+0x34>)
 8081dae:	f7ff f9df 	bl	8081170 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8081db2:	4620      	mov	r0, r4
 8081db4:	f7fe f97a 	bl	80800ac <__cxa_guard_release>
 8081db8:	4a05      	ldr	r2, [pc, #20]	; (8081dd0 <_Z20__fetch_global_Wire3v+0x38>)
 8081dba:	4906      	ldr	r1, [pc, #24]	; (8081dd4 <_Z20__fetch_global_Wire3v+0x3c>)
 8081dbc:	4803      	ldr	r0, [pc, #12]	; (8081dcc <_Z20__fetch_global_Wire3v+0x34>)
 8081dbe:	f000 f851 	bl	8081e64 <__aeabi_atexit>
	return wire;
}
 8081dc2:	4802      	ldr	r0, [pc, #8]	; (8081dcc <_Z20__fetch_global_Wire3v+0x34>)
 8081dc4:	bd10      	pop	{r4, pc}
 8081dc6:	bf00      	nop
 8081dc8:	200006c0 	.word	0x200006c0
 8081dcc:	200006ac 	.word	0x200006ac
 8081dd0:	200004f4 	.word	0x200004f4
 8081dd4:	08081119 	.word	0x08081119

08081dd8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 8081dd8:	b513      	push	{r0, r1, r4, lr}
 8081dda:	4c08      	ldr	r4, [pc, #32]	; (8081dfc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8081ddc:	2300      	movs	r3, #0
 8081dde:	461a      	mov	r2, r3
 8081de0:	4619      	mov	r1, r3
 8081de2:	9300      	str	r3, [sp, #0]
 8081de4:	4620      	mov	r0, r4
 8081de6:	f7ff fa2b 	bl	8081240 <_ZN9IPAddressC1Ehhhh>
 8081dea:	4620      	mov	r0, r4
 8081dec:	4a04      	ldr	r2, [pc, #16]	; (8081e00 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8081dee:	4905      	ldr	r1, [pc, #20]	; (8081e04 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8081df0:	b002      	add	sp, #8
 8081df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8081df6:	f000 b835 	b.w	8081e64 <__aeabi_atexit>
 8081dfa:	bf00      	nop
 8081dfc:	200006c4 	.word	0x200006c4
 8081e00:	200004f4 	.word	0x200004f4
 8081e04:	080811eb 	.word	0x080811eb

08081e08 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081e08:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8081e0a:	4e11      	ldr	r6, [pc, #68]	; (8081e50 <_GLOBAL__sub_I_SPI+0x48>)
 8081e0c:	4d11      	ldr	r5, [pc, #68]	; (8081e54 <_GLOBAL__sub_I_SPI+0x4c>)
 8081e0e:	4c12      	ldr	r4, [pc, #72]	; (8081e58 <_GLOBAL__sub_I_SPI+0x50>)
 8081e10:	2100      	movs	r1, #0
 8081e12:	4630      	mov	r0, r6
 8081e14:	f7ff fb8e 	bl	8081534 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081e18:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8081e1a:	4e10      	ldr	r6, [pc, #64]	; (8081e5c <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8081e1c:	462a      	mov	r2, r5
 8081e1e:	4621      	mov	r1, r4
 8081e20:	f000 f820 	bl	8081e64 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8081e24:	2101      	movs	r1, #1
 8081e26:	4630      	mov	r0, r6
 8081e28:	f7ff fb84 	bl	8081534 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081e2c:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081e2e:	4e0c      	ldr	r6, [pc, #48]	; (8081e60 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8081e30:	462a      	mov	r2, r5
 8081e32:	4621      	mov	r1, r4
 8081e34:	f000 f816 	bl	8081e64 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081e38:	2102      	movs	r1, #2
 8081e3a:	4630      	mov	r0, r6
 8081e3c:	f7ff fb7a 	bl	8081534 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081e40:	462a      	mov	r2, r5
 8081e42:	4621      	mov	r1, r4
 8081e44:	4630      	mov	r0, r6
 8081e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8081e4a:	f000 b80b 	b.w	8081e64 <__aeabi_atexit>
 8081e4e:	bf00      	nop
 8081e50:	200006cc 	.word	0x200006cc
 8081e54:	200004f4 	.word	0x200004f4
 8081e58:	08081525 	.word	0x08081525
 8081e5c:	200006dc 	.word	0x200006dc
 8081e60:	200006ec 	.word	0x200006ec

08081e64 <__aeabi_atexit>:
 8081e64:	460b      	mov	r3, r1
 8081e66:	4601      	mov	r1, r0
 8081e68:	4618      	mov	r0, r3
 8081e6a:	f001 b8a9 	b.w	8082fc0 <__cxa_atexit>

08081e6e <_ZSt25__throw_bad_function_callv>:
 8081e6e:	b508      	push	{r3, lr}
 8081e70:	f7fe fdbe 	bl	80809f0 <abort>

08081e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8081e74:	4b24      	ldr	r3, [pc, #144]	; (8081f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8081e76:	681a      	ldr	r2, [r3, #0]
 8081e78:	07d0      	lsls	r0, r2, #31
 8081e7a:	bf5c      	itt	pl
 8081e7c:	2201      	movpl	r2, #1
 8081e7e:	601a      	strpl	r2, [r3, #0]
 8081e80:	4b22      	ldr	r3, [pc, #136]	; (8081f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8081e82:	681a      	ldr	r2, [r3, #0]
 8081e84:	07d1      	lsls	r1, r2, #31
 8081e86:	bf5c      	itt	pl
 8081e88:	2201      	movpl	r2, #1
 8081e8a:	601a      	strpl	r2, [r3, #0]
 8081e8c:	4b20      	ldr	r3, [pc, #128]	; (8081f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8081e8e:	681a      	ldr	r2, [r3, #0]
 8081e90:	07d2      	lsls	r2, r2, #31
 8081e92:	bf5c      	itt	pl
 8081e94:	2201      	movpl	r2, #1
 8081e96:	601a      	strpl	r2, [r3, #0]
 8081e98:	4b1e      	ldr	r3, [pc, #120]	; (8081f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8081e9a:	681a      	ldr	r2, [r3, #0]
 8081e9c:	07d0      	lsls	r0, r2, #31
 8081e9e:	bf5c      	itt	pl
 8081ea0:	2201      	movpl	r2, #1
 8081ea2:	601a      	strpl	r2, [r3, #0]
 8081ea4:	4b1c      	ldr	r3, [pc, #112]	; (8081f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8081ea6:	681a      	ldr	r2, [r3, #0]
 8081ea8:	07d1      	lsls	r1, r2, #31
 8081eaa:	bf5c      	itt	pl
 8081eac:	2201      	movpl	r2, #1
 8081eae:	601a      	strpl	r2, [r3, #0]
 8081eb0:	4b1a      	ldr	r3, [pc, #104]	; (8081f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8081eb2:	681a      	ldr	r2, [r3, #0]
 8081eb4:	07d2      	lsls	r2, r2, #31
 8081eb6:	bf5c      	itt	pl
 8081eb8:	2201      	movpl	r2, #1
 8081eba:	601a      	strpl	r2, [r3, #0]
 8081ebc:	4b18      	ldr	r3, [pc, #96]	; (8081f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8081ebe:	681a      	ldr	r2, [r3, #0]
 8081ec0:	07d0      	lsls	r0, r2, #31
 8081ec2:	bf5c      	itt	pl
 8081ec4:	2201      	movpl	r2, #1
 8081ec6:	601a      	strpl	r2, [r3, #0]
 8081ec8:	4b16      	ldr	r3, [pc, #88]	; (8081f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8081eca:	681a      	ldr	r2, [r3, #0]
 8081ecc:	07d1      	lsls	r1, r2, #31
 8081ece:	bf5c      	itt	pl
 8081ed0:	2201      	movpl	r2, #1
 8081ed2:	601a      	strpl	r2, [r3, #0]
 8081ed4:	4b14      	ldr	r3, [pc, #80]	; (8081f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8081ed6:	681a      	ldr	r2, [r3, #0]
 8081ed8:	07d2      	lsls	r2, r2, #31
 8081eda:	bf5c      	itt	pl
 8081edc:	2201      	movpl	r2, #1
 8081ede:	601a      	strpl	r2, [r3, #0]
 8081ee0:	4b12      	ldr	r3, [pc, #72]	; (8081f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8081ee2:	681a      	ldr	r2, [r3, #0]
 8081ee4:	07d0      	lsls	r0, r2, #31
 8081ee6:	bf5c      	itt	pl
 8081ee8:	2201      	movpl	r2, #1
 8081eea:	601a      	strpl	r2, [r3, #0]
 8081eec:	4b10      	ldr	r3, [pc, #64]	; (8081f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8081eee:	681a      	ldr	r2, [r3, #0]
 8081ef0:	07d1      	lsls	r1, r2, #31
 8081ef2:	bf5c      	itt	pl
 8081ef4:	2201      	movpl	r2, #1
 8081ef6:	601a      	strpl	r2, [r3, #0]
 8081ef8:	4b0e      	ldr	r3, [pc, #56]	; (8081f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8081efa:	681a      	ldr	r2, [r3, #0]
 8081efc:	07d2      	lsls	r2, r2, #31
 8081efe:	bf5c      	itt	pl
 8081f00:	2201      	movpl	r2, #1
 8081f02:	601a      	strpl	r2, [r3, #0]
 8081f04:	4770      	bx	lr
 8081f06:	bf00      	nop
 8081f08:	20000728 	.word	0x20000728
 8081f0c:	20000724 	.word	0x20000724
 8081f10:	20000720 	.word	0x20000720
 8081f14:	2000071c 	.word	0x2000071c
 8081f18:	20000718 	.word	0x20000718
 8081f1c:	20000714 	.word	0x20000714
 8081f20:	20000710 	.word	0x20000710
 8081f24:	2000070c 	.word	0x2000070c
 8081f28:	20000708 	.word	0x20000708
 8081f2c:	20000704 	.word	0x20000704
 8081f30:	20000700 	.word	0x20000700
 8081f34:	200006fc 	.word	0x200006fc

08081f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081f38:	4b18      	ldr	r3, [pc, #96]	; (8081f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081f3a:	681a      	ldr	r2, [r3, #0]
 8081f3c:	07d1      	lsls	r1, r2, #31
 8081f3e:	bf5c      	itt	pl
 8081f40:	2201      	movpl	r2, #1
 8081f42:	601a      	strpl	r2, [r3, #0]
 8081f44:	4b16      	ldr	r3, [pc, #88]	; (8081fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8081f46:	681a      	ldr	r2, [r3, #0]
 8081f48:	07d2      	lsls	r2, r2, #31
 8081f4a:	bf5c      	itt	pl
 8081f4c:	2201      	movpl	r2, #1
 8081f4e:	601a      	strpl	r2, [r3, #0]
 8081f50:	4b14      	ldr	r3, [pc, #80]	; (8081fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081f52:	681a      	ldr	r2, [r3, #0]
 8081f54:	07d0      	lsls	r0, r2, #31
 8081f56:	bf5c      	itt	pl
 8081f58:	2201      	movpl	r2, #1
 8081f5a:	601a      	strpl	r2, [r3, #0]
 8081f5c:	4b12      	ldr	r3, [pc, #72]	; (8081fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8081f5e:	681a      	ldr	r2, [r3, #0]
 8081f60:	07d1      	lsls	r1, r2, #31
 8081f62:	bf5c      	itt	pl
 8081f64:	2201      	movpl	r2, #1
 8081f66:	601a      	strpl	r2, [r3, #0]
 8081f68:	4b10      	ldr	r3, [pc, #64]	; (8081fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8081f6a:	681a      	ldr	r2, [r3, #0]
 8081f6c:	07d2      	lsls	r2, r2, #31
 8081f6e:	bf5c      	itt	pl
 8081f70:	2201      	movpl	r2, #1
 8081f72:	601a      	strpl	r2, [r3, #0]
 8081f74:	4b0e      	ldr	r3, [pc, #56]	; (8081fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8081f76:	681a      	ldr	r2, [r3, #0]
 8081f78:	07d0      	lsls	r0, r2, #31
 8081f7a:	bf5c      	itt	pl
 8081f7c:	2201      	movpl	r2, #1
 8081f7e:	601a      	strpl	r2, [r3, #0]
 8081f80:	4b0c      	ldr	r3, [pc, #48]	; (8081fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8081f82:	681a      	ldr	r2, [r3, #0]
 8081f84:	07d1      	lsls	r1, r2, #31
 8081f86:	bf5c      	itt	pl
 8081f88:	2201      	movpl	r2, #1
 8081f8a:	601a      	strpl	r2, [r3, #0]
 8081f8c:	4b0a      	ldr	r3, [pc, #40]	; (8081fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8081f8e:	681a      	ldr	r2, [r3, #0]
 8081f90:	07d2      	lsls	r2, r2, #31
 8081f92:	bf5c      	itt	pl
 8081f94:	2201      	movpl	r2, #1
 8081f96:	601a      	strpl	r2, [r3, #0]
 8081f98:	4770      	bx	lr
 8081f9a:	bf00      	nop
 8081f9c:	20000748 	.word	0x20000748
 8081fa0:	20000744 	.word	0x20000744
 8081fa4:	20000740 	.word	0x20000740
 8081fa8:	2000073c 	.word	0x2000073c
 8081fac:	20000738 	.word	0x20000738
 8081fb0:	20000734 	.word	0x20000734
 8081fb4:	20000730 	.word	0x20000730
 8081fb8:	2000072c 	.word	0x2000072c

08081fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081fbc:	4b18      	ldr	r3, [pc, #96]	; (8082020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081fbe:	681a      	ldr	r2, [r3, #0]
 8081fc0:	07d1      	lsls	r1, r2, #31
 8081fc2:	bf5c      	itt	pl
 8081fc4:	2201      	movpl	r2, #1
 8081fc6:	601a      	strpl	r2, [r3, #0]
 8081fc8:	4b16      	ldr	r3, [pc, #88]	; (8082024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8081fca:	681a      	ldr	r2, [r3, #0]
 8081fcc:	07d2      	lsls	r2, r2, #31
 8081fce:	bf5c      	itt	pl
 8081fd0:	2201      	movpl	r2, #1
 8081fd2:	601a      	strpl	r2, [r3, #0]
 8081fd4:	4b14      	ldr	r3, [pc, #80]	; (8082028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081fd6:	681a      	ldr	r2, [r3, #0]
 8081fd8:	07d0      	lsls	r0, r2, #31
 8081fda:	bf5c      	itt	pl
 8081fdc:	2201      	movpl	r2, #1
 8081fde:	601a      	strpl	r2, [r3, #0]
 8081fe0:	4b12      	ldr	r3, [pc, #72]	; (808202c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8081fe2:	681a      	ldr	r2, [r3, #0]
 8081fe4:	07d1      	lsls	r1, r2, #31
 8081fe6:	bf5c      	itt	pl
 8081fe8:	2201      	movpl	r2, #1
 8081fea:	601a      	strpl	r2, [r3, #0]
 8081fec:	4b10      	ldr	r3, [pc, #64]	; (8082030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8081fee:	681a      	ldr	r2, [r3, #0]
 8081ff0:	07d2      	lsls	r2, r2, #31
 8081ff2:	bf5c      	itt	pl
 8081ff4:	2201      	movpl	r2, #1
 8081ff6:	601a      	strpl	r2, [r3, #0]
 8081ff8:	4b0e      	ldr	r3, [pc, #56]	; (8082034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8081ffa:	681a      	ldr	r2, [r3, #0]
 8081ffc:	07d0      	lsls	r0, r2, #31
 8081ffe:	bf5c      	itt	pl
 8082000:	2201      	movpl	r2, #1
 8082002:	601a      	strpl	r2, [r3, #0]
 8082004:	4b0c      	ldr	r3, [pc, #48]	; (8082038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8082006:	681a      	ldr	r2, [r3, #0]
 8082008:	07d1      	lsls	r1, r2, #31
 808200a:	bf5c      	itt	pl
 808200c:	2201      	movpl	r2, #1
 808200e:	601a      	strpl	r2, [r3, #0]
 8082010:	4b0a      	ldr	r3, [pc, #40]	; (808203c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082012:	681a      	ldr	r2, [r3, #0]
 8082014:	07d2      	lsls	r2, r2, #31
 8082016:	bf5c      	itt	pl
 8082018:	2201      	movpl	r2, #1
 808201a:	601a      	strpl	r2, [r3, #0]
 808201c:	4770      	bx	lr
 808201e:	bf00      	nop
 8082020:	20000768 	.word	0x20000768
 8082024:	20000764 	.word	0x20000764
 8082028:	20000760 	.word	0x20000760
 808202c:	2000075c 	.word	0x2000075c
 8082030:	20000758 	.word	0x20000758
 8082034:	20000754 	.word	0x20000754
 8082038:	20000750 	.word	0x20000750
 808203c:	2000074c 	.word	0x2000074c

08082040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8082040:	4b24      	ldr	r3, [pc, #144]	; (80820d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8082042:	681a      	ldr	r2, [r3, #0]
 8082044:	07d0      	lsls	r0, r2, #31
 8082046:	bf5c      	itt	pl
 8082048:	2201      	movpl	r2, #1
 808204a:	601a      	strpl	r2, [r3, #0]
 808204c:	4b22      	ldr	r3, [pc, #136]	; (80820d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808204e:	681a      	ldr	r2, [r3, #0]
 8082050:	07d1      	lsls	r1, r2, #31
 8082052:	bf5c      	itt	pl
 8082054:	2201      	movpl	r2, #1
 8082056:	601a      	strpl	r2, [r3, #0]
 8082058:	4b20      	ldr	r3, [pc, #128]	; (80820dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808205a:	681a      	ldr	r2, [r3, #0]
 808205c:	07d2      	lsls	r2, r2, #31
 808205e:	bf5c      	itt	pl
 8082060:	2201      	movpl	r2, #1
 8082062:	601a      	strpl	r2, [r3, #0]
 8082064:	4b1e      	ldr	r3, [pc, #120]	; (80820e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8082066:	681a      	ldr	r2, [r3, #0]
 8082068:	07d0      	lsls	r0, r2, #31
 808206a:	bf5c      	itt	pl
 808206c:	2201      	movpl	r2, #1
 808206e:	601a      	strpl	r2, [r3, #0]
 8082070:	4b1c      	ldr	r3, [pc, #112]	; (80820e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8082072:	681a      	ldr	r2, [r3, #0]
 8082074:	07d1      	lsls	r1, r2, #31
 8082076:	bf5c      	itt	pl
 8082078:	2201      	movpl	r2, #1
 808207a:	601a      	strpl	r2, [r3, #0]
 808207c:	4b1a      	ldr	r3, [pc, #104]	; (80820e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808207e:	681a      	ldr	r2, [r3, #0]
 8082080:	07d2      	lsls	r2, r2, #31
 8082082:	bf5c      	itt	pl
 8082084:	2201      	movpl	r2, #1
 8082086:	601a      	strpl	r2, [r3, #0]
 8082088:	4b18      	ldr	r3, [pc, #96]	; (80820ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808208a:	681a      	ldr	r2, [r3, #0]
 808208c:	07d0      	lsls	r0, r2, #31
 808208e:	bf5c      	itt	pl
 8082090:	2201      	movpl	r2, #1
 8082092:	601a      	strpl	r2, [r3, #0]
 8082094:	4b16      	ldr	r3, [pc, #88]	; (80820f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8082096:	681a      	ldr	r2, [r3, #0]
 8082098:	07d1      	lsls	r1, r2, #31
 808209a:	bf5c      	itt	pl
 808209c:	2201      	movpl	r2, #1
 808209e:	601a      	strpl	r2, [r3, #0]
 80820a0:	4b14      	ldr	r3, [pc, #80]	; (80820f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80820a2:	681a      	ldr	r2, [r3, #0]
 80820a4:	07d2      	lsls	r2, r2, #31
 80820a6:	bf5c      	itt	pl
 80820a8:	2201      	movpl	r2, #1
 80820aa:	601a      	strpl	r2, [r3, #0]
 80820ac:	4b12      	ldr	r3, [pc, #72]	; (80820f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80820ae:	681a      	ldr	r2, [r3, #0]
 80820b0:	07d0      	lsls	r0, r2, #31
 80820b2:	bf5c      	itt	pl
 80820b4:	2201      	movpl	r2, #1
 80820b6:	601a      	strpl	r2, [r3, #0]
 80820b8:	4b10      	ldr	r3, [pc, #64]	; (80820fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80820ba:	681a      	ldr	r2, [r3, #0]
 80820bc:	07d1      	lsls	r1, r2, #31
 80820be:	bf5c      	itt	pl
 80820c0:	2201      	movpl	r2, #1
 80820c2:	601a      	strpl	r2, [r3, #0]
 80820c4:	4b0e      	ldr	r3, [pc, #56]	; (8082100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80820c6:	681a      	ldr	r2, [r3, #0]
 80820c8:	07d2      	lsls	r2, r2, #31
 80820ca:	bf5c      	itt	pl
 80820cc:	2201      	movpl	r2, #1
 80820ce:	601a      	strpl	r2, [r3, #0]
 80820d0:	4770      	bx	lr
 80820d2:	bf00      	nop
 80820d4:	20000798 	.word	0x20000798
 80820d8:	20000794 	.word	0x20000794
 80820dc:	20000790 	.word	0x20000790
 80820e0:	2000078c 	.word	0x2000078c
 80820e4:	20000788 	.word	0x20000788
 80820e8:	20000784 	.word	0x20000784
 80820ec:	20000780 	.word	0x20000780
 80820f0:	2000077c 	.word	0x2000077c
 80820f4:	20000778 	.word	0x20000778
 80820f8:	20000774 	.word	0x20000774
 80820fc:	20000770 	.word	0x20000770
 8082100:	2000076c 	.word	0x2000076c

08082104 <__aeabi_drsub>:
 8082104:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8082108:	e002      	b.n	8082110 <__adddf3>
 808210a:	bf00      	nop

0808210c <__aeabi_dsub>:
 808210c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08082110 <__adddf3>:
 8082110:	b530      	push	{r4, r5, lr}
 8082112:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8082116:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808211a:	ea94 0f05 	teq	r4, r5
 808211e:	bf08      	it	eq
 8082120:	ea90 0f02 	teqeq	r0, r2
 8082124:	bf1f      	itttt	ne
 8082126:	ea54 0c00 	orrsne.w	ip, r4, r0
 808212a:	ea55 0c02 	orrsne.w	ip, r5, r2
 808212e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8082132:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082136:	f000 80e2 	beq.w	80822fe <__adddf3+0x1ee>
 808213a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808213e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8082142:	bfb8      	it	lt
 8082144:	426d      	neglt	r5, r5
 8082146:	dd0c      	ble.n	8082162 <__adddf3+0x52>
 8082148:	442c      	add	r4, r5
 808214a:	ea80 0202 	eor.w	r2, r0, r2
 808214e:	ea81 0303 	eor.w	r3, r1, r3
 8082152:	ea82 0000 	eor.w	r0, r2, r0
 8082156:	ea83 0101 	eor.w	r1, r3, r1
 808215a:	ea80 0202 	eor.w	r2, r0, r2
 808215e:	ea81 0303 	eor.w	r3, r1, r3
 8082162:	2d36      	cmp	r5, #54	; 0x36
 8082164:	bf88      	it	hi
 8082166:	bd30      	pophi	{r4, r5, pc}
 8082168:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808216c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8082170:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8082174:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8082178:	d002      	beq.n	8082180 <__adddf3+0x70>
 808217a:	4240      	negs	r0, r0
 808217c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082180:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8082184:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082188:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808218c:	d002      	beq.n	8082194 <__adddf3+0x84>
 808218e:	4252      	negs	r2, r2
 8082190:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8082194:	ea94 0f05 	teq	r4, r5
 8082198:	f000 80a7 	beq.w	80822ea <__adddf3+0x1da>
 808219c:	f1a4 0401 	sub.w	r4, r4, #1
 80821a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80821a4:	db0d      	blt.n	80821c2 <__adddf3+0xb2>
 80821a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80821aa:	fa22 f205 	lsr.w	r2, r2, r5
 80821ae:	1880      	adds	r0, r0, r2
 80821b0:	f141 0100 	adc.w	r1, r1, #0
 80821b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80821b8:	1880      	adds	r0, r0, r2
 80821ba:	fa43 f305 	asr.w	r3, r3, r5
 80821be:	4159      	adcs	r1, r3
 80821c0:	e00e      	b.n	80821e0 <__adddf3+0xd0>
 80821c2:	f1a5 0520 	sub.w	r5, r5, #32
 80821c6:	f10e 0e20 	add.w	lr, lr, #32
 80821ca:	2a01      	cmp	r2, #1
 80821cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80821d0:	bf28      	it	cs
 80821d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80821d6:	fa43 f305 	asr.w	r3, r3, r5
 80821da:	18c0      	adds	r0, r0, r3
 80821dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80821e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80821e4:	d507      	bpl.n	80821f6 <__adddf3+0xe6>
 80821e6:	f04f 0e00 	mov.w	lr, #0
 80821ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80821ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80821f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80821f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80821fa:	d31b      	bcc.n	8082234 <__adddf3+0x124>
 80821fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8082200:	d30c      	bcc.n	808221c <__adddf3+0x10c>
 8082202:	0849      	lsrs	r1, r1, #1
 8082204:	ea5f 0030 	movs.w	r0, r0, rrx
 8082208:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808220c:	f104 0401 	add.w	r4, r4, #1
 8082210:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8082214:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8082218:	f080 809a 	bcs.w	8082350 <__adddf3+0x240>
 808221c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082220:	bf08      	it	eq
 8082222:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082226:	f150 0000 	adcs.w	r0, r0, #0
 808222a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808222e:	ea41 0105 	orr.w	r1, r1, r5
 8082232:	bd30      	pop	{r4, r5, pc}
 8082234:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8082238:	4140      	adcs	r0, r0
 808223a:	eb41 0101 	adc.w	r1, r1, r1
 808223e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082242:	f1a4 0401 	sub.w	r4, r4, #1
 8082246:	d1e9      	bne.n	808221c <__adddf3+0x10c>
 8082248:	f091 0f00 	teq	r1, #0
 808224c:	bf04      	itt	eq
 808224e:	4601      	moveq	r1, r0
 8082250:	2000      	moveq	r0, #0
 8082252:	fab1 f381 	clz	r3, r1
 8082256:	bf08      	it	eq
 8082258:	3320      	addeq	r3, #32
 808225a:	f1a3 030b 	sub.w	r3, r3, #11
 808225e:	f1b3 0220 	subs.w	r2, r3, #32
 8082262:	da0c      	bge.n	808227e <__adddf3+0x16e>
 8082264:	320c      	adds	r2, #12
 8082266:	dd08      	ble.n	808227a <__adddf3+0x16a>
 8082268:	f102 0c14 	add.w	ip, r2, #20
 808226c:	f1c2 020c 	rsb	r2, r2, #12
 8082270:	fa01 f00c 	lsl.w	r0, r1, ip
 8082274:	fa21 f102 	lsr.w	r1, r1, r2
 8082278:	e00c      	b.n	8082294 <__adddf3+0x184>
 808227a:	f102 0214 	add.w	r2, r2, #20
 808227e:	bfd8      	it	le
 8082280:	f1c2 0c20 	rsble	ip, r2, #32
 8082284:	fa01 f102 	lsl.w	r1, r1, r2
 8082288:	fa20 fc0c 	lsr.w	ip, r0, ip
 808228c:	bfdc      	itt	le
 808228e:	ea41 010c 	orrle.w	r1, r1, ip
 8082292:	4090      	lslle	r0, r2
 8082294:	1ae4      	subs	r4, r4, r3
 8082296:	bfa2      	ittt	ge
 8082298:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808229c:	4329      	orrge	r1, r5
 808229e:	bd30      	popge	{r4, r5, pc}
 80822a0:	ea6f 0404 	mvn.w	r4, r4
 80822a4:	3c1f      	subs	r4, #31
 80822a6:	da1c      	bge.n	80822e2 <__adddf3+0x1d2>
 80822a8:	340c      	adds	r4, #12
 80822aa:	dc0e      	bgt.n	80822ca <__adddf3+0x1ba>
 80822ac:	f104 0414 	add.w	r4, r4, #20
 80822b0:	f1c4 0220 	rsb	r2, r4, #32
 80822b4:	fa20 f004 	lsr.w	r0, r0, r4
 80822b8:	fa01 f302 	lsl.w	r3, r1, r2
 80822bc:	ea40 0003 	orr.w	r0, r0, r3
 80822c0:	fa21 f304 	lsr.w	r3, r1, r4
 80822c4:	ea45 0103 	orr.w	r1, r5, r3
 80822c8:	bd30      	pop	{r4, r5, pc}
 80822ca:	f1c4 040c 	rsb	r4, r4, #12
 80822ce:	f1c4 0220 	rsb	r2, r4, #32
 80822d2:	fa20 f002 	lsr.w	r0, r0, r2
 80822d6:	fa01 f304 	lsl.w	r3, r1, r4
 80822da:	ea40 0003 	orr.w	r0, r0, r3
 80822de:	4629      	mov	r1, r5
 80822e0:	bd30      	pop	{r4, r5, pc}
 80822e2:	fa21 f004 	lsr.w	r0, r1, r4
 80822e6:	4629      	mov	r1, r5
 80822e8:	bd30      	pop	{r4, r5, pc}
 80822ea:	f094 0f00 	teq	r4, #0
 80822ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80822f2:	bf06      	itte	eq
 80822f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80822f8:	3401      	addeq	r4, #1
 80822fa:	3d01      	subne	r5, #1
 80822fc:	e74e      	b.n	808219c <__adddf3+0x8c>
 80822fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082302:	bf18      	it	ne
 8082304:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082308:	d029      	beq.n	808235e <__adddf3+0x24e>
 808230a:	ea94 0f05 	teq	r4, r5
 808230e:	bf08      	it	eq
 8082310:	ea90 0f02 	teqeq	r0, r2
 8082314:	d005      	beq.n	8082322 <__adddf3+0x212>
 8082316:	ea54 0c00 	orrs.w	ip, r4, r0
 808231a:	bf04      	itt	eq
 808231c:	4619      	moveq	r1, r3
 808231e:	4610      	moveq	r0, r2
 8082320:	bd30      	pop	{r4, r5, pc}
 8082322:	ea91 0f03 	teq	r1, r3
 8082326:	bf1e      	ittt	ne
 8082328:	2100      	movne	r1, #0
 808232a:	2000      	movne	r0, #0
 808232c:	bd30      	popne	{r4, r5, pc}
 808232e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8082332:	d105      	bne.n	8082340 <__adddf3+0x230>
 8082334:	0040      	lsls	r0, r0, #1
 8082336:	4149      	adcs	r1, r1
 8082338:	bf28      	it	cs
 808233a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808233e:	bd30      	pop	{r4, r5, pc}
 8082340:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8082344:	bf3c      	itt	cc
 8082346:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808234a:	bd30      	popcc	{r4, r5, pc}
 808234c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082350:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8082354:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8082358:	f04f 0000 	mov.w	r0, #0
 808235c:	bd30      	pop	{r4, r5, pc}
 808235e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082362:	bf1a      	itte	ne
 8082364:	4619      	movne	r1, r3
 8082366:	4610      	movne	r0, r2
 8082368:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808236c:	bf1c      	itt	ne
 808236e:	460b      	movne	r3, r1
 8082370:	4602      	movne	r2, r0
 8082372:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8082376:	bf06      	itte	eq
 8082378:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808237c:	ea91 0f03 	teqeq	r1, r3
 8082380:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8082384:	bd30      	pop	{r4, r5, pc}
 8082386:	bf00      	nop

08082388 <__aeabi_ui2d>:
 8082388:	f090 0f00 	teq	r0, #0
 808238c:	bf04      	itt	eq
 808238e:	2100      	moveq	r1, #0
 8082390:	4770      	bxeq	lr
 8082392:	b530      	push	{r4, r5, lr}
 8082394:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082398:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808239c:	f04f 0500 	mov.w	r5, #0
 80823a0:	f04f 0100 	mov.w	r1, #0
 80823a4:	e750      	b.n	8082248 <__adddf3+0x138>
 80823a6:	bf00      	nop

080823a8 <__aeabi_i2d>:
 80823a8:	f090 0f00 	teq	r0, #0
 80823ac:	bf04      	itt	eq
 80823ae:	2100      	moveq	r1, #0
 80823b0:	4770      	bxeq	lr
 80823b2:	b530      	push	{r4, r5, lr}
 80823b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80823b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80823bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80823c0:	bf48      	it	mi
 80823c2:	4240      	negmi	r0, r0
 80823c4:	f04f 0100 	mov.w	r1, #0
 80823c8:	e73e      	b.n	8082248 <__adddf3+0x138>
 80823ca:	bf00      	nop

080823cc <__aeabi_f2d>:
 80823cc:	0042      	lsls	r2, r0, #1
 80823ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80823d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80823d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80823da:	bf1f      	itttt	ne
 80823dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80823e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80823e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80823e8:	4770      	bxne	lr
 80823ea:	f092 0f00 	teq	r2, #0
 80823ee:	bf14      	ite	ne
 80823f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80823f4:	4770      	bxeq	lr
 80823f6:	b530      	push	{r4, r5, lr}
 80823f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80823fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082400:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8082404:	e720      	b.n	8082248 <__adddf3+0x138>
 8082406:	bf00      	nop

08082408 <__aeabi_ul2d>:
 8082408:	ea50 0201 	orrs.w	r2, r0, r1
 808240c:	bf08      	it	eq
 808240e:	4770      	bxeq	lr
 8082410:	b530      	push	{r4, r5, lr}
 8082412:	f04f 0500 	mov.w	r5, #0
 8082416:	e00a      	b.n	808242e <__aeabi_l2d+0x16>

08082418 <__aeabi_l2d>:
 8082418:	ea50 0201 	orrs.w	r2, r0, r1
 808241c:	bf08      	it	eq
 808241e:	4770      	bxeq	lr
 8082420:	b530      	push	{r4, r5, lr}
 8082422:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8082426:	d502      	bpl.n	808242e <__aeabi_l2d+0x16>
 8082428:	4240      	negs	r0, r0
 808242a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808242e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082432:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082436:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808243a:	f43f aedc 	beq.w	80821f6 <__adddf3+0xe6>
 808243e:	f04f 0203 	mov.w	r2, #3
 8082442:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8082446:	bf18      	it	ne
 8082448:	3203      	addne	r2, #3
 808244a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808244e:	bf18      	it	ne
 8082450:	3203      	addne	r2, #3
 8082452:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8082456:	f1c2 0320 	rsb	r3, r2, #32
 808245a:	fa00 fc03 	lsl.w	ip, r0, r3
 808245e:	fa20 f002 	lsr.w	r0, r0, r2
 8082462:	fa01 fe03 	lsl.w	lr, r1, r3
 8082466:	ea40 000e 	orr.w	r0, r0, lr
 808246a:	fa21 f102 	lsr.w	r1, r1, r2
 808246e:	4414      	add	r4, r2
 8082470:	e6c1      	b.n	80821f6 <__adddf3+0xe6>
 8082472:	bf00      	nop

08082474 <__aeabi_dmul>:
 8082474:	b570      	push	{r4, r5, r6, lr}
 8082476:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808247a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808247e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8082482:	bf1d      	ittte	ne
 8082484:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8082488:	ea94 0f0c 	teqne	r4, ip
 808248c:	ea95 0f0c 	teqne	r5, ip
 8082490:	f000 f8de 	bleq	8082650 <__aeabi_dmul+0x1dc>
 8082494:	442c      	add	r4, r5
 8082496:	ea81 0603 	eor.w	r6, r1, r3
 808249a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808249e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80824a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80824a6:	bf18      	it	ne
 80824a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80824ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80824b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80824b4:	d038      	beq.n	8082528 <__aeabi_dmul+0xb4>
 80824b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80824ba:	f04f 0500 	mov.w	r5, #0
 80824be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80824c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80824c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80824ca:	f04f 0600 	mov.w	r6, #0
 80824ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80824d2:	f09c 0f00 	teq	ip, #0
 80824d6:	bf18      	it	ne
 80824d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80824dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80824e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80824e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80824e8:	d204      	bcs.n	80824f4 <__aeabi_dmul+0x80>
 80824ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80824ee:	416d      	adcs	r5, r5
 80824f0:	eb46 0606 	adc.w	r6, r6, r6
 80824f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80824f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80824fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8082500:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8082504:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8082508:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808250c:	bf88      	it	hi
 808250e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082512:	d81e      	bhi.n	8082552 <__aeabi_dmul+0xde>
 8082514:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8082518:	bf08      	it	eq
 808251a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808251e:	f150 0000 	adcs.w	r0, r0, #0
 8082522:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082526:	bd70      	pop	{r4, r5, r6, pc}
 8082528:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808252c:	ea46 0101 	orr.w	r1, r6, r1
 8082530:	ea40 0002 	orr.w	r0, r0, r2
 8082534:	ea81 0103 	eor.w	r1, r1, r3
 8082538:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808253c:	bfc2      	ittt	gt
 808253e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8082542:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8082546:	bd70      	popgt	{r4, r5, r6, pc}
 8082548:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808254c:	f04f 0e00 	mov.w	lr, #0
 8082550:	3c01      	subs	r4, #1
 8082552:	f300 80ab 	bgt.w	80826ac <__aeabi_dmul+0x238>
 8082556:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808255a:	bfde      	ittt	le
 808255c:	2000      	movle	r0, #0
 808255e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8082562:	bd70      	pople	{r4, r5, r6, pc}
 8082564:	f1c4 0400 	rsb	r4, r4, #0
 8082568:	3c20      	subs	r4, #32
 808256a:	da35      	bge.n	80825d8 <__aeabi_dmul+0x164>
 808256c:	340c      	adds	r4, #12
 808256e:	dc1b      	bgt.n	80825a8 <__aeabi_dmul+0x134>
 8082570:	f104 0414 	add.w	r4, r4, #20
 8082574:	f1c4 0520 	rsb	r5, r4, #32
 8082578:	fa00 f305 	lsl.w	r3, r0, r5
 808257c:	fa20 f004 	lsr.w	r0, r0, r4
 8082580:	fa01 f205 	lsl.w	r2, r1, r5
 8082584:	ea40 0002 	orr.w	r0, r0, r2
 8082588:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808258c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8082590:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8082594:	fa21 f604 	lsr.w	r6, r1, r4
 8082598:	eb42 0106 	adc.w	r1, r2, r6
 808259c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80825a0:	bf08      	it	eq
 80825a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80825a6:	bd70      	pop	{r4, r5, r6, pc}
 80825a8:	f1c4 040c 	rsb	r4, r4, #12
 80825ac:	f1c4 0520 	rsb	r5, r4, #32
 80825b0:	fa00 f304 	lsl.w	r3, r0, r4
 80825b4:	fa20 f005 	lsr.w	r0, r0, r5
 80825b8:	fa01 f204 	lsl.w	r2, r1, r4
 80825bc:	ea40 0002 	orr.w	r0, r0, r2
 80825c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80825c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80825c8:	f141 0100 	adc.w	r1, r1, #0
 80825cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80825d0:	bf08      	it	eq
 80825d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80825d6:	bd70      	pop	{r4, r5, r6, pc}
 80825d8:	f1c4 0520 	rsb	r5, r4, #32
 80825dc:	fa00 f205 	lsl.w	r2, r0, r5
 80825e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80825e4:	fa20 f304 	lsr.w	r3, r0, r4
 80825e8:	fa01 f205 	lsl.w	r2, r1, r5
 80825ec:	ea43 0302 	orr.w	r3, r3, r2
 80825f0:	fa21 f004 	lsr.w	r0, r1, r4
 80825f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80825f8:	fa21 f204 	lsr.w	r2, r1, r4
 80825fc:	ea20 0002 	bic.w	r0, r0, r2
 8082600:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8082604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8082608:	bf08      	it	eq
 808260a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808260e:	bd70      	pop	{r4, r5, r6, pc}
 8082610:	f094 0f00 	teq	r4, #0
 8082614:	d10f      	bne.n	8082636 <__aeabi_dmul+0x1c2>
 8082616:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808261a:	0040      	lsls	r0, r0, #1
 808261c:	eb41 0101 	adc.w	r1, r1, r1
 8082620:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082624:	bf08      	it	eq
 8082626:	3c01      	subeq	r4, #1
 8082628:	d0f7      	beq.n	808261a <__aeabi_dmul+0x1a6>
 808262a:	ea41 0106 	orr.w	r1, r1, r6
 808262e:	f095 0f00 	teq	r5, #0
 8082632:	bf18      	it	ne
 8082634:	4770      	bxne	lr
 8082636:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808263a:	0052      	lsls	r2, r2, #1
 808263c:	eb43 0303 	adc.w	r3, r3, r3
 8082640:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8082644:	bf08      	it	eq
 8082646:	3d01      	subeq	r5, #1
 8082648:	d0f7      	beq.n	808263a <__aeabi_dmul+0x1c6>
 808264a:	ea43 0306 	orr.w	r3, r3, r6
 808264e:	4770      	bx	lr
 8082650:	ea94 0f0c 	teq	r4, ip
 8082654:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8082658:	bf18      	it	ne
 808265a:	ea95 0f0c 	teqne	r5, ip
 808265e:	d00c      	beq.n	808267a <__aeabi_dmul+0x206>
 8082660:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8082664:	bf18      	it	ne
 8082666:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808266a:	d1d1      	bne.n	8082610 <__aeabi_dmul+0x19c>
 808266c:	ea81 0103 	eor.w	r1, r1, r3
 8082670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082674:	f04f 0000 	mov.w	r0, #0
 8082678:	bd70      	pop	{r4, r5, r6, pc}
 808267a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808267e:	bf06      	itte	eq
 8082680:	4610      	moveq	r0, r2
 8082682:	4619      	moveq	r1, r3
 8082684:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082688:	d019      	beq.n	80826be <__aeabi_dmul+0x24a>
 808268a:	ea94 0f0c 	teq	r4, ip
 808268e:	d102      	bne.n	8082696 <__aeabi_dmul+0x222>
 8082690:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8082694:	d113      	bne.n	80826be <__aeabi_dmul+0x24a>
 8082696:	ea95 0f0c 	teq	r5, ip
 808269a:	d105      	bne.n	80826a8 <__aeabi_dmul+0x234>
 808269c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80826a0:	bf1c      	itt	ne
 80826a2:	4610      	movne	r0, r2
 80826a4:	4619      	movne	r1, r3
 80826a6:	d10a      	bne.n	80826be <__aeabi_dmul+0x24a>
 80826a8:	ea81 0103 	eor.w	r1, r1, r3
 80826ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80826b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80826b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80826b8:	f04f 0000 	mov.w	r0, #0
 80826bc:	bd70      	pop	{r4, r5, r6, pc}
 80826be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80826c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80826c6:	bd70      	pop	{r4, r5, r6, pc}

080826c8 <__aeabi_ddiv>:
 80826c8:	b570      	push	{r4, r5, r6, lr}
 80826ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80826ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80826d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80826d6:	bf1d      	ittte	ne
 80826d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80826dc:	ea94 0f0c 	teqne	r4, ip
 80826e0:	ea95 0f0c 	teqne	r5, ip
 80826e4:	f000 f8a7 	bleq	8082836 <__aeabi_ddiv+0x16e>
 80826e8:	eba4 0405 	sub.w	r4, r4, r5
 80826ec:	ea81 0e03 	eor.w	lr, r1, r3
 80826f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80826f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80826f8:	f000 8088 	beq.w	808280c <__aeabi_ddiv+0x144>
 80826fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082700:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8082704:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8082708:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808270c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8082710:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8082714:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8082718:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808271c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8082720:	429d      	cmp	r5, r3
 8082722:	bf08      	it	eq
 8082724:	4296      	cmpeq	r6, r2
 8082726:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808272a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808272e:	d202      	bcs.n	8082736 <__aeabi_ddiv+0x6e>
 8082730:	085b      	lsrs	r3, r3, #1
 8082732:	ea4f 0232 	mov.w	r2, r2, rrx
 8082736:	1ab6      	subs	r6, r6, r2
 8082738:	eb65 0503 	sbc.w	r5, r5, r3
 808273c:	085b      	lsrs	r3, r3, #1
 808273e:	ea4f 0232 	mov.w	r2, r2, rrx
 8082742:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8082746:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808274a:	ebb6 0e02 	subs.w	lr, r6, r2
 808274e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082752:	bf22      	ittt	cs
 8082754:	1ab6      	subcs	r6, r6, r2
 8082756:	4675      	movcs	r5, lr
 8082758:	ea40 000c 	orrcs.w	r0, r0, ip
 808275c:	085b      	lsrs	r3, r3, #1
 808275e:	ea4f 0232 	mov.w	r2, r2, rrx
 8082762:	ebb6 0e02 	subs.w	lr, r6, r2
 8082766:	eb75 0e03 	sbcs.w	lr, r5, r3
 808276a:	bf22      	ittt	cs
 808276c:	1ab6      	subcs	r6, r6, r2
 808276e:	4675      	movcs	r5, lr
 8082770:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8082774:	085b      	lsrs	r3, r3, #1
 8082776:	ea4f 0232 	mov.w	r2, r2, rrx
 808277a:	ebb6 0e02 	subs.w	lr, r6, r2
 808277e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082782:	bf22      	ittt	cs
 8082784:	1ab6      	subcs	r6, r6, r2
 8082786:	4675      	movcs	r5, lr
 8082788:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808278c:	085b      	lsrs	r3, r3, #1
 808278e:	ea4f 0232 	mov.w	r2, r2, rrx
 8082792:	ebb6 0e02 	subs.w	lr, r6, r2
 8082796:	eb75 0e03 	sbcs.w	lr, r5, r3
 808279a:	bf22      	ittt	cs
 808279c:	1ab6      	subcs	r6, r6, r2
 808279e:	4675      	movcs	r5, lr
 80827a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80827a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80827a8:	d018      	beq.n	80827dc <__aeabi_ddiv+0x114>
 80827aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80827ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80827b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80827b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80827ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80827be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80827c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80827c6:	d1c0      	bne.n	808274a <__aeabi_ddiv+0x82>
 80827c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80827cc:	d10b      	bne.n	80827e6 <__aeabi_ddiv+0x11e>
 80827ce:	ea41 0100 	orr.w	r1, r1, r0
 80827d2:	f04f 0000 	mov.w	r0, #0
 80827d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80827da:	e7b6      	b.n	808274a <__aeabi_ddiv+0x82>
 80827dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80827e0:	bf04      	itt	eq
 80827e2:	4301      	orreq	r1, r0
 80827e4:	2000      	moveq	r0, #0
 80827e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80827ea:	bf88      	it	hi
 80827ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80827f0:	f63f aeaf 	bhi.w	8082552 <__aeabi_dmul+0xde>
 80827f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80827f8:	bf04      	itt	eq
 80827fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80827fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082802:	f150 0000 	adcs.w	r0, r0, #0
 8082806:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808280a:	bd70      	pop	{r4, r5, r6, pc}
 808280c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8082810:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8082814:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8082818:	bfc2      	ittt	gt
 808281a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808281e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8082822:	bd70      	popgt	{r4, r5, r6, pc}
 8082824:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082828:	f04f 0e00 	mov.w	lr, #0
 808282c:	3c01      	subs	r4, #1
 808282e:	e690      	b.n	8082552 <__aeabi_dmul+0xde>
 8082830:	ea45 0e06 	orr.w	lr, r5, r6
 8082834:	e68d      	b.n	8082552 <__aeabi_dmul+0xde>
 8082836:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808283a:	ea94 0f0c 	teq	r4, ip
 808283e:	bf08      	it	eq
 8082840:	ea95 0f0c 	teqeq	r5, ip
 8082844:	f43f af3b 	beq.w	80826be <__aeabi_dmul+0x24a>
 8082848:	ea94 0f0c 	teq	r4, ip
 808284c:	d10a      	bne.n	8082864 <__aeabi_ddiv+0x19c>
 808284e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8082852:	f47f af34 	bne.w	80826be <__aeabi_dmul+0x24a>
 8082856:	ea95 0f0c 	teq	r5, ip
 808285a:	f47f af25 	bne.w	80826a8 <__aeabi_dmul+0x234>
 808285e:	4610      	mov	r0, r2
 8082860:	4619      	mov	r1, r3
 8082862:	e72c      	b.n	80826be <__aeabi_dmul+0x24a>
 8082864:	ea95 0f0c 	teq	r5, ip
 8082868:	d106      	bne.n	8082878 <__aeabi_ddiv+0x1b0>
 808286a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808286e:	f43f aefd 	beq.w	808266c <__aeabi_dmul+0x1f8>
 8082872:	4610      	mov	r0, r2
 8082874:	4619      	mov	r1, r3
 8082876:	e722      	b.n	80826be <__aeabi_dmul+0x24a>
 8082878:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808287c:	bf18      	it	ne
 808287e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082882:	f47f aec5 	bne.w	8082610 <__aeabi_dmul+0x19c>
 8082886:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808288a:	f47f af0d 	bne.w	80826a8 <__aeabi_dmul+0x234>
 808288e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8082892:	f47f aeeb 	bne.w	808266c <__aeabi_dmul+0x1f8>
 8082896:	e712      	b.n	80826be <__aeabi_dmul+0x24a>

08082898 <__gedf2>:
 8082898:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 808289c:	e006      	b.n	80828ac <__cmpdf2+0x4>
 808289e:	bf00      	nop

080828a0 <__ledf2>:
 80828a0:	f04f 0c01 	mov.w	ip, #1
 80828a4:	e002      	b.n	80828ac <__cmpdf2+0x4>
 80828a6:	bf00      	nop

080828a8 <__cmpdf2>:
 80828a8:	f04f 0c01 	mov.w	ip, #1
 80828ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80828b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80828b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80828b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80828bc:	bf18      	it	ne
 80828be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80828c2:	d01b      	beq.n	80828fc <__cmpdf2+0x54>
 80828c4:	b001      	add	sp, #4
 80828c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80828ca:	bf0c      	ite	eq
 80828cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80828d0:	ea91 0f03 	teqne	r1, r3
 80828d4:	bf02      	ittt	eq
 80828d6:	ea90 0f02 	teqeq	r0, r2
 80828da:	2000      	moveq	r0, #0
 80828dc:	4770      	bxeq	lr
 80828de:	f110 0f00 	cmn.w	r0, #0
 80828e2:	ea91 0f03 	teq	r1, r3
 80828e6:	bf58      	it	pl
 80828e8:	4299      	cmppl	r1, r3
 80828ea:	bf08      	it	eq
 80828ec:	4290      	cmpeq	r0, r2
 80828ee:	bf2c      	ite	cs
 80828f0:	17d8      	asrcs	r0, r3, #31
 80828f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80828f6:	f040 0001 	orr.w	r0, r0, #1
 80828fa:	4770      	bx	lr
 80828fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8082900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082904:	d102      	bne.n	808290c <__cmpdf2+0x64>
 8082906:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808290a:	d107      	bne.n	808291c <__cmpdf2+0x74>
 808290c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8082910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082914:	d1d6      	bne.n	80828c4 <__cmpdf2+0x1c>
 8082916:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808291a:	d0d3      	beq.n	80828c4 <__cmpdf2+0x1c>
 808291c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8082920:	4770      	bx	lr
 8082922:	bf00      	nop

08082924 <__aeabi_cdrcmple>:
 8082924:	4684      	mov	ip, r0
 8082926:	4610      	mov	r0, r2
 8082928:	4662      	mov	r2, ip
 808292a:	468c      	mov	ip, r1
 808292c:	4619      	mov	r1, r3
 808292e:	4663      	mov	r3, ip
 8082930:	e000      	b.n	8082934 <__aeabi_cdcmpeq>
 8082932:	bf00      	nop

08082934 <__aeabi_cdcmpeq>:
 8082934:	b501      	push	{r0, lr}
 8082936:	f7ff ffb7 	bl	80828a8 <__cmpdf2>
 808293a:	2800      	cmp	r0, #0
 808293c:	bf48      	it	mi
 808293e:	f110 0f00 	cmnmi.w	r0, #0
 8082942:	bd01      	pop	{r0, pc}

08082944 <__aeabi_dcmpeq>:
 8082944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082948:	f7ff fff4 	bl	8082934 <__aeabi_cdcmpeq>
 808294c:	bf0c      	ite	eq
 808294e:	2001      	moveq	r0, #1
 8082950:	2000      	movne	r0, #0
 8082952:	f85d fb08 	ldr.w	pc, [sp], #8
 8082956:	bf00      	nop

08082958 <__aeabi_dcmplt>:
 8082958:	f84d ed08 	str.w	lr, [sp, #-8]!
 808295c:	f7ff ffea 	bl	8082934 <__aeabi_cdcmpeq>
 8082960:	bf34      	ite	cc
 8082962:	2001      	movcc	r0, #1
 8082964:	2000      	movcs	r0, #0
 8082966:	f85d fb08 	ldr.w	pc, [sp], #8
 808296a:	bf00      	nop

0808296c <__aeabi_dcmple>:
 808296c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082970:	f7ff ffe0 	bl	8082934 <__aeabi_cdcmpeq>
 8082974:	bf94      	ite	ls
 8082976:	2001      	movls	r0, #1
 8082978:	2000      	movhi	r0, #0
 808297a:	f85d fb08 	ldr.w	pc, [sp], #8
 808297e:	bf00      	nop

08082980 <__aeabi_dcmpge>:
 8082980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082984:	f7ff ffce 	bl	8082924 <__aeabi_cdrcmple>
 8082988:	bf94      	ite	ls
 808298a:	2001      	movls	r0, #1
 808298c:	2000      	movhi	r0, #0
 808298e:	f85d fb08 	ldr.w	pc, [sp], #8
 8082992:	bf00      	nop

08082994 <__aeabi_dcmpgt>:
 8082994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082998:	f7ff ffc4 	bl	8082924 <__aeabi_cdrcmple>
 808299c:	bf34      	ite	cc
 808299e:	2001      	movcc	r0, #1
 80829a0:	2000      	movcs	r0, #0
 80829a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80829a6:	bf00      	nop

080829a8 <__aeabi_dcmpun>:
 80829a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80829ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80829b0:	d102      	bne.n	80829b8 <__aeabi_dcmpun+0x10>
 80829b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80829b6:	d10a      	bne.n	80829ce <__aeabi_dcmpun+0x26>
 80829b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80829bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80829c0:	d102      	bne.n	80829c8 <__aeabi_dcmpun+0x20>
 80829c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80829c6:	d102      	bne.n	80829ce <__aeabi_dcmpun+0x26>
 80829c8:	f04f 0000 	mov.w	r0, #0
 80829cc:	4770      	bx	lr
 80829ce:	f04f 0001 	mov.w	r0, #1
 80829d2:	4770      	bx	lr

080829d4 <__aeabi_d2iz>:
 80829d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80829d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80829dc:	d215      	bcs.n	8082a0a <__aeabi_d2iz+0x36>
 80829de:	d511      	bpl.n	8082a04 <__aeabi_d2iz+0x30>
 80829e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80829e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80829e8:	d912      	bls.n	8082a10 <__aeabi_d2iz+0x3c>
 80829ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80829ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80829f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80829f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80829fa:	fa23 f002 	lsr.w	r0, r3, r2
 80829fe:	bf18      	it	ne
 8082a00:	4240      	negne	r0, r0
 8082a02:	4770      	bx	lr
 8082a04:	f04f 0000 	mov.w	r0, #0
 8082a08:	4770      	bx	lr
 8082a0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8082a0e:	d105      	bne.n	8082a1c <__aeabi_d2iz+0x48>
 8082a10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8082a14:	bf08      	it	eq
 8082a16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8082a1a:	4770      	bx	lr
 8082a1c:	f04f 0000 	mov.w	r0, #0
 8082a20:	4770      	bx	lr
 8082a22:	bf00      	nop

08082a24 <__aeabi_d2uiz>:
 8082a24:	004a      	lsls	r2, r1, #1
 8082a26:	d211      	bcs.n	8082a4c <__aeabi_d2uiz+0x28>
 8082a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8082a2c:	d211      	bcs.n	8082a52 <__aeabi_d2uiz+0x2e>
 8082a2e:	d50d      	bpl.n	8082a4c <__aeabi_d2uiz+0x28>
 8082a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8082a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8082a38:	d40e      	bmi.n	8082a58 <__aeabi_d2uiz+0x34>
 8082a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8082a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8082a46:	fa23 f002 	lsr.w	r0, r3, r2
 8082a4a:	4770      	bx	lr
 8082a4c:	f04f 0000 	mov.w	r0, #0
 8082a50:	4770      	bx	lr
 8082a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8082a56:	d102      	bne.n	8082a5e <__aeabi_d2uiz+0x3a>
 8082a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8082a5c:	4770      	bx	lr
 8082a5e:	f04f 0000 	mov.w	r0, #0
 8082a62:	4770      	bx	lr

08082a64 <__aeabi_d2f>:
 8082a64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8082a68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8082a6c:	bf24      	itt	cs
 8082a6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8082a72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8082a76:	d90d      	bls.n	8082a94 <__aeabi_d2f+0x30>
 8082a78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8082a7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8082a80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8082a84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8082a88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8082a8c:	bf08      	it	eq
 8082a8e:	f020 0001 	biceq.w	r0, r0, #1
 8082a92:	4770      	bx	lr
 8082a94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8082a98:	d121      	bne.n	8082ade <__aeabi_d2f+0x7a>
 8082a9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8082a9e:	bfbc      	itt	lt
 8082aa0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8082aa4:	4770      	bxlt	lr
 8082aa6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082aaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8082aae:	f1c2 0218 	rsb	r2, r2, #24
 8082ab2:	f1c2 0c20 	rsb	ip, r2, #32
 8082ab6:	fa10 f30c 	lsls.w	r3, r0, ip
 8082aba:	fa20 f002 	lsr.w	r0, r0, r2
 8082abe:	bf18      	it	ne
 8082ac0:	f040 0001 	orrne.w	r0, r0, #1
 8082ac4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082ac8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8082acc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8082ad0:	ea40 000c 	orr.w	r0, r0, ip
 8082ad4:	fa23 f302 	lsr.w	r3, r3, r2
 8082ad8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8082adc:	e7cc      	b.n	8082a78 <__aeabi_d2f+0x14>
 8082ade:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8082ae2:	d107      	bne.n	8082af4 <__aeabi_d2f+0x90>
 8082ae4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8082ae8:	bf1e      	ittt	ne
 8082aea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8082aee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8082af2:	4770      	bxne	lr
 8082af4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8082af8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8082afc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082b00:	4770      	bx	lr
 8082b02:	bf00      	nop

08082b04 <__aeabi_frsub>:
 8082b04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8082b08:	e002      	b.n	8082b10 <__addsf3>
 8082b0a:	bf00      	nop

08082b0c <__aeabi_fsub>:
 8082b0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08082b10 <__addsf3>:
 8082b10:	0042      	lsls	r2, r0, #1
 8082b12:	bf1f      	itttt	ne
 8082b14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8082b18:	ea92 0f03 	teqne	r2, r3
 8082b1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8082b20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082b24:	d06a      	beq.n	8082bfc <__addsf3+0xec>
 8082b26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8082b2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8082b2e:	bfc1      	itttt	gt
 8082b30:	18d2      	addgt	r2, r2, r3
 8082b32:	4041      	eorgt	r1, r0
 8082b34:	4048      	eorgt	r0, r1
 8082b36:	4041      	eorgt	r1, r0
 8082b38:	bfb8      	it	lt
 8082b3a:	425b      	neglt	r3, r3
 8082b3c:	2b19      	cmp	r3, #25
 8082b3e:	bf88      	it	hi
 8082b40:	4770      	bxhi	lr
 8082b42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8082b46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082b4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8082b4e:	bf18      	it	ne
 8082b50:	4240      	negne	r0, r0
 8082b52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8082b56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8082b5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8082b5e:	bf18      	it	ne
 8082b60:	4249      	negne	r1, r1
 8082b62:	ea92 0f03 	teq	r2, r3
 8082b66:	d03f      	beq.n	8082be8 <__addsf3+0xd8>
 8082b68:	f1a2 0201 	sub.w	r2, r2, #1
 8082b6c:	fa41 fc03 	asr.w	ip, r1, r3
 8082b70:	eb10 000c 	adds.w	r0, r0, ip
 8082b74:	f1c3 0320 	rsb	r3, r3, #32
 8082b78:	fa01 f103 	lsl.w	r1, r1, r3
 8082b7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8082b80:	d502      	bpl.n	8082b88 <__addsf3+0x78>
 8082b82:	4249      	negs	r1, r1
 8082b84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8082b88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8082b8c:	d313      	bcc.n	8082bb6 <__addsf3+0xa6>
 8082b8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8082b92:	d306      	bcc.n	8082ba2 <__addsf3+0x92>
 8082b94:	0840      	lsrs	r0, r0, #1
 8082b96:	ea4f 0131 	mov.w	r1, r1, rrx
 8082b9a:	f102 0201 	add.w	r2, r2, #1
 8082b9e:	2afe      	cmp	r2, #254	; 0xfe
 8082ba0:	d251      	bcs.n	8082c46 <__addsf3+0x136>
 8082ba2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8082ba6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082baa:	bf08      	it	eq
 8082bac:	f020 0001 	biceq.w	r0, r0, #1
 8082bb0:	ea40 0003 	orr.w	r0, r0, r3
 8082bb4:	4770      	bx	lr
 8082bb6:	0049      	lsls	r1, r1, #1
 8082bb8:	eb40 0000 	adc.w	r0, r0, r0
 8082bbc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8082bc0:	f1a2 0201 	sub.w	r2, r2, #1
 8082bc4:	d1ed      	bne.n	8082ba2 <__addsf3+0x92>
 8082bc6:	fab0 fc80 	clz	ip, r0
 8082bca:	f1ac 0c08 	sub.w	ip, ip, #8
 8082bce:	ebb2 020c 	subs.w	r2, r2, ip
 8082bd2:	fa00 f00c 	lsl.w	r0, r0, ip
 8082bd6:	bfaa      	itet	ge
 8082bd8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8082bdc:	4252      	neglt	r2, r2
 8082bde:	4318      	orrge	r0, r3
 8082be0:	bfbc      	itt	lt
 8082be2:	40d0      	lsrlt	r0, r2
 8082be4:	4318      	orrlt	r0, r3
 8082be6:	4770      	bx	lr
 8082be8:	f092 0f00 	teq	r2, #0
 8082bec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8082bf0:	bf06      	itte	eq
 8082bf2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8082bf6:	3201      	addeq	r2, #1
 8082bf8:	3b01      	subne	r3, #1
 8082bfa:	e7b5      	b.n	8082b68 <__addsf3+0x58>
 8082bfc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082c00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8082c04:	bf18      	it	ne
 8082c06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082c0a:	d021      	beq.n	8082c50 <__addsf3+0x140>
 8082c0c:	ea92 0f03 	teq	r2, r3
 8082c10:	d004      	beq.n	8082c1c <__addsf3+0x10c>
 8082c12:	f092 0f00 	teq	r2, #0
 8082c16:	bf08      	it	eq
 8082c18:	4608      	moveq	r0, r1
 8082c1a:	4770      	bx	lr
 8082c1c:	ea90 0f01 	teq	r0, r1
 8082c20:	bf1c      	itt	ne
 8082c22:	2000      	movne	r0, #0
 8082c24:	4770      	bxne	lr
 8082c26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8082c2a:	d104      	bne.n	8082c36 <__addsf3+0x126>
 8082c2c:	0040      	lsls	r0, r0, #1
 8082c2e:	bf28      	it	cs
 8082c30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8082c34:	4770      	bx	lr
 8082c36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8082c3a:	bf3c      	itt	cc
 8082c3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8082c40:	4770      	bxcc	lr
 8082c42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8082c46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8082c4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082c4e:	4770      	bx	lr
 8082c50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8082c54:	bf16      	itet	ne
 8082c56:	4608      	movne	r0, r1
 8082c58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8082c5c:	4601      	movne	r1, r0
 8082c5e:	0242      	lsls	r2, r0, #9
 8082c60:	bf06      	itte	eq
 8082c62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8082c66:	ea90 0f01 	teqeq	r0, r1
 8082c6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8082c6e:	4770      	bx	lr

08082c70 <__aeabi_ui2f>:
 8082c70:	f04f 0300 	mov.w	r3, #0
 8082c74:	e004      	b.n	8082c80 <__aeabi_i2f+0x8>
 8082c76:	bf00      	nop

08082c78 <__aeabi_i2f>:
 8082c78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8082c7c:	bf48      	it	mi
 8082c7e:	4240      	negmi	r0, r0
 8082c80:	ea5f 0c00 	movs.w	ip, r0
 8082c84:	bf08      	it	eq
 8082c86:	4770      	bxeq	lr
 8082c88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8082c8c:	4601      	mov	r1, r0
 8082c8e:	f04f 0000 	mov.w	r0, #0
 8082c92:	e01c      	b.n	8082cce <__aeabi_l2f+0x2a>

08082c94 <__aeabi_ul2f>:
 8082c94:	ea50 0201 	orrs.w	r2, r0, r1
 8082c98:	bf08      	it	eq
 8082c9a:	4770      	bxeq	lr
 8082c9c:	f04f 0300 	mov.w	r3, #0
 8082ca0:	e00a      	b.n	8082cb8 <__aeabi_l2f+0x14>
 8082ca2:	bf00      	nop

08082ca4 <__aeabi_l2f>:
 8082ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8082ca8:	bf08      	it	eq
 8082caa:	4770      	bxeq	lr
 8082cac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8082cb0:	d502      	bpl.n	8082cb8 <__aeabi_l2f+0x14>
 8082cb2:	4240      	negs	r0, r0
 8082cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082cb8:	ea5f 0c01 	movs.w	ip, r1
 8082cbc:	bf02      	ittt	eq
 8082cbe:	4684      	moveq	ip, r0
 8082cc0:	4601      	moveq	r1, r0
 8082cc2:	2000      	moveq	r0, #0
 8082cc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8082cc8:	bf08      	it	eq
 8082cca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8082cce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8082cd2:	fabc f28c 	clz	r2, ip
 8082cd6:	3a08      	subs	r2, #8
 8082cd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8082cdc:	db10      	blt.n	8082d00 <__aeabi_l2f+0x5c>
 8082cde:	fa01 fc02 	lsl.w	ip, r1, r2
 8082ce2:	4463      	add	r3, ip
 8082ce4:	fa00 fc02 	lsl.w	ip, r0, r2
 8082ce8:	f1c2 0220 	rsb	r2, r2, #32
 8082cec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082cf0:	fa20 f202 	lsr.w	r2, r0, r2
 8082cf4:	eb43 0002 	adc.w	r0, r3, r2
 8082cf8:	bf08      	it	eq
 8082cfa:	f020 0001 	biceq.w	r0, r0, #1
 8082cfe:	4770      	bx	lr
 8082d00:	f102 0220 	add.w	r2, r2, #32
 8082d04:	fa01 fc02 	lsl.w	ip, r1, r2
 8082d08:	f1c2 0220 	rsb	r2, r2, #32
 8082d0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8082d10:	fa21 f202 	lsr.w	r2, r1, r2
 8082d14:	eb43 0002 	adc.w	r0, r3, r2
 8082d18:	bf08      	it	eq
 8082d1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8082d1e:	4770      	bx	lr

08082d20 <__aeabi_fmul>:
 8082d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8082d28:	bf1e      	ittt	ne
 8082d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8082d2e:	ea92 0f0c 	teqne	r2, ip
 8082d32:	ea93 0f0c 	teqne	r3, ip
 8082d36:	d06f      	beq.n	8082e18 <__aeabi_fmul+0xf8>
 8082d38:	441a      	add	r2, r3
 8082d3a:	ea80 0c01 	eor.w	ip, r0, r1
 8082d3e:	0240      	lsls	r0, r0, #9
 8082d40:	bf18      	it	ne
 8082d42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8082d46:	d01e      	beq.n	8082d86 <__aeabi_fmul+0x66>
 8082d48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8082d4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8082d50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8082d54:	fba0 3101 	umull	r3, r1, r0, r1
 8082d58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8082d5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8082d60:	bf3e      	ittt	cc
 8082d62:	0049      	lslcc	r1, r1, #1
 8082d64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8082d68:	005b      	lslcc	r3, r3, #1
 8082d6a:	ea40 0001 	orr.w	r0, r0, r1
 8082d6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8082d72:	2afd      	cmp	r2, #253	; 0xfd
 8082d74:	d81d      	bhi.n	8082db2 <__aeabi_fmul+0x92>
 8082d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8082d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082d7e:	bf08      	it	eq
 8082d80:	f020 0001 	biceq.w	r0, r0, #1
 8082d84:	4770      	bx	lr
 8082d86:	f090 0f00 	teq	r0, #0
 8082d8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8082d8e:	bf08      	it	eq
 8082d90:	0249      	lsleq	r1, r1, #9
 8082d92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8082d96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8082d9a:	3a7f      	subs	r2, #127	; 0x7f
 8082d9c:	bfc2      	ittt	gt
 8082d9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8082da2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8082da6:	4770      	bxgt	lr
 8082da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082dac:	f04f 0300 	mov.w	r3, #0
 8082db0:	3a01      	subs	r2, #1
 8082db2:	dc5d      	bgt.n	8082e70 <__aeabi_fmul+0x150>
 8082db4:	f112 0f19 	cmn.w	r2, #25
 8082db8:	bfdc      	itt	le
 8082dba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8082dbe:	4770      	bxle	lr
 8082dc0:	f1c2 0200 	rsb	r2, r2, #0
 8082dc4:	0041      	lsls	r1, r0, #1
 8082dc6:	fa21 f102 	lsr.w	r1, r1, r2
 8082dca:	f1c2 0220 	rsb	r2, r2, #32
 8082dce:	fa00 fc02 	lsl.w	ip, r0, r2
 8082dd2:	ea5f 0031 	movs.w	r0, r1, rrx
 8082dd6:	f140 0000 	adc.w	r0, r0, #0
 8082dda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8082dde:	bf08      	it	eq
 8082de0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8082de4:	4770      	bx	lr
 8082de6:	f092 0f00 	teq	r2, #0
 8082dea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8082dee:	bf02      	ittt	eq
 8082df0:	0040      	lsleq	r0, r0, #1
 8082df2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8082df6:	3a01      	subeq	r2, #1
 8082df8:	d0f9      	beq.n	8082dee <__aeabi_fmul+0xce>
 8082dfa:	ea40 000c 	orr.w	r0, r0, ip
 8082dfe:	f093 0f00 	teq	r3, #0
 8082e02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8082e06:	bf02      	ittt	eq
 8082e08:	0049      	lsleq	r1, r1, #1
 8082e0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8082e0e:	3b01      	subeq	r3, #1
 8082e10:	d0f9      	beq.n	8082e06 <__aeabi_fmul+0xe6>
 8082e12:	ea41 010c 	orr.w	r1, r1, ip
 8082e16:	e78f      	b.n	8082d38 <__aeabi_fmul+0x18>
 8082e18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8082e1c:	ea92 0f0c 	teq	r2, ip
 8082e20:	bf18      	it	ne
 8082e22:	ea93 0f0c 	teqne	r3, ip
 8082e26:	d00a      	beq.n	8082e3e <__aeabi_fmul+0x11e>
 8082e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8082e2c:	bf18      	it	ne
 8082e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8082e32:	d1d8      	bne.n	8082de6 <__aeabi_fmul+0xc6>
 8082e34:	ea80 0001 	eor.w	r0, r0, r1
 8082e38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8082e3c:	4770      	bx	lr
 8082e3e:	f090 0f00 	teq	r0, #0
 8082e42:	bf17      	itett	ne
 8082e44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8082e48:	4608      	moveq	r0, r1
 8082e4a:	f091 0f00 	teqne	r1, #0
 8082e4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8082e52:	d014      	beq.n	8082e7e <__aeabi_fmul+0x15e>
 8082e54:	ea92 0f0c 	teq	r2, ip
 8082e58:	d101      	bne.n	8082e5e <__aeabi_fmul+0x13e>
 8082e5a:	0242      	lsls	r2, r0, #9
 8082e5c:	d10f      	bne.n	8082e7e <__aeabi_fmul+0x15e>
 8082e5e:	ea93 0f0c 	teq	r3, ip
 8082e62:	d103      	bne.n	8082e6c <__aeabi_fmul+0x14c>
 8082e64:	024b      	lsls	r3, r1, #9
 8082e66:	bf18      	it	ne
 8082e68:	4608      	movne	r0, r1
 8082e6a:	d108      	bne.n	8082e7e <__aeabi_fmul+0x15e>
 8082e6c:	ea80 0001 	eor.w	r0, r0, r1
 8082e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8082e74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8082e78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082e7c:	4770      	bx	lr
 8082e7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8082e82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8082e86:	4770      	bx	lr

08082e88 <__aeabi_fdiv>:
 8082e88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082e8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8082e90:	bf1e      	ittt	ne
 8082e92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8082e96:	ea92 0f0c 	teqne	r2, ip
 8082e9a:	ea93 0f0c 	teqne	r3, ip
 8082e9e:	d069      	beq.n	8082f74 <__aeabi_fdiv+0xec>
 8082ea0:	eba2 0203 	sub.w	r2, r2, r3
 8082ea4:	ea80 0c01 	eor.w	ip, r0, r1
 8082ea8:	0249      	lsls	r1, r1, #9
 8082eaa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8082eae:	d037      	beq.n	8082f20 <__aeabi_fdiv+0x98>
 8082eb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8082eb4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8082eb8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8082ebc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8082ec0:	428b      	cmp	r3, r1
 8082ec2:	bf38      	it	cc
 8082ec4:	005b      	lslcc	r3, r3, #1
 8082ec6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8082eca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8082ece:	428b      	cmp	r3, r1
 8082ed0:	bf24      	itt	cs
 8082ed2:	1a5b      	subcs	r3, r3, r1
 8082ed4:	ea40 000c 	orrcs.w	r0, r0, ip
 8082ed8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8082edc:	bf24      	itt	cs
 8082ede:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8082ee2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8082ee6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8082eea:	bf24      	itt	cs
 8082eec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8082ef0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8082ef4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8082ef8:	bf24      	itt	cs
 8082efa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8082efe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8082f02:	011b      	lsls	r3, r3, #4
 8082f04:	bf18      	it	ne
 8082f06:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8082f0a:	d1e0      	bne.n	8082ece <__aeabi_fdiv+0x46>
 8082f0c:	2afd      	cmp	r2, #253	; 0xfd
 8082f0e:	f63f af50 	bhi.w	8082db2 <__aeabi_fmul+0x92>
 8082f12:	428b      	cmp	r3, r1
 8082f14:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082f18:	bf08      	it	eq
 8082f1a:	f020 0001 	biceq.w	r0, r0, #1
 8082f1e:	4770      	bx	lr
 8082f20:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8082f24:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8082f28:	327f      	adds	r2, #127	; 0x7f
 8082f2a:	bfc2      	ittt	gt
 8082f2c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8082f30:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8082f34:	4770      	bxgt	lr
 8082f36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082f3a:	f04f 0300 	mov.w	r3, #0
 8082f3e:	3a01      	subs	r2, #1
 8082f40:	e737      	b.n	8082db2 <__aeabi_fmul+0x92>
 8082f42:	f092 0f00 	teq	r2, #0
 8082f46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8082f4a:	bf02      	ittt	eq
 8082f4c:	0040      	lsleq	r0, r0, #1
 8082f4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8082f52:	3a01      	subeq	r2, #1
 8082f54:	d0f9      	beq.n	8082f4a <__aeabi_fdiv+0xc2>
 8082f56:	ea40 000c 	orr.w	r0, r0, ip
 8082f5a:	f093 0f00 	teq	r3, #0
 8082f5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8082f62:	bf02      	ittt	eq
 8082f64:	0049      	lsleq	r1, r1, #1
 8082f66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8082f6a:	3b01      	subeq	r3, #1
 8082f6c:	d0f9      	beq.n	8082f62 <__aeabi_fdiv+0xda>
 8082f6e:	ea41 010c 	orr.w	r1, r1, ip
 8082f72:	e795      	b.n	8082ea0 <__aeabi_fdiv+0x18>
 8082f74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8082f78:	ea92 0f0c 	teq	r2, ip
 8082f7c:	d108      	bne.n	8082f90 <__aeabi_fdiv+0x108>
 8082f7e:	0242      	lsls	r2, r0, #9
 8082f80:	f47f af7d 	bne.w	8082e7e <__aeabi_fmul+0x15e>
 8082f84:	ea93 0f0c 	teq	r3, ip
 8082f88:	f47f af70 	bne.w	8082e6c <__aeabi_fmul+0x14c>
 8082f8c:	4608      	mov	r0, r1
 8082f8e:	e776      	b.n	8082e7e <__aeabi_fmul+0x15e>
 8082f90:	ea93 0f0c 	teq	r3, ip
 8082f94:	d104      	bne.n	8082fa0 <__aeabi_fdiv+0x118>
 8082f96:	024b      	lsls	r3, r1, #9
 8082f98:	f43f af4c 	beq.w	8082e34 <__aeabi_fmul+0x114>
 8082f9c:	4608      	mov	r0, r1
 8082f9e:	e76e      	b.n	8082e7e <__aeabi_fmul+0x15e>
 8082fa0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8082fa4:	bf18      	it	ne
 8082fa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8082faa:	d1ca      	bne.n	8082f42 <__aeabi_fdiv+0xba>
 8082fac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8082fb0:	f47f af5c 	bne.w	8082e6c <__aeabi_fmul+0x14c>
 8082fb4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8082fb8:	f47f af3c 	bne.w	8082e34 <__aeabi_fmul+0x114>
 8082fbc:	e75f      	b.n	8082e7e <__aeabi_fmul+0x15e>
 8082fbe:	bf00      	nop

08082fc0 <__cxa_atexit>:
 8082fc0:	b510      	push	{r4, lr}
 8082fc2:	4c05      	ldr	r4, [pc, #20]	; (8082fd8 <__cxa_atexit+0x18>)
 8082fc4:	4613      	mov	r3, r2
 8082fc6:	b12c      	cbz	r4, 8082fd4 <__cxa_atexit+0x14>
 8082fc8:	460a      	mov	r2, r1
 8082fca:	4601      	mov	r1, r0
 8082fcc:	2002      	movs	r0, #2
 8082fce:	f3af 8000 	nop.w
 8082fd2:	bd10      	pop	{r4, pc}
 8082fd4:	4620      	mov	r0, r4
 8082fd6:	bd10      	pop	{r4, pc}
 8082fd8:	00000000 	.word	0x00000000

08082fdc <localtime>:
 8082fdc:	b538      	push	{r3, r4, r5, lr}
 8082fde:	4b07      	ldr	r3, [pc, #28]	; (8082ffc <localtime+0x20>)
 8082fe0:	4605      	mov	r5, r0
 8082fe2:	681c      	ldr	r4, [r3, #0]
 8082fe4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8082fe6:	b91b      	cbnz	r3, 8082ff0 <localtime+0x14>
 8082fe8:	2024      	movs	r0, #36	; 0x24
 8082fea:	f7fd fcd1 	bl	8080990 <malloc>
 8082fee:	63e0      	str	r0, [r4, #60]	; 0x3c
 8082ff0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8082ff2:	4628      	mov	r0, r5
 8082ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082ff8:	f000 b802 	b.w	8083000 <localtime_r>
 8082ffc:	2000046c 	.word	0x2000046c

08083000 <localtime_r>:
 8083000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083004:	460c      	mov	r4, r1
 8083006:	4680      	mov	r8, r0
 8083008:	f001 fe54 	bl	8084cb4 <__gettzinfo>
 808300c:	4621      	mov	r1, r4
 808300e:	4607      	mov	r7, r0
 8083010:	4640      	mov	r0, r8
 8083012:	f001 fe53 	bl	8084cbc <gmtime_r>
 8083016:	6946      	ldr	r6, [r0, #20]
 8083018:	4604      	mov	r4, r0
 808301a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808301e:	07b3      	lsls	r3, r6, #30
 8083020:	d105      	bne.n	808302e <localtime_r+0x2e>
 8083022:	2264      	movs	r2, #100	; 0x64
 8083024:	fb96 f3f2 	sdiv	r3, r6, r2
 8083028:	fb02 6313 	mls	r3, r2, r3, r6
 808302c:	b94b      	cbnz	r3, 8083042 <localtime_r+0x42>
 808302e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8083032:	fb96 f3f5 	sdiv	r3, r6, r5
 8083036:	fb05 6513 	mls	r5, r5, r3, r6
 808303a:	fab5 f385 	clz	r3, r5
 808303e:	095b      	lsrs	r3, r3, #5
 8083040:	e000      	b.n	8083044 <localtime_r+0x44>
 8083042:	2301      	movs	r3, #1
 8083044:	4a5f      	ldr	r2, [pc, #380]	; (80831c4 <localtime_r+0x1c4>)
 8083046:	2530      	movs	r5, #48	; 0x30
 8083048:	fb05 2503 	mla	r5, r5, r3, r2
 808304c:	f001 f948 	bl	80842e0 <__tz_lock>
 8083050:	f001 f948 	bl	80842e4 <_tzset_unlocked>
 8083054:	4b5c      	ldr	r3, [pc, #368]	; (80831c8 <localtime_r+0x1c8>)
 8083056:	681b      	ldr	r3, [r3, #0]
 8083058:	b1f3      	cbz	r3, 8083098 <localtime_r+0x98>
 808305a:	687b      	ldr	r3, [r7, #4]
 808305c:	429e      	cmp	r6, r3
 808305e:	d105      	bne.n	808306c <localtime_r+0x6c>
 8083060:	6839      	ldr	r1, [r7, #0]
 8083062:	f8d8 3000 	ldr.w	r3, [r8]
 8083066:	69fa      	ldr	r2, [r7, #28]
 8083068:	b941      	cbnz	r1, 808307c <localtime_r+0x7c>
 808306a:	e00a      	b.n	8083082 <localtime_r+0x82>
 808306c:	4630      	mov	r0, r6
 808306e:	f001 f88f 	bl	8084190 <__tzcalc_limits>
 8083072:	2800      	cmp	r0, #0
 8083074:	d1f4      	bne.n	8083060 <localtime_r+0x60>
 8083076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808307a:	e00d      	b.n	8083098 <localtime_r+0x98>
 808307c:	4293      	cmp	r3, r2
 808307e:	db08      	blt.n	8083092 <localtime_r+0x92>
 8083080:	e001      	b.n	8083086 <localtime_r+0x86>
 8083082:	4293      	cmp	r3, r2
 8083084:	da07      	bge.n	8083096 <localtime_r+0x96>
 8083086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8083088:	4293      	cmp	r3, r2
 808308a:	bfac      	ite	ge
 808308c:	2300      	movge	r3, #0
 808308e:	2301      	movlt	r3, #1
 8083090:	e002      	b.n	8083098 <localtime_r+0x98>
 8083092:	2300      	movs	r3, #0
 8083094:	e000      	b.n	8083098 <localtime_r+0x98>
 8083096:	2301      	movs	r3, #1
 8083098:	6223      	str	r3, [r4, #32]
 808309a:	6a23      	ldr	r3, [r4, #32]
 808309c:	203c      	movs	r0, #60	; 0x3c
 808309e:	2b01      	cmp	r3, #1
 80830a0:	bf0c      	ite	eq
 80830a2:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80830a4:	6a39      	ldrne	r1, [r7, #32]
 80830a6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80830aa:	fb91 f6f3 	sdiv	r6, r1, r3
 80830ae:	fb03 1316 	mls	r3, r3, r6, r1
 80830b2:	fb93 f2f0 	sdiv	r2, r3, r0
 80830b6:	fb00 3012 	mls	r0, r0, r2, r3
 80830ba:	6861      	ldr	r1, [r4, #4]
 80830bc:	6823      	ldr	r3, [r4, #0]
 80830be:	1a89      	subs	r1, r1, r2
 80830c0:	68a2      	ldr	r2, [r4, #8]
 80830c2:	1a1b      	subs	r3, r3, r0
 80830c4:	1b92      	subs	r2, r2, r6
 80830c6:	2b3b      	cmp	r3, #59	; 0x3b
 80830c8:	6023      	str	r3, [r4, #0]
 80830ca:	6061      	str	r1, [r4, #4]
 80830cc:	60a2      	str	r2, [r4, #8]
 80830ce:	dd03      	ble.n	80830d8 <localtime_r+0xd8>
 80830d0:	3101      	adds	r1, #1
 80830d2:	6061      	str	r1, [r4, #4]
 80830d4:	3b3c      	subs	r3, #60	; 0x3c
 80830d6:	e004      	b.n	80830e2 <localtime_r+0xe2>
 80830d8:	2b00      	cmp	r3, #0
 80830da:	da03      	bge.n	80830e4 <localtime_r+0xe4>
 80830dc:	3901      	subs	r1, #1
 80830de:	6061      	str	r1, [r4, #4]
 80830e0:	333c      	adds	r3, #60	; 0x3c
 80830e2:	6023      	str	r3, [r4, #0]
 80830e4:	6863      	ldr	r3, [r4, #4]
 80830e6:	2b3b      	cmp	r3, #59	; 0x3b
 80830e8:	dd03      	ble.n	80830f2 <localtime_r+0xf2>
 80830ea:	3201      	adds	r2, #1
 80830ec:	60a2      	str	r2, [r4, #8]
 80830ee:	3b3c      	subs	r3, #60	; 0x3c
 80830f0:	e004      	b.n	80830fc <localtime_r+0xfc>
 80830f2:	2b00      	cmp	r3, #0
 80830f4:	da03      	bge.n	80830fe <localtime_r+0xfe>
 80830f6:	3a01      	subs	r2, #1
 80830f8:	60a2      	str	r2, [r4, #8]
 80830fa:	333c      	adds	r3, #60	; 0x3c
 80830fc:	6063      	str	r3, [r4, #4]
 80830fe:	68a3      	ldr	r3, [r4, #8]
 8083100:	2b17      	cmp	r3, #23
 8083102:	dd22      	ble.n	808314a <localtime_r+0x14a>
 8083104:	69e2      	ldr	r2, [r4, #28]
 8083106:	3b18      	subs	r3, #24
 8083108:	3201      	adds	r2, #1
 808310a:	61e2      	str	r2, [r4, #28]
 808310c:	69a2      	ldr	r2, [r4, #24]
 808310e:	60a3      	str	r3, [r4, #8]
 8083110:	3201      	adds	r2, #1
 8083112:	2a06      	cmp	r2, #6
 8083114:	bfc8      	it	gt
 8083116:	2200      	movgt	r2, #0
 8083118:	61a2      	str	r2, [r4, #24]
 808311a:	68e2      	ldr	r2, [r4, #12]
 808311c:	6923      	ldr	r3, [r4, #16]
 808311e:	3201      	adds	r2, #1
 8083120:	60e2      	str	r2, [r4, #12]
 8083122:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8083126:	428a      	cmp	r2, r1
 8083128:	dd46      	ble.n	80831b8 <localtime_r+0x1b8>
 808312a:	3301      	adds	r3, #1
 808312c:	2b0c      	cmp	r3, #12
 808312e:	bf08      	it	eq
 8083130:	6963      	ldreq	r3, [r4, #20]
 8083132:	eba2 0201 	sub.w	r2, r2, r1
 8083136:	60e2      	str	r2, [r4, #12]
 8083138:	bf05      	ittet	eq
 808313a:	3301      	addeq	r3, #1
 808313c:	2200      	moveq	r2, #0
 808313e:	6123      	strne	r3, [r4, #16]
 8083140:	6122      	streq	r2, [r4, #16]
 8083142:	bf04      	itt	eq
 8083144:	6163      	streq	r3, [r4, #20]
 8083146:	61e2      	streq	r2, [r4, #28]
 8083148:	e036      	b.n	80831b8 <localtime_r+0x1b8>
 808314a:	2b00      	cmp	r3, #0
 808314c:	da34      	bge.n	80831b8 <localtime_r+0x1b8>
 808314e:	69e2      	ldr	r2, [r4, #28]
 8083150:	3318      	adds	r3, #24
 8083152:	3a01      	subs	r2, #1
 8083154:	61e2      	str	r2, [r4, #28]
 8083156:	69a2      	ldr	r2, [r4, #24]
 8083158:	60a3      	str	r3, [r4, #8]
 808315a:	3a01      	subs	r2, #1
 808315c:	bf48      	it	mi
 808315e:	2206      	movmi	r2, #6
 8083160:	61a2      	str	r2, [r4, #24]
 8083162:	68e2      	ldr	r2, [r4, #12]
 8083164:	3a01      	subs	r2, #1
 8083166:	60e2      	str	r2, [r4, #12]
 8083168:	bb32      	cbnz	r2, 80831b8 <localtime_r+0x1b8>
 808316a:	6923      	ldr	r3, [r4, #16]
 808316c:	3b01      	subs	r3, #1
 808316e:	d401      	bmi.n	8083174 <localtime_r+0x174>
 8083170:	6123      	str	r3, [r4, #16]
 8083172:	e01d      	b.n	80831b0 <localtime_r+0x1b0>
 8083174:	230b      	movs	r3, #11
 8083176:	6123      	str	r3, [r4, #16]
 8083178:	6963      	ldr	r3, [r4, #20]
 808317a:	1e5a      	subs	r2, r3, #1
 808317c:	f012 0f03 	tst.w	r2, #3
 8083180:	6162      	str	r2, [r4, #20]
 8083182:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8083186:	d105      	bne.n	8083194 <localtime_r+0x194>
 8083188:	2164      	movs	r1, #100	; 0x64
 808318a:	fb93 f2f1 	sdiv	r2, r3, r1
 808318e:	fb01 3212 	mls	r2, r1, r2, r3
 8083192:	b94a      	cbnz	r2, 80831a8 <localtime_r+0x1a8>
 8083194:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8083198:	fb93 f2f1 	sdiv	r2, r3, r1
 808319c:	fb01 3312 	mls	r3, r1, r2, r3
 80831a0:	fab3 f383 	clz	r3, r3
 80831a4:	095b      	lsrs	r3, r3, #5
 80831a6:	e000      	b.n	80831aa <localtime_r+0x1aa>
 80831a8:	2301      	movs	r3, #1
 80831aa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80831ae:	61e3      	str	r3, [r4, #28]
 80831b0:	6923      	ldr	r3, [r4, #16]
 80831b2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80831b6:	60e3      	str	r3, [r4, #12]
 80831b8:	f001 f893 	bl	80842e2 <__tz_unlock>
 80831bc:	4620      	mov	r0, r4
 80831be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80831c2:	bf00      	nop
 80831c4:	08085b7c 	.word	0x08085b7c
 80831c8:	200007b8 	.word	0x200007b8

080831cc <_localeconv_r>:
 80831cc:	4800      	ldr	r0, [pc, #0]	; (80831d0 <_localeconv_r+0x4>)
 80831ce:	4770      	bx	lr
 80831d0:	20000470 	.word	0x20000470

080831d4 <memcpy>:
 80831d4:	b510      	push	{r4, lr}
 80831d6:	1e43      	subs	r3, r0, #1
 80831d8:	440a      	add	r2, r1
 80831da:	4291      	cmp	r1, r2
 80831dc:	d004      	beq.n	80831e8 <memcpy+0x14>
 80831de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80831e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80831e6:	e7f8      	b.n	80831da <memcpy+0x6>
 80831e8:	bd10      	pop	{r4, pc}

080831ea <memmove>:
 80831ea:	4288      	cmp	r0, r1
 80831ec:	b510      	push	{r4, lr}
 80831ee:	eb01 0302 	add.w	r3, r1, r2
 80831f2:	d801      	bhi.n	80831f8 <memmove+0xe>
 80831f4:	1e42      	subs	r2, r0, #1
 80831f6:	e00b      	b.n	8083210 <memmove+0x26>
 80831f8:	4298      	cmp	r0, r3
 80831fa:	d2fb      	bcs.n	80831f4 <memmove+0xa>
 80831fc:	1881      	adds	r1, r0, r2
 80831fe:	1ad2      	subs	r2, r2, r3
 8083200:	42d3      	cmn	r3, r2
 8083202:	d004      	beq.n	808320e <memmove+0x24>
 8083204:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8083208:	f801 4d01 	strb.w	r4, [r1, #-1]!
 808320c:	e7f8      	b.n	8083200 <memmove+0x16>
 808320e:	bd10      	pop	{r4, pc}
 8083210:	4299      	cmp	r1, r3
 8083212:	d004      	beq.n	808321e <memmove+0x34>
 8083214:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083218:	f802 4f01 	strb.w	r4, [r2, #1]!
 808321c:	e7f8      	b.n	8083210 <memmove+0x26>
 808321e:	bd10      	pop	{r4, pc}

08083220 <memset>:
 8083220:	4603      	mov	r3, r0
 8083222:	4402      	add	r2, r0
 8083224:	4293      	cmp	r3, r2
 8083226:	d002      	beq.n	808322e <memset+0xe>
 8083228:	f803 1b01 	strb.w	r1, [r3], #1
 808322c:	e7fa      	b.n	8083224 <memset+0x4>
 808322e:	4770      	bx	lr

08083230 <srand>:
 8083230:	b538      	push	{r3, r4, r5, lr}
 8083232:	4b12      	ldr	r3, [pc, #72]	; (808327c <srand+0x4c>)
 8083234:	4605      	mov	r5, r0
 8083236:	681c      	ldr	r4, [r3, #0]
 8083238:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808323a:	b9d3      	cbnz	r3, 8083272 <srand+0x42>
 808323c:	2018      	movs	r0, #24
 808323e:	f7fd fba7 	bl	8080990 <malloc>
 8083242:	f243 330e 	movw	r3, #13070	; 0x330e
 8083246:	63a0      	str	r0, [r4, #56]	; 0x38
 8083248:	8003      	strh	r3, [r0, #0]
 808324a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808324e:	8043      	strh	r3, [r0, #2]
 8083250:	f241 2334 	movw	r3, #4660	; 0x1234
 8083254:	8083      	strh	r3, [r0, #4]
 8083256:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808325a:	80c3      	strh	r3, [r0, #6]
 808325c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8083260:	8103      	strh	r3, [r0, #8]
 8083262:	2305      	movs	r3, #5
 8083264:	8143      	strh	r3, [r0, #10]
 8083266:	230b      	movs	r3, #11
 8083268:	8183      	strh	r3, [r0, #12]
 808326a:	2201      	movs	r2, #1
 808326c:	2300      	movs	r3, #0
 808326e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8083272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083274:	2200      	movs	r2, #0
 8083276:	611d      	str	r5, [r3, #16]
 8083278:	615a      	str	r2, [r3, #20]
 808327a:	bd38      	pop	{r3, r4, r5, pc}
 808327c:	2000046c 	.word	0x2000046c

08083280 <strcmp>:
 8083280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8083284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8083288:	2a01      	cmp	r2, #1
 808328a:	bf28      	it	cs
 808328c:	429a      	cmpcs	r2, r3
 808328e:	d0f7      	beq.n	8083280 <strcmp>
 8083290:	1ad0      	subs	r0, r2, r3
 8083292:	4770      	bx	lr

08083294 <strcpy>:
 8083294:	4603      	mov	r3, r0
 8083296:	f811 2b01 	ldrb.w	r2, [r1], #1
 808329a:	f803 2b01 	strb.w	r2, [r3], #1
 808329e:	2a00      	cmp	r2, #0
 80832a0:	d1f9      	bne.n	8083296 <strcpy+0x2>
 80832a2:	4770      	bx	lr

080832a4 <strdup>:
 80832a4:	4b02      	ldr	r3, [pc, #8]	; (80832b0 <strdup+0xc>)
 80832a6:	4601      	mov	r1, r0
 80832a8:	6818      	ldr	r0, [r3, #0]
 80832aa:	f000 b803 	b.w	80832b4 <_strdup_r>
 80832ae:	bf00      	nop
 80832b0:	2000046c 	.word	0x2000046c

080832b4 <_strdup_r>:
 80832b4:	b570      	push	{r4, r5, r6, lr}
 80832b6:	4606      	mov	r6, r0
 80832b8:	4608      	mov	r0, r1
 80832ba:	460c      	mov	r4, r1
 80832bc:	f000 f80d 	bl	80832da <strlen>
 80832c0:	1c45      	adds	r5, r0, #1
 80832c2:	4629      	mov	r1, r5
 80832c4:	4630      	mov	r0, r6
 80832c6:	f7fd fb9b 	bl	8080a00 <_malloc_r>
 80832ca:	4606      	mov	r6, r0
 80832cc:	b118      	cbz	r0, 80832d6 <_strdup_r+0x22>
 80832ce:	462a      	mov	r2, r5
 80832d0:	4621      	mov	r1, r4
 80832d2:	f7ff ff7f 	bl	80831d4 <memcpy>
 80832d6:	4630      	mov	r0, r6
 80832d8:	bd70      	pop	{r4, r5, r6, pc}

080832da <strlen>:
 80832da:	4603      	mov	r3, r0
 80832dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80832e0:	2a00      	cmp	r2, #0
 80832e2:	d1fb      	bne.n	80832dc <strlen+0x2>
 80832e4:	1a18      	subs	r0, r3, r0
 80832e6:	3801      	subs	r0, #1
 80832e8:	4770      	bx	lr

080832ea <strncmp>:
 80832ea:	b530      	push	{r4, r5, lr}
 80832ec:	b182      	cbz	r2, 8083310 <strncmp+0x26>
 80832ee:	1e45      	subs	r5, r0, #1
 80832f0:	3901      	subs	r1, #1
 80832f2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80832f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80832fa:	42a3      	cmp	r3, r4
 80832fc:	d106      	bne.n	808330c <strncmp+0x22>
 80832fe:	43ec      	mvns	r4, r5
 8083300:	4414      	add	r4, r2
 8083302:	42e0      	cmn	r0, r4
 8083304:	d001      	beq.n	808330a <strncmp+0x20>
 8083306:	2b00      	cmp	r3, #0
 8083308:	d1f3      	bne.n	80832f2 <strncmp+0x8>
 808330a:	461c      	mov	r4, r3
 808330c:	1b18      	subs	r0, r3, r4
 808330e:	bd30      	pop	{r4, r5, pc}
 8083310:	4610      	mov	r0, r2
 8083312:	bd30      	pop	{r4, r5, pc}

08083314 <strstr>:
 8083314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083316:	7803      	ldrb	r3, [r0, #0]
 8083318:	b963      	cbnz	r3, 8083334 <strstr+0x20>
 808331a:	780b      	ldrb	r3, [r1, #0]
 808331c:	2b00      	cmp	r3, #0
 808331e:	bf18      	it	ne
 8083320:	2000      	movne	r0, #0
 8083322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083324:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8083328:	b162      	cbz	r2, 8083344 <strstr+0x30>
 808332a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808332e:	4630      	mov	r0, r6
 8083330:	4297      	cmp	r7, r2
 8083332:	d0f7      	beq.n	8083324 <strstr+0x10>
 8083334:	4603      	mov	r3, r0
 8083336:	1c46      	adds	r6, r0, #1
 8083338:	7800      	ldrb	r0, [r0, #0]
 808333a:	b110      	cbz	r0, 8083342 <strstr+0x2e>
 808333c:	1e4d      	subs	r5, r1, #1
 808333e:	1e5c      	subs	r4, r3, #1
 8083340:	e7f0      	b.n	8083324 <strstr+0x10>
 8083342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083344:	4618      	mov	r0, r3
 8083346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08083348 <sulp>:
 8083348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808334c:	460f      	mov	r7, r1
 808334e:	4690      	mov	r8, r2
 8083350:	f002 f810 	bl	8085374 <__ulp>
 8083354:	4604      	mov	r4, r0
 8083356:	460d      	mov	r5, r1
 8083358:	f1b8 0f00 	cmp.w	r8, #0
 808335c:	d011      	beq.n	8083382 <sulp+0x3a>
 808335e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8083362:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8083366:	2b00      	cmp	r3, #0
 8083368:	dd0b      	ble.n	8083382 <sulp+0x3a>
 808336a:	051b      	lsls	r3, r3, #20
 808336c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8083370:	2400      	movs	r4, #0
 8083372:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8083376:	4622      	mov	r2, r4
 8083378:	462b      	mov	r3, r5
 808337a:	f7ff f87b 	bl	8082474 <__aeabi_dmul>
 808337e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083382:	4620      	mov	r0, r4
 8083384:	4629      	mov	r1, r5
 8083386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808338a:	0000      	movs	r0, r0
 808338c:	0000      	movs	r0, r0
	...

08083390 <_strtod_r>:
 8083390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083394:	4682      	mov	sl, r0
 8083396:	460c      	mov	r4, r1
 8083398:	b09d      	sub	sp, #116	; 0x74
 808339a:	2300      	movs	r3, #0
 808339c:	9213      	str	r2, [sp, #76]	; 0x4c
 808339e:	9318      	str	r3, [sp, #96]	; 0x60
 80833a0:	f04f 0800 	mov.w	r8, #0
 80833a4:	f04f 0900 	mov.w	r9, #0
 80833a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80833aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80833ac:	781a      	ldrb	r2, [r3, #0]
 80833ae:	2a0d      	cmp	r2, #13
 80833b0:	d805      	bhi.n	80833be <_strtod_r+0x2e>
 80833b2:	2a09      	cmp	r2, #9
 80833b4:	d213      	bcs.n	80833de <_strtod_r+0x4e>
 80833b6:	2a00      	cmp	r2, #0
 80833b8:	f000 81ad 	beq.w	8083716 <_strtod_r+0x386>
 80833bc:	e012      	b.n	80833e4 <_strtod_r+0x54>
 80833be:	2a2b      	cmp	r2, #43	; 0x2b
 80833c0:	d004      	beq.n	80833cc <_strtod_r+0x3c>
 80833c2:	2a2d      	cmp	r2, #45	; 0x2d
 80833c4:	d004      	beq.n	80833d0 <_strtod_r+0x40>
 80833c6:	2a20      	cmp	r2, #32
 80833c8:	d10c      	bne.n	80833e4 <_strtod_r+0x54>
 80833ca:	e008      	b.n	80833de <_strtod_r+0x4e>
 80833cc:	2200      	movs	r2, #0
 80833ce:	e000      	b.n	80833d2 <_strtod_r+0x42>
 80833d0:	2201      	movs	r2, #1
 80833d2:	920c      	str	r2, [sp, #48]	; 0x30
 80833d4:	1c5a      	adds	r2, r3, #1
 80833d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80833d8:	785b      	ldrb	r3, [r3, #1]
 80833da:	b92b      	cbnz	r3, 80833e8 <_strtod_r+0x58>
 80833dc:	e19b      	b.n	8083716 <_strtod_r+0x386>
 80833de:	3301      	adds	r3, #1
 80833e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80833e2:	e7e2      	b.n	80833aa <_strtod_r+0x1a>
 80833e4:	2300      	movs	r3, #0
 80833e6:	930c      	str	r3, [sp, #48]	; 0x30
 80833e8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80833ea:	782b      	ldrb	r3, [r5, #0]
 80833ec:	2b30      	cmp	r3, #48	; 0x30
 80833ee:	d15c      	bne.n	80834aa <_strtod_r+0x11a>
 80833f0:	786b      	ldrb	r3, [r5, #1]
 80833f2:	2b58      	cmp	r3, #88	; 0x58
 80833f4:	d001      	beq.n	80833fa <_strtod_r+0x6a>
 80833f6:	2b78      	cmp	r3, #120	; 0x78
 80833f8:	d14c      	bne.n	8083494 <_strtod_r+0x104>
 80833fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80833fc:	4aa8      	ldr	r2, [pc, #672]	; (80836a0 <_strtod_r+0x310>)
 80833fe:	9301      	str	r3, [sp, #4]
 8083400:	ab18      	add	r3, sp, #96	; 0x60
 8083402:	9300      	str	r3, [sp, #0]
 8083404:	a917      	add	r1, sp, #92	; 0x5c
 8083406:	ab19      	add	r3, sp, #100	; 0x64
 8083408:	4650      	mov	r0, sl
 808340a:	f001 f93c 	bl	8084686 <__gethex>
 808340e:	f010 0607 	ands.w	r6, r0, #7
 8083412:	4604      	mov	r4, r0
 8083414:	f000 8585 	beq.w	8083f22 <_strtod_r+0xb92>
 8083418:	2e06      	cmp	r6, #6
 808341a:	d105      	bne.n	8083428 <_strtod_r+0x98>
 808341c:	3501      	adds	r5, #1
 808341e:	2300      	movs	r3, #0
 8083420:	9517      	str	r5, [sp, #92]	; 0x5c
 8083422:	930c      	str	r3, [sp, #48]	; 0x30
 8083424:	f000 bd7d 	b.w	8083f22 <_strtod_r+0xb92>
 8083428:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808342a:	b13a      	cbz	r2, 808343c <_strtod_r+0xac>
 808342c:	2135      	movs	r1, #53	; 0x35
 808342e:	a81a      	add	r0, sp, #104	; 0x68
 8083430:	f002 f887 	bl	8085542 <__copybits>
 8083434:	9918      	ldr	r1, [sp, #96]	; 0x60
 8083436:	4650      	mov	r0, sl
 8083438:	f001 fd0b 	bl	8084e52 <_Bfree>
 808343c:	2e06      	cmp	r6, #6
 808343e:	d822      	bhi.n	8083486 <_strtod_r+0xf6>
 8083440:	e8df f006 	tbb	[pc, r6]
 8083444:	18080d04 	.word	0x18080d04
 8083448:	0d1d      	.short	0x0d1d
 808344a:	04          	.byte	0x04
 808344b:	00          	.byte	0x00
 808344c:	f04f 0900 	mov.w	r9, #0
 8083450:	46c8      	mov	r8, r9
 8083452:	e018      	b.n	8083486 <_strtod_r+0xf6>
 8083454:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8083458:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808345c:	e013      	b.n	8083486 <_strtod_r+0xf6>
 808345e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8083460:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8083462:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8083466:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808346a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808346e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8083472:	e008      	b.n	8083486 <_strtod_r+0xf6>
 8083474:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80836a4 <_strtod_r+0x314>
 8083478:	f04f 0800 	mov.w	r8, #0
 808347c:	e003      	b.n	8083486 <_strtod_r+0xf6>
 808347e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8083482:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8083486:	0721      	lsls	r1, r4, #28
 8083488:	f140 854b 	bpl.w	8083f22 <_strtod_r+0xb92>
 808348c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8083490:	f000 bd47 	b.w	8083f22 <_strtod_r+0xb92>
 8083494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8083496:	1c5a      	adds	r2, r3, #1
 8083498:	9217      	str	r2, [sp, #92]	; 0x5c
 808349a:	785b      	ldrb	r3, [r3, #1]
 808349c:	2b30      	cmp	r3, #48	; 0x30
 808349e:	d0f9      	beq.n	8083494 <_strtod_r+0x104>
 80834a0:	2b00      	cmp	r3, #0
 80834a2:	f000 853e 	beq.w	8083f22 <_strtod_r+0xb92>
 80834a6:	2301      	movs	r3, #1
 80834a8:	e000      	b.n	80834ac <_strtod_r+0x11c>
 80834aa:	2300      	movs	r3, #0
 80834ac:	9305      	str	r3, [sp, #20]
 80834ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80834b0:	220a      	movs	r2, #10
 80834b2:	9306      	str	r3, [sp, #24]
 80834b4:	2300      	movs	r3, #0
 80834b6:	469b      	mov	fp, r3
 80834b8:	9302      	str	r3, [sp, #8]
 80834ba:	9304      	str	r3, [sp, #16]
 80834bc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80834be:	782e      	ldrb	r6, [r5, #0]
 80834c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80834c4:	b2d9      	uxtb	r1, r3
 80834c6:	2909      	cmp	r1, #9
 80834c8:	d811      	bhi.n	80834ee <_strtod_r+0x15e>
 80834ca:	f1bb 0f08 	cmp.w	fp, #8
 80834ce:	bfd5      	itete	le
 80834d0:	9904      	ldrle	r1, [sp, #16]
 80834d2:	9902      	ldrgt	r1, [sp, #8]
 80834d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80834d8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80834dc:	f105 0501 	add.w	r5, r5, #1
 80834e0:	bfd4      	ite	le
 80834e2:	9304      	strle	r3, [sp, #16]
 80834e4:	9302      	strgt	r3, [sp, #8]
 80834e6:	f10b 0b01 	add.w	fp, fp, #1
 80834ea:	9517      	str	r5, [sp, #92]	; 0x5c
 80834ec:	e7e6      	b.n	80834bc <_strtod_r+0x12c>
 80834ee:	4650      	mov	r0, sl
 80834f0:	f7ff fe6c 	bl	80831cc <_localeconv_r>
 80834f4:	6807      	ldr	r7, [r0, #0]
 80834f6:	4650      	mov	r0, sl
 80834f8:	f7ff fe68 	bl	80831cc <_localeconv_r>
 80834fc:	6800      	ldr	r0, [r0, #0]
 80834fe:	f7ff feec 	bl	80832da <strlen>
 8083502:	4639      	mov	r1, r7
 8083504:	4602      	mov	r2, r0
 8083506:	4628      	mov	r0, r5
 8083508:	f7ff feef 	bl	80832ea <strncmp>
 808350c:	4607      	mov	r7, r0
 808350e:	b128      	cbz	r0, 808351c <_strtod_r+0x18c>
 8083510:	2000      	movs	r0, #0
 8083512:	4633      	mov	r3, r6
 8083514:	465d      	mov	r5, fp
 8083516:	4602      	mov	r2, r0
 8083518:	4601      	mov	r1, r0
 808351a:	e05a      	b.n	80835d2 <_strtod_r+0x242>
 808351c:	4650      	mov	r0, sl
 808351e:	f7ff fe55 	bl	80831cc <_localeconv_r>
 8083522:	6800      	ldr	r0, [r0, #0]
 8083524:	f7ff fed9 	bl	80832da <strlen>
 8083528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808352a:	181a      	adds	r2, r3, r0
 808352c:	9217      	str	r2, [sp, #92]	; 0x5c
 808352e:	5c1b      	ldrb	r3, [r3, r0]
 8083530:	f1bb 0f00 	cmp.w	fp, #0
 8083534:	d145      	bne.n	80835c2 <_strtod_r+0x232>
 8083536:	4658      	mov	r0, fp
 8083538:	2b30      	cmp	r3, #48	; 0x30
 808353a:	d105      	bne.n	8083548 <_strtod_r+0x1b8>
 808353c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808353e:	3001      	adds	r0, #1
 8083540:	1c5a      	adds	r2, r3, #1
 8083542:	9217      	str	r2, [sp, #92]	; 0x5c
 8083544:	785b      	ldrb	r3, [r3, #1]
 8083546:	e7f7      	b.n	8083538 <_strtod_r+0x1a8>
 8083548:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808354c:	2a08      	cmp	r2, #8
 808354e:	d846      	bhi.n	80835de <_strtod_r+0x24e>
 8083550:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8083552:	9206      	str	r2, [sp, #24]
 8083554:	4602      	mov	r2, r0
 8083556:	2000      	movs	r0, #0
 8083558:	4605      	mov	r5, r0
 808355a:	3b30      	subs	r3, #48	; 0x30
 808355c:	f100 0101 	add.w	r1, r0, #1
 8083560:	d029      	beq.n	80835b6 <_strtod_r+0x226>
 8083562:	440a      	add	r2, r1
 8083564:	4629      	mov	r1, r5
 8083566:	eb05 0c00 	add.w	ip, r5, r0
 808356a:	260a      	movs	r6, #10
 808356c:	4561      	cmp	r1, ip
 808356e:	d00f      	beq.n	8083590 <_strtod_r+0x200>
 8083570:	3101      	adds	r1, #1
 8083572:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8083576:	f1be 0f08 	cmp.w	lr, #8
 808357a:	dc03      	bgt.n	8083584 <_strtod_r+0x1f4>
 808357c:	9f04      	ldr	r7, [sp, #16]
 808357e:	4377      	muls	r7, r6
 8083580:	9704      	str	r7, [sp, #16]
 8083582:	e7f3      	b.n	808356c <_strtod_r+0x1dc>
 8083584:	2910      	cmp	r1, #16
 8083586:	bfde      	ittt	le
 8083588:	9f02      	ldrle	r7, [sp, #8]
 808358a:	4377      	mulle	r7, r6
 808358c:	9702      	strle	r7, [sp, #8]
 808358e:	e7ed      	b.n	808356c <_strtod_r+0x1dc>
 8083590:	4428      	add	r0, r5
 8083592:	2808      	cmp	r0, #8
 8083594:	f100 0501 	add.w	r5, r0, #1
 8083598:	dc05      	bgt.n	80835a6 <_strtod_r+0x216>
 808359a:	9804      	ldr	r0, [sp, #16]
 808359c:	210a      	movs	r1, #10
 808359e:	fb01 3300 	mla	r3, r1, r0, r3
 80835a2:	9304      	str	r3, [sp, #16]
 80835a4:	e006      	b.n	80835b4 <_strtod_r+0x224>
 80835a6:	2d10      	cmp	r5, #16
 80835a8:	bfdf      	itttt	le
 80835aa:	9802      	ldrle	r0, [sp, #8]
 80835ac:	210a      	movle	r1, #10
 80835ae:	fb01 3300 	mlale	r3, r1, r0, r3
 80835b2:	9302      	strle	r3, [sp, #8]
 80835b4:	2100      	movs	r1, #0
 80835b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80835b8:	1c58      	adds	r0, r3, #1
 80835ba:	9017      	str	r0, [sp, #92]	; 0x5c
 80835bc:	785b      	ldrb	r3, [r3, #1]
 80835be:	4608      	mov	r0, r1
 80835c0:	e002      	b.n	80835c8 <_strtod_r+0x238>
 80835c2:	465d      	mov	r5, fp
 80835c4:	4638      	mov	r0, r7
 80835c6:	463a      	mov	r2, r7
 80835c8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80835cc:	2909      	cmp	r1, #9
 80835ce:	d9c4      	bls.n	808355a <_strtod_r+0x1ca>
 80835d0:	2101      	movs	r1, #1
 80835d2:	2b65      	cmp	r3, #101	; 0x65
 80835d4:	d001      	beq.n	80835da <_strtod_r+0x24a>
 80835d6:	2b45      	cmp	r3, #69	; 0x45
 80835d8:	d14f      	bne.n	808367a <_strtod_r+0x2ea>
 80835da:	b96d      	cbnz	r5, 80835f8 <_strtod_r+0x268>
 80835dc:	e004      	b.n	80835e8 <_strtod_r+0x258>
 80835de:	2b65      	cmp	r3, #101	; 0x65
 80835e0:	f040 84ad 	bne.w	8083f3e <_strtod_r+0xbae>
 80835e4:	2200      	movs	r2, #0
 80835e6:	2101      	movs	r1, #1
 80835e8:	b928      	cbnz	r0, 80835f6 <_strtod_r+0x266>
 80835ea:	9b05      	ldr	r3, [sp, #20]
 80835ec:	2b00      	cmp	r3, #0
 80835ee:	f000 8092 	beq.w	8083716 <_strtod_r+0x386>
 80835f2:	4605      	mov	r5, r0
 80835f4:	e000      	b.n	80835f8 <_strtod_r+0x268>
 80835f6:	2500      	movs	r5, #0
 80835f8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80835fa:	1c63      	adds	r3, r4, #1
 80835fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80835fe:	7863      	ldrb	r3, [r4, #1]
 8083600:	2b2b      	cmp	r3, #43	; 0x2b
 8083602:	d006      	beq.n	8083612 <_strtod_r+0x282>
 8083604:	2b2d      	cmp	r3, #45	; 0x2d
 8083606:	d002      	beq.n	808360e <_strtod_r+0x27e>
 8083608:	2600      	movs	r6, #0
 808360a:	9603      	str	r6, [sp, #12]
 808360c:	e006      	b.n	808361c <_strtod_r+0x28c>
 808360e:	2301      	movs	r3, #1
 8083610:	e000      	b.n	8083614 <_strtod_r+0x284>
 8083612:	2300      	movs	r3, #0
 8083614:	9303      	str	r3, [sp, #12]
 8083616:	1ca3      	adds	r3, r4, #2
 8083618:	9317      	str	r3, [sp, #92]	; 0x5c
 808361a:	78a3      	ldrb	r3, [r4, #2]
 808361c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8083620:	2e09      	cmp	r6, #9
 8083622:	d829      	bhi.n	8083678 <_strtod_r+0x2e8>
 8083624:	2b30      	cmp	r3, #48	; 0x30
 8083626:	d104      	bne.n	8083632 <_strtod_r+0x2a2>
 8083628:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808362a:	1c5e      	adds	r6, r3, #1
 808362c:	9617      	str	r6, [sp, #92]	; 0x5c
 808362e:	785b      	ldrb	r3, [r3, #1]
 8083630:	e7f8      	b.n	8083624 <_strtod_r+0x294>
 8083632:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8083636:	2e08      	cmp	r6, #8
 8083638:	d81f      	bhi.n	808367a <_strtod_r+0x2ea>
 808363a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808363e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8083640:	461f      	mov	r7, r3
 8083642:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8083644:	1c5e      	adds	r6, r3, #1
 8083646:	9617      	str	r6, [sp, #92]	; 0x5c
 8083648:	785b      	ldrb	r3, [r3, #1]
 808364a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808364e:	f1bc 0f09 	cmp.w	ip, #9
 8083652:	d805      	bhi.n	8083660 <_strtod_r+0x2d0>
 8083654:	260a      	movs	r6, #10
 8083656:	fb06 3e0e 	mla	lr, r6, lr, r3
 808365a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808365e:	e7f0      	b.n	8083642 <_strtod_r+0x2b2>
 8083660:	1bf6      	subs	r6, r6, r7
 8083662:	2e08      	cmp	r6, #8
 8083664:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8083668:	dc02      	bgt.n	8083670 <_strtod_r+0x2e0>
 808366a:	4576      	cmp	r6, lr
 808366c:	bfa8      	it	ge
 808366e:	4676      	movge	r6, lr
 8083670:	9f03      	ldr	r7, [sp, #12]
 8083672:	b11f      	cbz	r7, 808367c <_strtod_r+0x2ec>
 8083674:	4276      	negs	r6, r6
 8083676:	e001      	b.n	808367c <_strtod_r+0x2ec>
 8083678:	9417      	str	r4, [sp, #92]	; 0x5c
 808367a:	2600      	movs	r6, #0
 808367c:	2d00      	cmp	r5, #0
 808367e:	d152      	bne.n	8083726 <_strtod_r+0x396>
 8083680:	2800      	cmp	r0, #0
 8083682:	f040 844e 	bne.w	8083f22 <_strtod_r+0xb92>
 8083686:	9a05      	ldr	r2, [sp, #20]
 8083688:	2a00      	cmp	r2, #0
 808368a:	f040 844a 	bne.w	8083f22 <_strtod_r+0xb92>
 808368e:	2900      	cmp	r1, #0
 8083690:	d141      	bne.n	8083716 <_strtod_r+0x386>
 8083692:	2b4e      	cmp	r3, #78	; 0x4e
 8083694:	d020      	beq.n	80836d8 <_strtod_r+0x348>
 8083696:	dc07      	bgt.n	80836a8 <_strtod_r+0x318>
 8083698:	2b49      	cmp	r3, #73	; 0x49
 808369a:	d00a      	beq.n	80836b2 <_strtod_r+0x322>
 808369c:	e03b      	b.n	8083716 <_strtod_r+0x386>
 808369e:	bf00      	nop
 80836a0:	08085bdc 	.word	0x08085bdc
 80836a4:	7ff00000 	.word	0x7ff00000
 80836a8:	2b69      	cmp	r3, #105	; 0x69
 80836aa:	d002      	beq.n	80836b2 <_strtod_r+0x322>
 80836ac:	2b6e      	cmp	r3, #110	; 0x6e
 80836ae:	d013      	beq.n	80836d8 <_strtod_r+0x348>
 80836b0:	e031      	b.n	8083716 <_strtod_r+0x386>
 80836b2:	49aa      	ldr	r1, [pc, #680]	; (808395c <_strtod_r+0x5cc>)
 80836b4:	a817      	add	r0, sp, #92	; 0x5c
 80836b6:	f001 fa17 	bl	8084ae8 <__match>
 80836ba:	b360      	cbz	r0, 8083716 <_strtod_r+0x386>
 80836bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80836be:	49a8      	ldr	r1, [pc, #672]	; (8083960 <_strtod_r+0x5d0>)
 80836c0:	3b01      	subs	r3, #1
 80836c2:	a817      	add	r0, sp, #92	; 0x5c
 80836c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80836c6:	f001 fa0f 	bl	8084ae8 <__match>
 80836ca:	b910      	cbnz	r0, 80836d2 <_strtod_r+0x342>
 80836cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80836ce:	3301      	adds	r3, #1
 80836d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80836d2:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808397c <_strtod_r+0x5ec>
 80836d6:	e01a      	b.n	808370e <_strtod_r+0x37e>
 80836d8:	49a2      	ldr	r1, [pc, #648]	; (8083964 <_strtod_r+0x5d4>)
 80836da:	a817      	add	r0, sp, #92	; 0x5c
 80836dc:	f001 fa04 	bl	8084ae8 <__match>
 80836e0:	b1c8      	cbz	r0, 8083716 <_strtod_r+0x386>
 80836e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80836e4:	781b      	ldrb	r3, [r3, #0]
 80836e6:	2b28      	cmp	r3, #40	; 0x28
 80836e8:	d10f      	bne.n	808370a <_strtod_r+0x37a>
 80836ea:	aa1a      	add	r2, sp, #104	; 0x68
 80836ec:	499e      	ldr	r1, [pc, #632]	; (8083968 <_strtod_r+0x5d8>)
 80836ee:	a817      	add	r0, sp, #92	; 0x5c
 80836f0:	f001 fa0d 	bl	8084b0e <__hexnan>
 80836f4:	2805      	cmp	r0, #5
 80836f6:	d108      	bne.n	808370a <_strtod_r+0x37a>
 80836f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80836fa:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80836fe:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8083702:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8083706:	f000 bc0c 	b.w	8083f22 <_strtod_r+0xb92>
 808370a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8083980 <_strtod_r+0x5f0>
 808370e:	f04f 0800 	mov.w	r8, #0
 8083712:	f000 bc06 	b.w	8083f22 <_strtod_r+0xb92>
 8083716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8083718:	9417      	str	r4, [sp, #92]	; 0x5c
 808371a:	2b00      	cmp	r3, #0
 808371c:	f000 840c 	beq.w	8083f38 <_strtod_r+0xba8>
 8083720:	2300      	movs	r3, #0
 8083722:	930c      	str	r3, [sp, #48]	; 0x30
 8083724:	e3ff      	b.n	8083f26 <_strtod_r+0xb96>
 8083726:	462c      	mov	r4, r5
 8083728:	f1bb 0f00 	cmp.w	fp, #0
 808372c:	bf08      	it	eq
 808372e:	46ab      	moveq	fp, r5
 8083730:	9804      	ldr	r0, [sp, #16]
 8083732:	2d10      	cmp	r5, #16
 8083734:	bfa8      	it	ge
 8083736:	2410      	movge	r4, #16
 8083738:	1ab7      	subs	r7, r6, r2
 808373a:	f7fe fe25 	bl	8082388 <__aeabi_ui2d>
 808373e:	2c09      	cmp	r4, #9
 8083740:	4680      	mov	r8, r0
 8083742:	4689      	mov	r9, r1
 8083744:	dd13      	ble.n	808376e <_strtod_r+0x3de>
 8083746:	4b89      	ldr	r3, [pc, #548]	; (808396c <_strtod_r+0x5dc>)
 8083748:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808374c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8083750:	f7fe fe90 	bl	8082474 <__aeabi_dmul>
 8083754:	4680      	mov	r8, r0
 8083756:	9802      	ldr	r0, [sp, #8]
 8083758:	4689      	mov	r9, r1
 808375a:	f7fe fe15 	bl	8082388 <__aeabi_ui2d>
 808375e:	4602      	mov	r2, r0
 8083760:	460b      	mov	r3, r1
 8083762:	4640      	mov	r0, r8
 8083764:	4649      	mov	r1, r9
 8083766:	f7fe fcd3 	bl	8082110 <__adddf3>
 808376a:	4680      	mov	r8, r0
 808376c:	4689      	mov	r9, r1
 808376e:	2d0f      	cmp	r5, #15
 8083770:	dc33      	bgt.n	80837da <_strtod_r+0x44a>
 8083772:	2f00      	cmp	r7, #0
 8083774:	f000 83d5 	beq.w	8083f22 <_strtod_r+0xb92>
 8083778:	dd22      	ble.n	80837c0 <_strtod_r+0x430>
 808377a:	2f16      	cmp	r7, #22
 808377c:	dc07      	bgt.n	808378e <_strtod_r+0x3fe>
 808377e:	4d7b      	ldr	r5, [pc, #492]	; (808396c <_strtod_r+0x5dc>)
 8083780:	4642      	mov	r2, r8
 8083782:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 8083786:	464b      	mov	r3, r9
 8083788:	e9d1 0100 	ldrd	r0, r1, [r1]
 808378c:	e013      	b.n	80837b6 <_strtod_r+0x426>
 808378e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8083792:	429f      	cmp	r7, r3
 8083794:	dc21      	bgt.n	80837da <_strtod_r+0x44a>
 8083796:	4c75      	ldr	r4, [pc, #468]	; (808396c <_strtod_r+0x5dc>)
 8083798:	f1c5 050f 	rsb	r5, r5, #15
 808379c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80837a0:	1b7d      	subs	r5, r7, r5
 80837a2:	4642      	mov	r2, r8
 80837a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80837a8:	464b      	mov	r3, r9
 80837aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80837ae:	f7fe fe61 	bl	8082474 <__aeabi_dmul>
 80837b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80837b6:	f7fe fe5d 	bl	8082474 <__aeabi_dmul>
 80837ba:	4680      	mov	r8, r0
 80837bc:	4689      	mov	r9, r1
 80837be:	e3b0      	b.n	8083f22 <_strtod_r+0xb92>
 80837c0:	f117 0f16 	cmn.w	r7, #22
 80837c4:	db09      	blt.n	80837da <_strtod_r+0x44a>
 80837c6:	4d69      	ldr	r5, [pc, #420]	; (808396c <_strtod_r+0x5dc>)
 80837c8:	4640      	mov	r0, r8
 80837ca:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80837ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80837d2:	4649      	mov	r1, r9
 80837d4:	f7fe ff78 	bl	80826c8 <__aeabi_ddiv>
 80837d8:	e7ef      	b.n	80837ba <_strtod_r+0x42a>
 80837da:	1b2c      	subs	r4, r5, r4
 80837dc:	443c      	add	r4, r7
 80837de:	2c00      	cmp	r4, #0
 80837e0:	dd5d      	ble.n	808389e <_strtod_r+0x50e>
 80837e2:	f014 010f 	ands.w	r1, r4, #15
 80837e6:	d00a      	beq.n	80837fe <_strtod_r+0x46e>
 80837e8:	4b60      	ldr	r3, [pc, #384]	; (808396c <_strtod_r+0x5dc>)
 80837ea:	4642      	mov	r2, r8
 80837ec:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80837f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80837f4:	464b      	mov	r3, r9
 80837f6:	f7fe fe3d 	bl	8082474 <__aeabi_dmul>
 80837fa:	4680      	mov	r8, r0
 80837fc:	4689      	mov	r9, r1
 80837fe:	f034 040f 	bics.w	r4, r4, #15
 8083802:	f000 80c1 	beq.w	8083988 <_strtod_r+0x5f8>
 8083806:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808380a:	dd0f      	ble.n	808382c <_strtod_r+0x49c>
 808380c:	f04f 0b00 	mov.w	fp, #0
 8083810:	f8cd b008 	str.w	fp, [sp, #8]
 8083814:	f8cd b014 	str.w	fp, [sp, #20]
 8083818:	f8cd b010 	str.w	fp, [sp, #16]
 808381c:	2322      	movs	r3, #34	; 0x22
 808381e:	f8ca 3000 	str.w	r3, [sl]
 8083822:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808397c <_strtod_r+0x5ec>
 8083826:	f04f 0800 	mov.w	r8, #0
 808382a:	e189      	b.n	8083b40 <_strtod_r+0x7b0>
 808382c:	4640      	mov	r0, r8
 808382e:	4649      	mov	r1, r9
 8083830:	2300      	movs	r3, #0
 8083832:	4e4f      	ldr	r6, [pc, #316]	; (8083970 <_strtod_r+0x5e0>)
 8083834:	1124      	asrs	r4, r4, #4
 8083836:	9302      	str	r3, [sp, #8]
 8083838:	2c01      	cmp	r4, #1
 808383a:	dd0c      	ble.n	8083856 <_strtod_r+0x4c6>
 808383c:	07e2      	lsls	r2, r4, #31
 808383e:	d504      	bpl.n	808384a <_strtod_r+0x4ba>
 8083840:	e9d6 2300 	ldrd	r2, r3, [r6]
 8083844:	f7fe fe16 	bl	8082474 <__aeabi_dmul>
 8083848:	2301      	movs	r3, #1
 808384a:	9a02      	ldr	r2, [sp, #8]
 808384c:	1064      	asrs	r4, r4, #1
 808384e:	3201      	adds	r2, #1
 8083850:	9202      	str	r2, [sp, #8]
 8083852:	3608      	adds	r6, #8
 8083854:	e7f0      	b.n	8083838 <_strtod_r+0x4a8>
 8083856:	b10b      	cbz	r3, 808385c <_strtod_r+0x4cc>
 8083858:	4680      	mov	r8, r0
 808385a:	4689      	mov	r9, r1
 808385c:	4b44      	ldr	r3, [pc, #272]	; (8083970 <_strtod_r+0x5e0>)
 808385e:	9a02      	ldr	r2, [sp, #8]
 8083860:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8083864:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8083868:	e9d1 0100 	ldrd	r0, r1, [r1]
 808386c:	4642      	mov	r2, r8
 808386e:	464b      	mov	r3, r9
 8083870:	f7fe fe00 	bl	8082474 <__aeabi_dmul>
 8083874:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8083878:	4689      	mov	r9, r1
 808387a:	460a      	mov	r2, r1
 808387c:	0d1b      	lsrs	r3, r3, #20
 808387e:	493d      	ldr	r1, [pc, #244]	; (8083974 <_strtod_r+0x5e4>)
 8083880:	051b      	lsls	r3, r3, #20
 8083882:	428b      	cmp	r3, r1
 8083884:	4680      	mov	r8, r0
 8083886:	d8c1      	bhi.n	808380c <_strtod_r+0x47c>
 8083888:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808388c:	428b      	cmp	r3, r1
 808388e:	bf86      	itte	hi
 8083890:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 8083984 <_strtod_r+0x5f4>
 8083894:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8083898:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808389c:	e074      	b.n	8083988 <_strtod_r+0x5f8>
 808389e:	d073      	beq.n	8083988 <_strtod_r+0x5f8>
 80838a0:	4264      	negs	r4, r4
 80838a2:	f014 020f 	ands.w	r2, r4, #15
 80838a6:	d00a      	beq.n	80838be <_strtod_r+0x52e>
 80838a8:	4b30      	ldr	r3, [pc, #192]	; (808396c <_strtod_r+0x5dc>)
 80838aa:	4640      	mov	r0, r8
 80838ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80838b0:	4649      	mov	r1, r9
 80838b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80838b6:	f7fe ff07 	bl	80826c8 <__aeabi_ddiv>
 80838ba:	4680      	mov	r8, r0
 80838bc:	4689      	mov	r9, r1
 80838be:	1124      	asrs	r4, r4, #4
 80838c0:	d062      	beq.n	8083988 <_strtod_r+0x5f8>
 80838c2:	2c1f      	cmp	r4, #31
 80838c4:	dd08      	ble.n	80838d8 <_strtod_r+0x548>
 80838c6:	f04f 0b00 	mov.w	fp, #0
 80838ca:	f8cd b008 	str.w	fp, [sp, #8]
 80838ce:	f8cd b014 	str.w	fp, [sp, #20]
 80838d2:	f8cd b010 	str.w	fp, [sp, #16]
 80838d6:	e12c      	b.n	8083b32 <_strtod_r+0x7a2>
 80838d8:	4640      	mov	r0, r8
 80838da:	4649      	mov	r1, r9
 80838dc:	f014 0f10 	tst.w	r4, #16
 80838e0:	bf0c      	ite	eq
 80838e2:	2300      	moveq	r3, #0
 80838e4:	236a      	movne	r3, #106	; 0x6a
 80838e6:	4e24      	ldr	r6, [pc, #144]	; (8083978 <_strtod_r+0x5e8>)
 80838e8:	9303      	str	r3, [sp, #12]
 80838ea:	2300      	movs	r3, #0
 80838ec:	2c00      	cmp	r4, #0
 80838ee:	dd09      	ble.n	8083904 <_strtod_r+0x574>
 80838f0:	07e2      	lsls	r2, r4, #31
 80838f2:	d504      	bpl.n	80838fe <_strtod_r+0x56e>
 80838f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80838f8:	f7fe fdbc 	bl	8082474 <__aeabi_dmul>
 80838fc:	2301      	movs	r3, #1
 80838fe:	1064      	asrs	r4, r4, #1
 8083900:	3608      	adds	r6, #8
 8083902:	e7f3      	b.n	80838ec <_strtod_r+0x55c>
 8083904:	b10b      	cbz	r3, 808390a <_strtod_r+0x57a>
 8083906:	4680      	mov	r8, r0
 8083908:	4689      	mov	r9, r1
 808390a:	9b03      	ldr	r3, [sp, #12]
 808390c:	b1eb      	cbz	r3, 808394a <_strtod_r+0x5ba>
 808390e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8083912:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8083916:	2b00      	cmp	r3, #0
 8083918:	4649      	mov	r1, r9
 808391a:	dd16      	ble.n	808394a <_strtod_r+0x5ba>
 808391c:	2b1f      	cmp	r3, #31
 808391e:	dd0e      	ble.n	808393e <_strtod_r+0x5ae>
 8083920:	2b34      	cmp	r3, #52	; 0x34
 8083922:	bfde      	ittt	le
 8083924:	3b20      	suble	r3, #32
 8083926:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 808392a:	fa02 f303 	lslle.w	r3, r2, r3
 808392e:	f04f 0800 	mov.w	r8, #0
 8083932:	bfcc      	ite	gt
 8083934:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8083938:	ea03 0901 	andle.w	r9, r3, r1
 808393c:	e005      	b.n	808394a <_strtod_r+0x5ba>
 808393e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8083942:	fa02 f303 	lsl.w	r3, r2, r3
 8083946:	ea03 0808 	and.w	r8, r3, r8
 808394a:	2200      	movs	r2, #0
 808394c:	2300      	movs	r3, #0
 808394e:	4640      	mov	r0, r8
 8083950:	4649      	mov	r1, r9
 8083952:	f7fe fff7 	bl	8082944 <__aeabi_dcmpeq>
 8083956:	2800      	cmp	r0, #0
 8083958:	d1b5      	bne.n	80838c6 <_strtod_r+0x536>
 808395a:	e017      	b.n	808398c <_strtod_r+0x5fc>
 808395c:	08085bf0 	.word	0x08085bf0
 8083960:	08085bf3 	.word	0x08085bf3
 8083964:	08085bf9 	.word	0x08085bf9
 8083968:	08085bfc 	.word	0x08085bfc
 808396c:	08085c78 	.word	0x08085c78
 8083970:	08085d40 	.word	0x08085d40
 8083974:	7ca00000 	.word	0x7ca00000
 8083978:	08085c10 	.word	0x08085c10
 808397c:	7ff00000 	.word	0x7ff00000
 8083980:	fff80000 	.word	0xfff80000
 8083984:	7fefffff 	.word	0x7fefffff
 8083988:	2300      	movs	r3, #0
 808398a:	9303      	str	r3, [sp, #12]
 808398c:	9b04      	ldr	r3, [sp, #16]
 808398e:	465a      	mov	r2, fp
 8083990:	9300      	str	r3, [sp, #0]
 8083992:	9906      	ldr	r1, [sp, #24]
 8083994:	462b      	mov	r3, r5
 8083996:	4650      	mov	r0, sl
 8083998:	f001 faad 	bl	8084ef6 <__s2b>
 808399c:	9005      	str	r0, [sp, #20]
 808399e:	2800      	cmp	r0, #0
 80839a0:	f43f af34 	beq.w	808380c <_strtod_r+0x47c>
 80839a4:	2f00      	cmp	r7, #0
 80839a6:	f1c7 0300 	rsb	r3, r7, #0
 80839aa:	bfa8      	it	ge
 80839ac:	2300      	movge	r3, #0
 80839ae:	930d      	str	r3, [sp, #52]	; 0x34
 80839b0:	f04f 0b00 	mov.w	fp, #0
 80839b4:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80839b8:	9312      	str	r3, [sp, #72]	; 0x48
 80839ba:	f8cd b008 	str.w	fp, [sp, #8]
 80839be:	9b05      	ldr	r3, [sp, #20]
 80839c0:	4650      	mov	r0, sl
 80839c2:	6859      	ldr	r1, [r3, #4]
 80839c4:	f001 fa10 	bl	8084de8 <_Balloc>
 80839c8:	9004      	str	r0, [sp, #16]
 80839ca:	2800      	cmp	r0, #0
 80839cc:	f43f af26 	beq.w	808381c <_strtod_r+0x48c>
 80839d0:	9b05      	ldr	r3, [sp, #20]
 80839d2:	300c      	adds	r0, #12
 80839d4:	691a      	ldr	r2, [r3, #16]
 80839d6:	f103 010c 	add.w	r1, r3, #12
 80839da:	3202      	adds	r2, #2
 80839dc:	0092      	lsls	r2, r2, #2
 80839de:	f7ff fbf9 	bl	80831d4 <memcpy>
 80839e2:	ab1a      	add	r3, sp, #104	; 0x68
 80839e4:	9301      	str	r3, [sp, #4]
 80839e6:	ab19      	add	r3, sp, #100	; 0x64
 80839e8:	9300      	str	r3, [sp, #0]
 80839ea:	4642      	mov	r2, r8
 80839ec:	464b      	mov	r3, r9
 80839ee:	4650      	mov	r0, sl
 80839f0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80839f4:	f001 fd2f 	bl	8085456 <__d2b>
 80839f8:	9018      	str	r0, [sp, #96]	; 0x60
 80839fa:	2800      	cmp	r0, #0
 80839fc:	f43f af0e 	beq.w	808381c <_strtod_r+0x48c>
 8083a00:	2101      	movs	r1, #1
 8083a02:	4650      	mov	r0, sl
 8083a04:	f001 fb02 	bl	808500c <__i2b>
 8083a08:	9002      	str	r0, [sp, #8]
 8083a0a:	2800      	cmp	r0, #0
 8083a0c:	f43f af06 	beq.w	808381c <_strtod_r+0x48c>
 8083a10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8083a12:	9903      	ldr	r1, [sp, #12]
 8083a14:	2b00      	cmp	r3, #0
 8083a16:	bfac      	ite	ge
 8083a18:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 8083a1a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8083a1c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8083a1e:	bfac      	ite	ge
 8083a20:	18d6      	addge	r6, r2, r3
 8083a22:	1ad2      	sublt	r2, r2, r3
 8083a24:	eba3 0301 	sub.w	r3, r3, r1
 8083a28:	4423      	add	r3, r4
 8083a2a:	49b1      	ldr	r1, [pc, #708]	; (8083cf0 <_strtod_r+0x960>)
 8083a2c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8083a30:	bfac      	ite	ge
 8083a32:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 8083a34:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 8083a36:	428b      	cmp	r3, r1
 8083a38:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 8083a3c:	f280 8085 	bge.w	8083b4a <_strtod_r+0x7ba>
 8083a40:	1ac9      	subs	r1, r1, r3
 8083a42:	291f      	cmp	r1, #31
 8083a44:	bfc8      	it	gt
 8083a46:	4dab      	ldrgt	r5, [pc, #684]	; (8083cf4 <_strtod_r+0x964>)
 8083a48:	f04f 0701 	mov.w	r7, #1
 8083a4c:	bfd4      	ite	le
 8083a4e:	fa07 f301 	lslle.w	r3, r7, r1
 8083a52:	1aed      	subgt	r5, r5, r3
 8083a54:	eba4 0401 	sub.w	r4, r4, r1
 8083a58:	bfd9      	ittee	le
 8083a5a:	9307      	strle	r3, [sp, #28]
 8083a5c:	2500      	movle	r5, #0
 8083a5e:	fa07 f505 	lslgt.w	r5, r7, r5
 8083a62:	9707      	strgt	r7, [sp, #28]
 8083a64:	1937      	adds	r7, r6, r4
 8083a66:	9b03      	ldr	r3, [sp, #12]
 8083a68:	42be      	cmp	r6, r7
 8083a6a:	4414      	add	r4, r2
 8083a6c:	441c      	add	r4, r3
 8083a6e:	4633      	mov	r3, r6
 8083a70:	bfa8      	it	ge
 8083a72:	463b      	movge	r3, r7
 8083a74:	42a3      	cmp	r3, r4
 8083a76:	bfa8      	it	ge
 8083a78:	4623      	movge	r3, r4
 8083a7a:	2b00      	cmp	r3, #0
 8083a7c:	bfc2      	ittt	gt
 8083a7e:	1aff      	subgt	r7, r7, r3
 8083a80:	1ae4      	subgt	r4, r4, r3
 8083a82:	1af6      	subgt	r6, r6, r3
 8083a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8083a86:	2b00      	cmp	r3, #0
 8083a88:	d163      	bne.n	8083b52 <_strtod_r+0x7c2>
 8083a8a:	2f00      	cmp	r7, #0
 8083a8c:	dc7a      	bgt.n	8083b84 <_strtod_r+0x7f4>
 8083a8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8083a90:	2b00      	cmp	r3, #0
 8083a92:	f040 8081 	bne.w	8083b98 <_strtod_r+0x808>
 8083a96:	2c00      	cmp	r4, #0
 8083a98:	f300 8088 	bgt.w	8083bac <_strtod_r+0x81c>
 8083a9c:	2e00      	cmp	r6, #0
 8083a9e:	f300 808f 	bgt.w	8083bc0 <_strtod_r+0x830>
 8083aa2:	9a04      	ldr	r2, [sp, #16]
 8083aa4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8083aa6:	4650      	mov	r0, sl
 8083aa8:	f001 fc05 	bl	80852b6 <__mdiff>
 8083aac:	4683      	mov	fp, r0
 8083aae:	2800      	cmp	r0, #0
 8083ab0:	f43f aeb4 	beq.w	808381c <_strtod_r+0x48c>
 8083ab4:	68c3      	ldr	r3, [r0, #12]
 8083ab6:	2400      	movs	r4, #0
 8083ab8:	60c4      	str	r4, [r0, #12]
 8083aba:	9902      	ldr	r1, [sp, #8]
 8083abc:	9306      	str	r3, [sp, #24]
 8083abe:	f001 fbde 	bl	808527e <__mcmp>
 8083ac2:	42a0      	cmp	r0, r4
 8083ac4:	f280 808b 	bge.w	8083bde <_strtod_r+0x84e>
 8083ac8:	9b06      	ldr	r3, [sp, #24]
 8083aca:	2b00      	cmp	r3, #0
 8083acc:	f040 8202 	bne.w	8083ed4 <_strtod_r+0xb44>
 8083ad0:	f1b8 0f00 	cmp.w	r8, #0
 8083ad4:	f040 81fe 	bne.w	8083ed4 <_strtod_r+0xb44>
 8083ad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8083adc:	2b00      	cmp	r3, #0
 8083ade:	f040 81f9 	bne.w	8083ed4 <_strtod_r+0xb44>
 8083ae2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8083ae6:	0d1b      	lsrs	r3, r3, #20
 8083ae8:	051b      	lsls	r3, r3, #20
 8083aea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8083aee:	f240 81f1 	bls.w	8083ed4 <_strtod_r+0xb44>
 8083af2:	f8db 3014 	ldr.w	r3, [fp, #20]
 8083af6:	2b00      	cmp	r3, #0
 8083af8:	d06c      	beq.n	8083bd4 <_strtod_r+0x844>
 8083afa:	4659      	mov	r1, fp
 8083afc:	2201      	movs	r2, #1
 8083afe:	4650      	mov	r0, sl
 8083b00:	f001 fb6c 	bl	80851dc <__lshift>
 8083b04:	9902      	ldr	r1, [sp, #8]
 8083b06:	4683      	mov	fp, r0
 8083b08:	f001 fbb9 	bl	808527e <__mcmp>
 8083b0c:	2800      	cmp	r0, #0
 8083b0e:	f340 81e1 	ble.w	8083ed4 <_strtod_r+0xb44>
 8083b12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8083b16:	9a03      	ldr	r2, [sp, #12]
 8083b18:	0d1b      	lsrs	r3, r3, #20
 8083b1a:	051b      	lsls	r3, r3, #20
 8083b1c:	2a00      	cmp	r2, #0
 8083b1e:	f000 808d 	beq.w	8083c3c <_strtod_r+0x8ac>
 8083b22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8083b26:	f300 8089 	bgt.w	8083c3c <_strtod_r+0x8ac>
 8083b2a:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8083b2e:	f300 81d3 	bgt.w	8083ed8 <_strtod_r+0xb48>
 8083b32:	2322      	movs	r3, #34	; 0x22
 8083b34:	f04f 0800 	mov.w	r8, #0
 8083b38:	f04f 0900 	mov.w	r9, #0
 8083b3c:	f8ca 3000 	str.w	r3, [sl]
 8083b40:	9b05      	ldr	r3, [sp, #20]
 8083b42:	2b00      	cmp	r3, #0
 8083b44:	f040 81d9 	bne.w	8083efa <_strtod_r+0xb6a>
 8083b48:	e1eb      	b.n	8083f22 <_strtod_r+0xb92>
 8083b4a:	2301      	movs	r3, #1
 8083b4c:	2500      	movs	r5, #0
 8083b4e:	9307      	str	r3, [sp, #28]
 8083b50:	e788      	b.n	8083a64 <_strtod_r+0x6d4>
 8083b52:	461a      	mov	r2, r3
 8083b54:	9902      	ldr	r1, [sp, #8]
 8083b56:	4650      	mov	r0, sl
 8083b58:	f001 faf2 	bl	8085140 <__pow5mult>
 8083b5c:	9002      	str	r0, [sp, #8]
 8083b5e:	2800      	cmp	r0, #0
 8083b60:	f43f ae5c 	beq.w	808381c <_strtod_r+0x48c>
 8083b64:	4601      	mov	r1, r0
 8083b66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8083b68:	4650      	mov	r0, sl
 8083b6a:	f001 fa58 	bl	808501e <__multiply>
 8083b6e:	9006      	str	r0, [sp, #24]
 8083b70:	2800      	cmp	r0, #0
 8083b72:	f43f ae53 	beq.w	808381c <_strtod_r+0x48c>
 8083b76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8083b78:	4650      	mov	r0, sl
 8083b7a:	f001 f96a 	bl	8084e52 <_Bfree>
 8083b7e:	9b06      	ldr	r3, [sp, #24]
 8083b80:	9318      	str	r3, [sp, #96]	; 0x60
 8083b82:	e782      	b.n	8083a8a <_strtod_r+0x6fa>
 8083b84:	463a      	mov	r2, r7
 8083b86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8083b88:	4650      	mov	r0, sl
 8083b8a:	f001 fb27 	bl	80851dc <__lshift>
 8083b8e:	9018      	str	r0, [sp, #96]	; 0x60
 8083b90:	2800      	cmp	r0, #0
 8083b92:	f47f af7c 	bne.w	8083a8e <_strtod_r+0x6fe>
 8083b96:	e641      	b.n	808381c <_strtod_r+0x48c>
 8083b98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8083b9a:	9904      	ldr	r1, [sp, #16]
 8083b9c:	4650      	mov	r0, sl
 8083b9e:	f001 facf 	bl	8085140 <__pow5mult>
 8083ba2:	9004      	str	r0, [sp, #16]
 8083ba4:	2800      	cmp	r0, #0
 8083ba6:	f47f af76 	bne.w	8083a96 <_strtod_r+0x706>
 8083baa:	e637      	b.n	808381c <_strtod_r+0x48c>
 8083bac:	4622      	mov	r2, r4
 8083bae:	9904      	ldr	r1, [sp, #16]
 8083bb0:	4650      	mov	r0, sl
 8083bb2:	f001 fb13 	bl	80851dc <__lshift>
 8083bb6:	9004      	str	r0, [sp, #16]
 8083bb8:	2800      	cmp	r0, #0
 8083bba:	f47f af6f 	bne.w	8083a9c <_strtod_r+0x70c>
 8083bbe:	e62d      	b.n	808381c <_strtod_r+0x48c>
 8083bc0:	4632      	mov	r2, r6
 8083bc2:	9902      	ldr	r1, [sp, #8]
 8083bc4:	4650      	mov	r0, sl
 8083bc6:	f001 fb09 	bl	80851dc <__lshift>
 8083bca:	9002      	str	r0, [sp, #8]
 8083bcc:	2800      	cmp	r0, #0
 8083bce:	f47f af68 	bne.w	8083aa2 <_strtod_r+0x712>
 8083bd2:	e623      	b.n	808381c <_strtod_r+0x48c>
 8083bd4:	f8db 3010 	ldr.w	r3, [fp, #16]
 8083bd8:	2b01      	cmp	r3, #1
 8083bda:	dc8e      	bgt.n	8083afa <_strtod_r+0x76a>
 8083bdc:	e17a      	b.n	8083ed4 <_strtod_r+0xb44>
 8083bde:	d161      	bne.n	8083ca4 <_strtod_r+0x914>
 8083be0:	9a06      	ldr	r2, [sp, #24]
 8083be2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8083be6:	b322      	cbz	r2, 8083c32 <_strtod_r+0x8a2>
 8083be8:	4943      	ldr	r1, [pc, #268]	; (8083cf8 <_strtod_r+0x968>)
 8083bea:	464a      	mov	r2, r9
 8083bec:	428b      	cmp	r3, r1
 8083bee:	d12e      	bne.n	8083c4e <_strtod_r+0x8be>
 8083bf0:	9b03      	ldr	r3, [sp, #12]
 8083bf2:	4641      	mov	r1, r8
 8083bf4:	b163      	cbz	r3, 8083c10 <_strtod_r+0x880>
 8083bf6:	4b41      	ldr	r3, [pc, #260]	; (8083cfc <_strtod_r+0x96c>)
 8083bf8:	4013      	ands	r3, r2
 8083bfa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8083bfe:	d807      	bhi.n	8083c10 <_strtod_r+0x880>
 8083c00:	0d1b      	lsrs	r3, r3, #20
 8083c02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8083c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8083c0a:	fa00 f303 	lsl.w	r3, r0, r3
 8083c0e:	e001      	b.n	8083c14 <_strtod_r+0x884>
 8083c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8083c14:	428b      	cmp	r3, r1
 8083c16:	d11a      	bne.n	8083c4e <_strtod_r+0x8be>
 8083c18:	4939      	ldr	r1, [pc, #228]	; (8083d00 <_strtod_r+0x970>)
 8083c1a:	428a      	cmp	r2, r1
 8083c1c:	d102      	bne.n	8083c24 <_strtod_r+0x894>
 8083c1e:	3301      	adds	r3, #1
 8083c20:	f43f adfc 	beq.w	808381c <_strtod_r+0x48c>
 8083c24:	4b35      	ldr	r3, [pc, #212]	; (8083cfc <_strtod_r+0x96c>)
 8083c26:	f04f 0800 	mov.w	r8, #0
 8083c2a:	4013      	ands	r3, r2
 8083c2c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8083c30:	e150      	b.n	8083ed4 <_strtod_r+0xb44>
 8083c32:	b963      	cbnz	r3, 8083c4e <_strtod_r+0x8be>
 8083c34:	f1b8 0f00 	cmp.w	r8, #0
 8083c38:	d109      	bne.n	8083c4e <_strtod_r+0x8be>
 8083c3a:	e76a      	b.n	8083b12 <_strtod_r+0x782>
 8083c3c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8083c40:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8083c44:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8083c48:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8083c4c:	e142      	b.n	8083ed4 <_strtod_r+0xb44>
 8083c4e:	b115      	cbz	r5, 8083c56 <_strtod_r+0x8c6>
 8083c50:	ea15 0f09 	tst.w	r5, r9
 8083c54:	e002      	b.n	8083c5c <_strtod_r+0x8cc>
 8083c56:	9b07      	ldr	r3, [sp, #28]
 8083c58:	ea13 0f08 	tst.w	r3, r8
 8083c5c:	f000 813a 	beq.w	8083ed4 <_strtod_r+0xb44>
 8083c60:	9b06      	ldr	r3, [sp, #24]
 8083c62:	9a03      	ldr	r2, [sp, #12]
 8083c64:	4640      	mov	r0, r8
 8083c66:	4649      	mov	r1, r9
 8083c68:	b153      	cbz	r3, 8083c80 <_strtod_r+0x8f0>
 8083c6a:	f7ff fb6d 	bl	8083348 <sulp>
 8083c6e:	4602      	mov	r2, r0
 8083c70:	460b      	mov	r3, r1
 8083c72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8083c76:	f7fe fa4b 	bl	8082110 <__adddf3>
 8083c7a:	4680      	mov	r8, r0
 8083c7c:	4689      	mov	r9, r1
 8083c7e:	e129      	b.n	8083ed4 <_strtod_r+0xb44>
 8083c80:	f7ff fb62 	bl	8083348 <sulp>
 8083c84:	4602      	mov	r2, r0
 8083c86:	460b      	mov	r3, r1
 8083c88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8083c8c:	f7fe fa3e 	bl	808210c <__aeabi_dsub>
 8083c90:	2200      	movs	r2, #0
 8083c92:	2300      	movs	r3, #0
 8083c94:	4680      	mov	r8, r0
 8083c96:	4689      	mov	r9, r1
 8083c98:	f7fe fe54 	bl	8082944 <__aeabi_dcmpeq>
 8083c9c:	2800      	cmp	r0, #0
 8083c9e:	f47f af48 	bne.w	8083b32 <_strtod_r+0x7a2>
 8083ca2:	e117      	b.n	8083ed4 <_strtod_r+0xb44>
 8083ca4:	9902      	ldr	r1, [sp, #8]
 8083ca6:	4658      	mov	r0, fp
 8083ca8:	f001 fc23 	bl	80854f2 <__ratio>
 8083cac:	2200      	movs	r2, #0
 8083cae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8083cb2:	4606      	mov	r6, r0
 8083cb4:	460f      	mov	r7, r1
 8083cb6:	f7fe fe59 	bl	808296c <__aeabi_dcmple>
 8083cba:	2800      	cmp	r0, #0
 8083cbc:	d03f      	beq.n	8083d3e <_strtod_r+0x9ae>
 8083cbe:	9b06      	ldr	r3, [sp, #24]
 8083cc0:	b113      	cbz	r3, 8083cc8 <_strtod_r+0x938>
 8083cc2:	2600      	movs	r6, #0
 8083cc4:	4f0f      	ldr	r7, [pc, #60]	; (8083d04 <_strtod_r+0x974>)
 8083cc6:	e010      	b.n	8083cea <_strtod_r+0x95a>
 8083cc8:	f1b8 0f00 	cmp.w	r8, #0
 8083ccc:	d103      	bne.n	8083cd6 <_strtod_r+0x946>
 8083cce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8083cd2:	b93b      	cbnz	r3, 8083ce4 <_strtod_r+0x954>
 8083cd4:	e01a      	b.n	8083d0c <_strtod_r+0x97c>
 8083cd6:	f1b8 0f01 	cmp.w	r8, #1
 8083cda:	d103      	bne.n	8083ce4 <_strtod_r+0x954>
 8083cdc:	f1b9 0f00 	cmp.w	r9, #0
 8083ce0:	f43f af27 	beq.w	8083b32 <_strtod_r+0x7a2>
 8083ce4:	4f08      	ldr	r7, [pc, #32]	; (8083d08 <_strtod_r+0x978>)
 8083ce6:	2600      	movs	r6, #0
 8083ce8:	2400      	movs	r4, #0
 8083cea:	4d06      	ldr	r5, [pc, #24]	; (8083d04 <_strtod_r+0x974>)
 8083cec:	e03c      	b.n	8083d68 <_strtod_r+0x9d8>
 8083cee:	bf00      	nop
 8083cf0:	fffffc02 	.word	0xfffffc02
 8083cf4:	fffffbe2 	.word	0xfffffbe2
 8083cf8:	000fffff 	.word	0x000fffff
 8083cfc:	7ff00000 	.word	0x7ff00000
 8083d00:	7fefffff 	.word	0x7fefffff
 8083d04:	3ff00000 	.word	0x3ff00000
 8083d08:	bff00000 	.word	0xbff00000
 8083d0c:	2200      	movs	r2, #0
 8083d0e:	4b9a      	ldr	r3, [pc, #616]	; (8083f78 <_strtod_r+0xbe8>)
 8083d10:	4630      	mov	r0, r6
 8083d12:	4639      	mov	r1, r7
 8083d14:	f7fe fe20 	bl	8082958 <__aeabi_dcmplt>
 8083d18:	b940      	cbnz	r0, 8083d2c <_strtod_r+0x99c>
 8083d1a:	2200      	movs	r2, #0
 8083d1c:	4b97      	ldr	r3, [pc, #604]	; (8083f7c <_strtod_r+0xbec>)
 8083d1e:	4630      	mov	r0, r6
 8083d20:	4639      	mov	r1, r7
 8083d22:	f7fe fba7 	bl	8082474 <__aeabi_dmul>
 8083d26:	4604      	mov	r4, r0
 8083d28:	460d      	mov	r5, r1
 8083d2a:	e001      	b.n	8083d30 <_strtod_r+0x9a0>
 8083d2c:	9c06      	ldr	r4, [sp, #24]
 8083d2e:	4d93      	ldr	r5, [pc, #588]	; (8083f7c <_strtod_r+0xbec>)
 8083d30:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8083d34:	9414      	str	r4, [sp, #80]	; 0x50
 8083d36:	9315      	str	r3, [sp, #84]	; 0x54
 8083d38:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 8083d3c:	e014      	b.n	8083d68 <_strtod_r+0x9d8>
 8083d3e:	4b8f      	ldr	r3, [pc, #572]	; (8083f7c <_strtod_r+0xbec>)
 8083d40:	2200      	movs	r2, #0
 8083d42:	4630      	mov	r0, r6
 8083d44:	4639      	mov	r1, r7
 8083d46:	f7fe fb95 	bl	8082474 <__aeabi_dmul>
 8083d4a:	9b06      	ldr	r3, [sp, #24]
 8083d4c:	4604      	mov	r4, r0
 8083d4e:	460d      	mov	r5, r1
 8083d50:	b923      	cbnz	r3, 8083d5c <_strtod_r+0x9cc>
 8083d52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8083d56:	900e      	str	r0, [sp, #56]	; 0x38
 8083d58:	930f      	str	r3, [sp, #60]	; 0x3c
 8083d5a:	e003      	b.n	8083d64 <_strtod_r+0x9d4>
 8083d5c:	4602      	mov	r2, r0
 8083d5e:	460b      	mov	r3, r1
 8083d60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8083d64:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8083d68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8083d6c:	0d1b      	lsrs	r3, r3, #20
 8083d6e:	051b      	lsls	r3, r3, #20
 8083d70:	9307      	str	r3, [sp, #28]
 8083d72:	9a07      	ldr	r2, [sp, #28]
 8083d74:	4b82      	ldr	r3, [pc, #520]	; (8083f80 <_strtod_r+0xbf0>)
 8083d76:	429a      	cmp	r2, r3
 8083d78:	d12b      	bne.n	8083dd2 <_strtod_r+0xa42>
 8083d7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8083d7e:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8083d82:	4640      	mov	r0, r8
 8083d84:	4649      	mov	r1, r9
 8083d86:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8083d8a:	f001 faf3 	bl	8085374 <__ulp>
 8083d8e:	4602      	mov	r2, r0
 8083d90:	460b      	mov	r3, r1
 8083d92:	4630      	mov	r0, r6
 8083d94:	4639      	mov	r1, r7
 8083d96:	f7fe fb6d 	bl	8082474 <__aeabi_dmul>
 8083d9a:	4642      	mov	r2, r8
 8083d9c:	464b      	mov	r3, r9
 8083d9e:	f7fe f9b7 	bl	8082110 <__adddf3>
 8083da2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8083da6:	0d1b      	lsrs	r3, r3, #20
 8083da8:	4a76      	ldr	r2, [pc, #472]	; (8083f84 <_strtod_r+0xbf4>)
 8083daa:	051b      	lsls	r3, r3, #20
 8083dac:	4293      	cmp	r3, r2
 8083dae:	4680      	mov	r8, r0
 8083db0:	d90c      	bls.n	8083dcc <_strtod_r+0xa3c>
 8083db2:	4b75      	ldr	r3, [pc, #468]	; (8083f88 <_strtod_r+0xbf8>)
 8083db4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8083db6:	429a      	cmp	r2, r3
 8083db8:	d103      	bne.n	8083dc2 <_strtod_r+0xa32>
 8083dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8083dbc:	3301      	adds	r3, #1
 8083dbe:	f43f ad2d 	beq.w	808381c <_strtod_r+0x48c>
 8083dc2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8083f88 <_strtod_r+0xbf8>
 8083dc6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8083dca:	e072      	b.n	8083eb2 <_strtod_r+0xb22>
 8083dcc:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8083dd0:	e039      	b.n	8083e46 <_strtod_r+0xab6>
 8083dd2:	9b03      	ldr	r3, [sp, #12]
 8083dd4:	b33b      	cbz	r3, 8083e26 <_strtod_r+0xa96>
 8083dd6:	9b07      	ldr	r3, [sp, #28]
 8083dd8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8083ddc:	d823      	bhi.n	8083e26 <_strtod_r+0xa96>
 8083dde:	a35e      	add	r3, pc, #376	; (adr r3, 8083f58 <_strtod_r+0xbc8>)
 8083de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083de4:	4620      	mov	r0, r4
 8083de6:	4629      	mov	r1, r5
 8083de8:	f7fe fdc0 	bl	808296c <__aeabi_dcmple>
 8083dec:	b1b8      	cbz	r0, 8083e1e <_strtod_r+0xa8e>
 8083dee:	4629      	mov	r1, r5
 8083df0:	4620      	mov	r0, r4
 8083df2:	f7fe fe17 	bl	8082a24 <__aeabi_d2uiz>
 8083df6:	2800      	cmp	r0, #0
 8083df8:	bf08      	it	eq
 8083dfa:	2001      	moveq	r0, #1
 8083dfc:	f7fe fac4 	bl	8082388 <__aeabi_ui2d>
 8083e00:	9b06      	ldr	r3, [sp, #24]
 8083e02:	4604      	mov	r4, r0
 8083e04:	460d      	mov	r5, r1
 8083e06:	b923      	cbnz	r3, 8083e12 <_strtod_r+0xa82>
 8083e08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8083e0c:	9010      	str	r0, [sp, #64]	; 0x40
 8083e0e:	9311      	str	r3, [sp, #68]	; 0x44
 8083e10:	e003      	b.n	8083e1a <_strtod_r+0xa8a>
 8083e12:	4602      	mov	r2, r0
 8083e14:	460b      	mov	r3, r1
 8083e16:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8083e1a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8083e1e:	9a07      	ldr	r2, [sp, #28]
 8083e20:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8083e24:	1a9f      	subs	r7, r3, r2
 8083e26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8083e2a:	f001 faa3 	bl	8085374 <__ulp>
 8083e2e:	4602      	mov	r2, r0
 8083e30:	460b      	mov	r3, r1
 8083e32:	4630      	mov	r0, r6
 8083e34:	4639      	mov	r1, r7
 8083e36:	f7fe fb1d 	bl	8082474 <__aeabi_dmul>
 8083e3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8083e3e:	f7fe f967 	bl	8082110 <__adddf3>
 8083e42:	4680      	mov	r8, r0
 8083e44:	4689      	mov	r9, r1
 8083e46:	9b03      	ldr	r3, [sp, #12]
 8083e48:	bb9b      	cbnz	r3, 8083eb2 <_strtod_r+0xb22>
 8083e4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8083e4e:	0d1b      	lsrs	r3, r3, #20
 8083e50:	9a07      	ldr	r2, [sp, #28]
 8083e52:	051b      	lsls	r3, r3, #20
 8083e54:	429a      	cmp	r2, r3
 8083e56:	464e      	mov	r6, r9
 8083e58:	d12b      	bne.n	8083eb2 <_strtod_r+0xb22>
 8083e5a:	4629      	mov	r1, r5
 8083e5c:	4620      	mov	r0, r4
 8083e5e:	f7fe fdb9 	bl	80829d4 <__aeabi_d2iz>
 8083e62:	f7fe faa1 	bl	80823a8 <__aeabi_i2d>
 8083e66:	460b      	mov	r3, r1
 8083e68:	4602      	mov	r2, r0
 8083e6a:	4629      	mov	r1, r5
 8083e6c:	4620      	mov	r0, r4
 8083e6e:	f7fe f94d 	bl	808210c <__aeabi_dsub>
 8083e72:	9b06      	ldr	r3, [sp, #24]
 8083e74:	4604      	mov	r4, r0
 8083e76:	460d      	mov	r5, r1
 8083e78:	b92b      	cbnz	r3, 8083e86 <_strtod_r+0xaf6>
 8083e7a:	f1b8 0f00 	cmp.w	r8, #0
 8083e7e:	d102      	bne.n	8083e86 <_strtod_r+0xaf6>
 8083e80:	f3c9 0613 	ubfx	r6, r9, #0, #20
 8083e84:	b17e      	cbz	r6, 8083ea6 <_strtod_r+0xb16>
 8083e86:	a336      	add	r3, pc, #216	; (adr r3, 8083f60 <_strtod_r+0xbd0>)
 8083e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083e8c:	4620      	mov	r0, r4
 8083e8e:	4629      	mov	r1, r5
 8083e90:	f7fe fd62 	bl	8082958 <__aeabi_dcmplt>
 8083e94:	bb88      	cbnz	r0, 8083efa <_strtod_r+0xb6a>
 8083e96:	a334      	add	r3, pc, #208	; (adr r3, 8083f68 <_strtod_r+0xbd8>)
 8083e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083e9c:	4620      	mov	r0, r4
 8083e9e:	4629      	mov	r1, r5
 8083ea0:	f7fe fd78 	bl	8082994 <__aeabi_dcmpgt>
 8083ea4:	e004      	b.n	8083eb0 <_strtod_r+0xb20>
 8083ea6:	a332      	add	r3, pc, #200	; (adr r3, 8083f70 <_strtod_r+0xbe0>)
 8083ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083eac:	f7fe fd54 	bl	8082958 <__aeabi_dcmplt>
 8083eb0:	bb18      	cbnz	r0, 8083efa <_strtod_r+0xb6a>
 8083eb2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8083eb4:	4650      	mov	r0, sl
 8083eb6:	f000 ffcc 	bl	8084e52 <_Bfree>
 8083eba:	9904      	ldr	r1, [sp, #16]
 8083ebc:	4650      	mov	r0, sl
 8083ebe:	f000 ffc8 	bl	8084e52 <_Bfree>
 8083ec2:	9902      	ldr	r1, [sp, #8]
 8083ec4:	4650      	mov	r0, sl
 8083ec6:	f000 ffc4 	bl	8084e52 <_Bfree>
 8083eca:	4659      	mov	r1, fp
 8083ecc:	4650      	mov	r0, sl
 8083ece:	f000 ffc0 	bl	8084e52 <_Bfree>
 8083ed2:	e574      	b.n	80839be <_strtod_r+0x62e>
 8083ed4:	9b03      	ldr	r3, [sp, #12]
 8083ed6:	b183      	cbz	r3, 8083efa <_strtod_r+0xb6a>
 8083ed8:	4b2c      	ldr	r3, [pc, #176]	; (8083f8c <_strtod_r+0xbfc>)
 8083eda:	4640      	mov	r0, r8
 8083edc:	930b      	str	r3, [sp, #44]	; 0x2c
 8083ede:	2300      	movs	r3, #0
 8083ee0:	930a      	str	r3, [sp, #40]	; 0x28
 8083ee2:	4649      	mov	r1, r9
 8083ee4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8083ee8:	f7fe fac4 	bl	8082474 <__aeabi_dmul>
 8083eec:	4680      	mov	r8, r0
 8083eee:	4689      	mov	r9, r1
 8083ef0:	b919      	cbnz	r1, 8083efa <_strtod_r+0xb6a>
 8083ef2:	b910      	cbnz	r0, 8083efa <_strtod_r+0xb6a>
 8083ef4:	2322      	movs	r3, #34	; 0x22
 8083ef6:	f8ca 3000 	str.w	r3, [sl]
 8083efa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8083efc:	4650      	mov	r0, sl
 8083efe:	f000 ffa8 	bl	8084e52 <_Bfree>
 8083f02:	9904      	ldr	r1, [sp, #16]
 8083f04:	4650      	mov	r0, sl
 8083f06:	f000 ffa4 	bl	8084e52 <_Bfree>
 8083f0a:	9902      	ldr	r1, [sp, #8]
 8083f0c:	4650      	mov	r0, sl
 8083f0e:	f000 ffa0 	bl	8084e52 <_Bfree>
 8083f12:	9905      	ldr	r1, [sp, #20]
 8083f14:	4650      	mov	r0, sl
 8083f16:	f000 ff9c 	bl	8084e52 <_Bfree>
 8083f1a:	4659      	mov	r1, fp
 8083f1c:	4650      	mov	r0, sl
 8083f1e:	f000 ff98 	bl	8084e52 <_Bfree>
 8083f22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8083f24:	b113      	cbz	r3, 8083f2c <_strtod_r+0xb9c>
 8083f26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8083f28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8083f2a:	6013      	str	r3, [r2, #0]
 8083f2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8083f2e:	b11b      	cbz	r3, 8083f38 <_strtod_r+0xba8>
 8083f30:	4642      	mov	r2, r8
 8083f32:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8083f36:	e007      	b.n	8083f48 <_strtod_r+0xbb8>
 8083f38:	4642      	mov	r2, r8
 8083f3a:	464b      	mov	r3, r9
 8083f3c:	e004      	b.n	8083f48 <_strtod_r+0xbb8>
 8083f3e:	2500      	movs	r5, #0
 8083f40:	462a      	mov	r2, r5
 8083f42:	2101      	movs	r1, #1
 8083f44:	f7ff bb47 	b.w	80835d6 <_strtod_r+0x246>
 8083f48:	4610      	mov	r0, r2
 8083f4a:	4619      	mov	r1, r3
 8083f4c:	b01d      	add	sp, #116	; 0x74
 8083f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083f52:	bf00      	nop
 8083f54:	f3af 8000 	nop.w
 8083f58:	ffc00000 	.word	0xffc00000
 8083f5c:	41dfffff 	.word	0x41dfffff
 8083f60:	94a03595 	.word	0x94a03595
 8083f64:	3fdfffff 	.word	0x3fdfffff
 8083f68:	35afe535 	.word	0x35afe535
 8083f6c:	3fe00000 	.word	0x3fe00000
 8083f70:	94a03595 	.word	0x94a03595
 8083f74:	3fcfffff 	.word	0x3fcfffff
 8083f78:	3ff00000 	.word	0x3ff00000
 8083f7c:	3fe00000 	.word	0x3fe00000
 8083f80:	7fe00000 	.word	0x7fe00000
 8083f84:	7c9fffff 	.word	0x7c9fffff
 8083f88:	7fefffff 	.word	0x7fefffff
 8083f8c:	39500000 	.word	0x39500000

08083f90 <strtof>:
 8083f90:	b538      	push	{r3, r4, r5, lr}
 8083f92:	4b0b      	ldr	r3, [pc, #44]	; (8083fc0 <strtof+0x30>)
 8083f94:	460a      	mov	r2, r1
 8083f96:	4601      	mov	r1, r0
 8083f98:	6818      	ldr	r0, [r3, #0]
 8083f9a:	f7ff f9f9 	bl	8083390 <_strtod_r>
 8083f9e:	4602      	mov	r2, r0
 8083fa0:	460b      	mov	r3, r1
 8083fa2:	4604      	mov	r4, r0
 8083fa4:	460d      	mov	r5, r1
 8083fa6:	f7fe fcff 	bl	80829a8 <__aeabi_dcmpun>
 8083faa:	b120      	cbz	r0, 8083fb6 <strtof+0x26>
 8083fac:	2000      	movs	r0, #0
 8083fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8083fb2:	f001 bb11 	b.w	80855d8 <nanf>
 8083fb6:	4620      	mov	r0, r4
 8083fb8:	4629      	mov	r1, r5
 8083fba:	f7fe fd53 	bl	8082a64 <__aeabi_d2f>
 8083fbe:	bd38      	pop	{r3, r4, r5, pc}
 8083fc0:	2000046c 	.word	0x2000046c

08083fc4 <strtok>:
 8083fc4:	4b17      	ldr	r3, [pc, #92]	; (8084024 <strtok+0x60>)
 8083fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083fca:	681d      	ldr	r5, [r3, #0]
 8083fcc:	4606      	mov	r6, r0
 8083fce:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8083fd0:	460f      	mov	r7, r1
 8083fd2:	b9fc      	cbnz	r4, 8084014 <strtok+0x50>
 8083fd4:	2050      	movs	r0, #80	; 0x50
 8083fd6:	f7fc fcdb 	bl	8080990 <malloc>
 8083fda:	65a8      	str	r0, [r5, #88]	; 0x58
 8083fdc:	6084      	str	r4, [r0, #8]
 8083fde:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8083fe0:	6004      	str	r4, [r0, #0]
 8083fe2:	6044      	str	r4, [r0, #4]
 8083fe4:	611c      	str	r4, [r3, #16]
 8083fe6:	60dc      	str	r4, [r3, #12]
 8083fe8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8083fea:	619c      	str	r4, [r3, #24]
 8083fec:	615c      	str	r4, [r3, #20]
 8083fee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8083ff0:	62dc      	str	r4, [r3, #44]	; 0x2c
 8083ff2:	629c      	str	r4, [r3, #40]	; 0x28
 8083ff4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8083ff6:	635c      	str	r4, [r3, #52]	; 0x34
 8083ff8:	631c      	str	r4, [r3, #48]	; 0x30
 8083ffa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8083ffc:	63dc      	str	r4, [r3, #60]	; 0x3c
 8083ffe:	639c      	str	r4, [r3, #56]	; 0x38
 8084000:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8084002:	645c      	str	r4, [r3, #68]	; 0x44
 8084004:	641c      	str	r4, [r3, #64]	; 0x40
 8084006:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8084008:	64dc      	str	r4, [r3, #76]	; 0x4c
 808400a:	649c      	str	r4, [r3, #72]	; 0x48
 808400c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 808400e:	771c      	strb	r4, [r3, #28]
 8084010:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8084012:	625c      	str	r4, [r3, #36]	; 0x24
 8084014:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8084016:	4639      	mov	r1, r7
 8084018:	4630      	mov	r0, r6
 808401a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 808401e:	2301      	movs	r3, #1
 8084020:	f000 b802 	b.w	8084028 <__strtok_r>
 8084024:	2000046c 	.word	0x2000046c

08084028 <__strtok_r>:
 8084028:	b5f0      	push	{r4, r5, r6, r7, lr}
 808402a:	b948      	cbnz	r0, 8084040 <__strtok_r+0x18>
 808402c:	6810      	ldr	r0, [r2, #0]
 808402e:	b938      	cbnz	r0, 8084040 <__strtok_r+0x18>
 8084030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084032:	f817 6b01 	ldrb.w	r6, [r7], #1
 8084036:	b15e      	cbz	r6, 8084050 <__strtok_r+0x28>
 8084038:	42b5      	cmp	r5, r6
 808403a:	d1fa      	bne.n	8084032 <__strtok_r+0xa>
 808403c:	b12b      	cbz	r3, 808404a <__strtok_r+0x22>
 808403e:	4620      	mov	r0, r4
 8084040:	4604      	mov	r4, r0
 8084042:	460f      	mov	r7, r1
 8084044:	f814 5b01 	ldrb.w	r5, [r4], #1
 8084048:	e7f3      	b.n	8084032 <__strtok_r+0xa>
 808404a:	6014      	str	r4, [r2, #0]
 808404c:	7003      	strb	r3, [r0, #0]
 808404e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084050:	b94d      	cbnz	r5, 8084066 <__strtok_r+0x3e>
 8084052:	6015      	str	r5, [r2, #0]
 8084054:	4628      	mov	r0, r5
 8084056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084058:	f817 6b01 	ldrb.w	r6, [r7], #1
 808405c:	42b5      	cmp	r5, r6
 808405e:	d007      	beq.n	8084070 <__strtok_r+0x48>
 8084060:	2e00      	cmp	r6, #0
 8084062:	d1f9      	bne.n	8084058 <__strtok_r+0x30>
 8084064:	461c      	mov	r4, r3
 8084066:	4623      	mov	r3, r4
 8084068:	460f      	mov	r7, r1
 808406a:	f813 5b01 	ldrb.w	r5, [r3], #1
 808406e:	e7f3      	b.n	8084058 <__strtok_r+0x30>
 8084070:	b115      	cbz	r5, 8084078 <__strtok_r+0x50>
 8084072:	2100      	movs	r1, #0
 8084074:	7021      	strb	r1, [r4, #0]
 8084076:	e000      	b.n	808407a <__strtok_r+0x52>
 8084078:	462b      	mov	r3, r5
 808407a:	6013      	str	r3, [r2, #0]
 808407c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08084080 <_strtoul_r>:
 8084080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084084:	460e      	mov	r6, r1
 8084086:	4680      	mov	r8, r0
 8084088:	483b      	ldr	r0, [pc, #236]	; (8084178 <_strtoul_r+0xf8>)
 808408a:	f8d0 9000 	ldr.w	r9, [r0]
 808408e:	4635      	mov	r5, r6
 8084090:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084094:	eb09 0004 	add.w	r0, r9, r4
 8084098:	7840      	ldrb	r0, [r0, #1]
 808409a:	f000 0008 	and.w	r0, r0, #8
 808409e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80840a2:	b108      	cbz	r0, 80840a8 <_strtoul_r+0x28>
 80840a4:	462e      	mov	r6, r5
 80840a6:	e7f2      	b.n	808408e <_strtoul_r+0xe>
 80840a8:	2c2d      	cmp	r4, #45	; 0x2d
 80840aa:	d103      	bne.n	80840b4 <_strtoul_r+0x34>
 80840ac:	1cb5      	adds	r5, r6, #2
 80840ae:	7874      	ldrb	r4, [r6, #1]
 80840b0:	2701      	movs	r7, #1
 80840b2:	e003      	b.n	80840bc <_strtoul_r+0x3c>
 80840b4:	2c2b      	cmp	r4, #43	; 0x2b
 80840b6:	bf04      	itt	eq
 80840b8:	7874      	ldrbeq	r4, [r6, #1]
 80840ba:	1cb5      	addeq	r5, r6, #2
 80840bc:	b113      	cbz	r3, 80840c4 <_strtoul_r+0x44>
 80840be:	2b10      	cmp	r3, #16
 80840c0:	d10a      	bne.n	80840d8 <_strtoul_r+0x58>
 80840c2:	e053      	b.n	808416c <_strtoul_r+0xec>
 80840c4:	2c30      	cmp	r4, #48	; 0x30
 80840c6:	d14f      	bne.n	8084168 <_strtoul_r+0xe8>
 80840c8:	7828      	ldrb	r0, [r5, #0]
 80840ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80840ce:	2858      	cmp	r0, #88	; 0x58
 80840d0:	d145      	bne.n	808415e <_strtoul_r+0xde>
 80840d2:	786c      	ldrb	r4, [r5, #1]
 80840d4:	2310      	movs	r3, #16
 80840d6:	3502      	adds	r5, #2
 80840d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80840dc:	fbbc fcf3 	udiv	ip, ip, r3
 80840e0:	fb03 fa0c 	mul.w	sl, r3, ip
 80840e4:	2600      	movs	r6, #0
 80840e6:	ea6f 0a0a 	mvn.w	sl, sl
 80840ea:	4630      	mov	r0, r6
 80840ec:	eb09 0e04 	add.w	lr, r9, r4
 80840f0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80840f4:	f01e 0f04 	tst.w	lr, #4
 80840f8:	d001      	beq.n	80840fe <_strtoul_r+0x7e>
 80840fa:	3c30      	subs	r4, #48	; 0x30
 80840fc:	e00b      	b.n	8084116 <_strtoul_r+0x96>
 80840fe:	f01e 0e03 	ands.w	lr, lr, #3
 8084102:	d01a      	beq.n	808413a <_strtoul_r+0xba>
 8084104:	f1be 0f01 	cmp.w	lr, #1
 8084108:	bf0c      	ite	eq
 808410a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808410e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084112:	ebce 0404 	rsb	r4, lr, r4
 8084116:	42a3      	cmp	r3, r4
 8084118:	dd0f      	ble.n	808413a <_strtoul_r+0xba>
 808411a:	2e00      	cmp	r6, #0
 808411c:	db08      	blt.n	8084130 <_strtoul_r+0xb0>
 808411e:	4560      	cmp	r0, ip
 8084120:	d806      	bhi.n	8084130 <_strtoul_r+0xb0>
 8084122:	d101      	bne.n	8084128 <_strtoul_r+0xa8>
 8084124:	4554      	cmp	r4, sl
 8084126:	dc03      	bgt.n	8084130 <_strtoul_r+0xb0>
 8084128:	fb03 4000 	mla	r0, r3, r0, r4
 808412c:	2601      	movs	r6, #1
 808412e:	e001      	b.n	8084134 <_strtoul_r+0xb4>
 8084130:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8084134:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084138:	e7d8      	b.n	80840ec <_strtoul_r+0x6c>
 808413a:	2e00      	cmp	r6, #0
 808413c:	da07      	bge.n	808414e <_strtoul_r+0xce>
 808413e:	2322      	movs	r3, #34	; 0x22
 8084140:	f8c8 3000 	str.w	r3, [r8]
 8084144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8084148:	b92a      	cbnz	r2, 8084156 <_strtoul_r+0xd6>
 808414a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808414e:	b107      	cbz	r7, 8084152 <_strtoul_r+0xd2>
 8084150:	4240      	negs	r0, r0
 8084152:	b172      	cbz	r2, 8084172 <_strtoul_r+0xf2>
 8084154:	b106      	cbz	r6, 8084158 <_strtoul_r+0xd8>
 8084156:	1e69      	subs	r1, r5, #1
 8084158:	6011      	str	r1, [r2, #0]
 808415a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808415e:	2430      	movs	r4, #48	; 0x30
 8084160:	2b00      	cmp	r3, #0
 8084162:	d1b9      	bne.n	80840d8 <_strtoul_r+0x58>
 8084164:	2308      	movs	r3, #8
 8084166:	e7b7      	b.n	80840d8 <_strtoul_r+0x58>
 8084168:	230a      	movs	r3, #10
 808416a:	e7b5      	b.n	80840d8 <_strtoul_r+0x58>
 808416c:	2c30      	cmp	r4, #48	; 0x30
 808416e:	d0ab      	beq.n	80840c8 <_strtoul_r+0x48>
 8084170:	e7b2      	b.n	80840d8 <_strtoul_r+0x58>
 8084172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084176:	bf00      	nop
 8084178:	20000408 	.word	0x20000408

0808417c <strtoul>:
 808417c:	4613      	mov	r3, r2
 808417e:	460a      	mov	r2, r1
 8084180:	4601      	mov	r1, r0
 8084182:	4802      	ldr	r0, [pc, #8]	; (808418c <strtoul+0x10>)
 8084184:	6800      	ldr	r0, [r0, #0]
 8084186:	f7ff bf7b 	b.w	8084080 <_strtoul_r>
 808418a:	bf00      	nop
 808418c:	2000046c 	.word	0x2000046c

08084190 <__tzcalc_limits>:
 8084190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084194:	4604      	mov	r4, r0
 8084196:	f000 fd8d 	bl	8084cb4 <__gettzinfo>
 808419a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808419e:	429c      	cmp	r4, r3
 80841a0:	f340 8096 	ble.w	80842d0 <__tzcalc_limits+0x140>
 80841a4:	f240 156d 	movw	r5, #365	; 0x16d
 80841a8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80841ac:	18e3      	adds	r3, r4, r3
 80841ae:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80841b2:	109b      	asrs	r3, r3, #2
 80841b4:	fb05 3502 	mla	r5, r5, r2, r3
 80841b8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80841bc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80841c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80841c4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80841c8:	442b      	add	r3, r5
 80841ca:	18a5      	adds	r5, r4, r2
 80841cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80841d0:	fb94 f7f2 	sdiv	r7, r4, r2
 80841d4:	fb95 f5f2 	sdiv	r5, r5, r2
 80841d8:	fb02 4717 	mls	r7, r2, r7, r4
 80841dc:	441d      	add	r5, r3
 80841de:	2364      	movs	r3, #100	; 0x64
 80841e0:	fb94 f6f3 	sdiv	r6, r4, r3
 80841e4:	fab7 fe87 	clz	lr, r7
 80841e8:	4601      	mov	r1, r0
 80841ea:	fb03 4616 	mls	r6, r3, r6, r4
 80841ee:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80841f2:	9301      	str	r3, [sp, #4]
 80841f4:	f004 0303 	and.w	r3, r4, #3
 80841f8:	6044      	str	r4, [r0, #4]
 80841fa:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80841fe:	9300      	str	r3, [sp, #0]
 8084200:	f04f 0c07 	mov.w	ip, #7
 8084204:	7a0b      	ldrb	r3, [r1, #8]
 8084206:	2b4a      	cmp	r3, #74	; 0x4a
 8084208:	d10e      	bne.n	8084228 <__tzcalc_limits+0x98>
 808420a:	694b      	ldr	r3, [r1, #20]
 808420c:	9a00      	ldr	r2, [sp, #0]
 808420e:	18ec      	adds	r4, r5, r3
 8084210:	b902      	cbnz	r2, 8084214 <__tzcalc_limits+0x84>
 8084212:	b906      	cbnz	r6, 8084216 <__tzcalc_limits+0x86>
 8084214:	b927      	cbnz	r7, 8084220 <__tzcalc_limits+0x90>
 8084216:	2b3b      	cmp	r3, #59	; 0x3b
 8084218:	bfd4      	ite	le
 808421a:	2300      	movle	r3, #0
 808421c:	2301      	movgt	r3, #1
 808421e:	e000      	b.n	8084222 <__tzcalc_limits+0x92>
 8084220:	2300      	movs	r3, #0
 8084222:	4423      	add	r3, r4
 8084224:	3b01      	subs	r3, #1
 8084226:	e03f      	b.n	80842a8 <__tzcalc_limits+0x118>
 8084228:	2b44      	cmp	r3, #68	; 0x44
 808422a:	d102      	bne.n	8084232 <__tzcalc_limits+0xa2>
 808422c:	694b      	ldr	r3, [r1, #20]
 808422e:	442b      	add	r3, r5
 8084230:	e03a      	b.n	80842a8 <__tzcalc_limits+0x118>
 8084232:	9b00      	ldr	r3, [sp, #0]
 8084234:	b92b      	cbnz	r3, 8084242 <__tzcalc_limits+0xb2>
 8084236:	2e00      	cmp	r6, #0
 8084238:	bf0c      	ite	eq
 808423a:	46f0      	moveq	r8, lr
 808423c:	f04f 0801 	movne.w	r8, #1
 8084240:	e000      	b.n	8084244 <__tzcalc_limits+0xb4>
 8084242:	46f0      	mov	r8, lr
 8084244:	46a9      	mov	r9, r5
 8084246:	4b24      	ldr	r3, [pc, #144]	; (80842d8 <__tzcalc_limits+0x148>)
 8084248:	2230      	movs	r2, #48	; 0x30
 808424a:	fb02 3808 	mla	r8, r2, r8, r3
 808424e:	68cc      	ldr	r4, [r1, #12]
 8084250:	f1a8 0a04 	sub.w	sl, r8, #4
 8084254:	2301      	movs	r3, #1
 8084256:	42a3      	cmp	r3, r4
 8084258:	da04      	bge.n	8084264 <__tzcalc_limits+0xd4>
 808425a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808425e:	3301      	adds	r3, #1
 8084260:	44d9      	add	r9, fp
 8084262:	e7f8      	b.n	8084256 <__tzcalc_limits+0xc6>
 8084264:	f109 0304 	add.w	r3, r9, #4
 8084268:	fb93 fbfc 	sdiv	fp, r3, ip
 808426c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8084270:	ebca 0a03 	rsb	sl, sl, r3
 8084274:	694b      	ldr	r3, [r1, #20]
 8084276:	2c01      	cmp	r4, #1
 8084278:	bfb8      	it	lt
 808427a:	2401      	movlt	r4, #1
 808427c:	ebb3 0a0a 	subs.w	sl, r3, sl
 8084280:	690b      	ldr	r3, [r1, #16]
 8084282:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8084286:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 808428a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 808428e:	bf48      	it	mi
 8084290:	f10a 0a07 	addmi.w	sl, sl, #7
 8084294:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8084298:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808429c:	4453      	add	r3, sl
 808429e:	42a3      	cmp	r3, r4
 80842a0:	db01      	blt.n	80842a6 <__tzcalc_limits+0x116>
 80842a2:	3b07      	subs	r3, #7
 80842a4:	e7fb      	b.n	808429e <__tzcalc_limits+0x10e>
 80842a6:	444b      	add	r3, r9
 80842a8:	698c      	ldr	r4, [r1, #24]
 80842aa:	4a0c      	ldr	r2, [pc, #48]	; (80842dc <__tzcalc_limits+0x14c>)
 80842ac:	fb02 4303 	mla	r3, r2, r3, r4
 80842b0:	6a0c      	ldr	r4, [r1, #32]
 80842b2:	4423      	add	r3, r4
 80842b4:	f841 3f1c 	str.w	r3, [r1, #28]!
 80842b8:	9b01      	ldr	r3, [sp, #4]
 80842ba:	4299      	cmp	r1, r3
 80842bc:	d1a2      	bne.n	8084204 <__tzcalc_limits+0x74>
 80842be:	69c3      	ldr	r3, [r0, #28]
 80842c0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80842c2:	4293      	cmp	r3, r2
 80842c4:	bfac      	ite	ge
 80842c6:	2300      	movge	r3, #0
 80842c8:	2301      	movlt	r3, #1
 80842ca:	6003      	str	r3, [r0, #0]
 80842cc:	2001      	movs	r0, #1
 80842ce:	e000      	b.n	80842d2 <__tzcalc_limits+0x142>
 80842d0:	2000      	movs	r0, #0
 80842d2:	b003      	add	sp, #12
 80842d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80842d8:	08085b7c 	.word	0x08085b7c
 80842dc:	00015180 	.word	0x00015180

080842e0 <__tz_lock>:
 80842e0:	4770      	bx	lr

080842e2 <__tz_unlock>:
 80842e2:	4770      	bx	lr

080842e4 <_tzset_unlocked>:
 80842e4:	4b01      	ldr	r3, [pc, #4]	; (80842ec <_tzset_unlocked+0x8>)
 80842e6:	6818      	ldr	r0, [r3, #0]
 80842e8:	f000 b802 	b.w	80842f0 <_tzset_unlocked_r>
 80842ec:	2000046c 	.word	0x2000046c

080842f0 <_tzset_unlocked_r>:
 80842f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80842f4:	b08d      	sub	sp, #52	; 0x34
 80842f6:	4607      	mov	r7, r0
 80842f8:	f000 fcdc 	bl	8084cb4 <__gettzinfo>
 80842fc:	49b0      	ldr	r1, [pc, #704]	; (80845c0 <_tzset_unlocked_r+0x2d0>)
 80842fe:	4604      	mov	r4, r0
 8084300:	4638      	mov	r0, r7
 8084302:	f000 fccf 	bl	8084ca4 <_getenv_r>
 8084306:	4eaf      	ldr	r6, [pc, #700]	; (80845c4 <_tzset_unlocked_r+0x2d4>)
 8084308:	4605      	mov	r5, r0
 808430a:	b960      	cbnz	r0, 8084326 <_tzset_unlocked_r+0x36>
 808430c:	4bae      	ldr	r3, [pc, #696]	; (80845c8 <_tzset_unlocked_r+0x2d8>)
 808430e:	4aaf      	ldr	r2, [pc, #700]	; (80845cc <_tzset_unlocked_r+0x2dc>)
 8084310:	6018      	str	r0, [r3, #0]
 8084312:	4baf      	ldr	r3, [pc, #700]	; (80845d0 <_tzset_unlocked_r+0x2e0>)
 8084314:	6018      	str	r0, [r3, #0]
 8084316:	4baf      	ldr	r3, [pc, #700]	; (80845d4 <_tzset_unlocked_r+0x2e4>)
 8084318:	6830      	ldr	r0, [r6, #0]
 808431a:	601a      	str	r2, [r3, #0]
 808431c:	605a      	str	r2, [r3, #4]
 808431e:	f7fc fb3f 	bl	80809a0 <free>
 8084322:	6035      	str	r5, [r6, #0]
 8084324:	e148      	b.n	80845b8 <_tzset_unlocked_r+0x2c8>
 8084326:	6831      	ldr	r1, [r6, #0]
 8084328:	b979      	cbnz	r1, 808434a <_tzset_unlocked_r+0x5a>
 808432a:	6830      	ldr	r0, [r6, #0]
 808432c:	f7fc fb38 	bl	80809a0 <free>
 8084330:	4628      	mov	r0, r5
 8084332:	f7fe ffd2 	bl	80832da <strlen>
 8084336:	1c41      	adds	r1, r0, #1
 8084338:	4638      	mov	r0, r7
 808433a:	f7fc fb61 	bl	8080a00 <_malloc_r>
 808433e:	6030      	str	r0, [r6, #0]
 8084340:	b148      	cbz	r0, 8084356 <_tzset_unlocked_r+0x66>
 8084342:	4629      	mov	r1, r5
 8084344:	f7fe ffa6 	bl	8083294 <strcpy>
 8084348:	e005      	b.n	8084356 <_tzset_unlocked_r+0x66>
 808434a:	f7fe ff99 	bl	8083280 <strcmp>
 808434e:	2800      	cmp	r0, #0
 8084350:	f000 8132 	beq.w	80845b8 <_tzset_unlocked_r+0x2c8>
 8084354:	e7e9      	b.n	808432a <_tzset_unlocked_r+0x3a>
 8084356:	782b      	ldrb	r3, [r5, #0]
 8084358:	ae0a      	add	r6, sp, #40	; 0x28
 808435a:	2b3a      	cmp	r3, #58	; 0x3a
 808435c:	bf08      	it	eq
 808435e:	3501      	addeq	r5, #1
 8084360:	4633      	mov	r3, r6
 8084362:	4a9d      	ldr	r2, [pc, #628]	; (80845d8 <_tzset_unlocked_r+0x2e8>)
 8084364:	499d      	ldr	r1, [pc, #628]	; (80845dc <_tzset_unlocked_r+0x2ec>)
 8084366:	4628      	mov	r0, r5
 8084368:	f7fc fb2a 	bl	80809c0 <siscanf>
 808436c:	2800      	cmp	r0, #0
 808436e:	f340 8123 	ble.w	80845b8 <_tzset_unlocked_r+0x2c8>
 8084372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084374:	18ef      	adds	r7, r5, r3
 8084376:	5ceb      	ldrb	r3, [r5, r3]
 8084378:	2b2d      	cmp	r3, #45	; 0x2d
 808437a:	d103      	bne.n	8084384 <_tzset_unlocked_r+0x94>
 808437c:	3701      	adds	r7, #1
 808437e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8084382:	e003      	b.n	808438c <_tzset_unlocked_r+0x9c>
 8084384:	2b2b      	cmp	r3, #43	; 0x2b
 8084386:	bf08      	it	eq
 8084388:	3701      	addeq	r7, #1
 808438a:	2501      	movs	r5, #1
 808438c:	f10d 0a20 	add.w	sl, sp, #32
 8084390:	f10d 0b1e 	add.w	fp, sp, #30
 8084394:	f04f 0800 	mov.w	r8, #0
 8084398:	9603      	str	r6, [sp, #12]
 808439a:	f8cd a008 	str.w	sl, [sp, #8]
 808439e:	9601      	str	r6, [sp, #4]
 80843a0:	f8cd b000 	str.w	fp, [sp]
 80843a4:	4633      	mov	r3, r6
 80843a6:	aa07      	add	r2, sp, #28
 80843a8:	498d      	ldr	r1, [pc, #564]	; (80845e0 <_tzset_unlocked_r+0x2f0>)
 80843aa:	4638      	mov	r0, r7
 80843ac:	f8ad 801e 	strh.w	r8, [sp, #30]
 80843b0:	f8ad 8020 	strh.w	r8, [sp, #32]
 80843b4:	f7fc fb04 	bl	80809c0 <siscanf>
 80843b8:	4540      	cmp	r0, r8
 80843ba:	f340 80fd 	ble.w	80845b8 <_tzset_unlocked_r+0x2c8>
 80843be:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80843c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80843c6:	213c      	movs	r1, #60	; 0x3c
 80843c8:	fb01 3302 	mla	r3, r1, r2, r3
 80843cc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80843d0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80843d4:	fb01 3302 	mla	r3, r1, r2, r3
 80843d8:	435d      	muls	r5, r3
 80843da:	4b7f      	ldr	r3, [pc, #508]	; (80845d8 <_tzset_unlocked_r+0x2e8>)
 80843dc:	6225      	str	r5, [r4, #32]
 80843de:	4d7d      	ldr	r5, [pc, #500]	; (80845d4 <_tzset_unlocked_r+0x2e4>)
 80843e0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80845ec <_tzset_unlocked_r+0x2fc>
 80843e4:	602b      	str	r3, [r5, #0]
 80843e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80843e8:	464a      	mov	r2, r9
 80843ea:	441f      	add	r7, r3
 80843ec:	497b      	ldr	r1, [pc, #492]	; (80845dc <_tzset_unlocked_r+0x2ec>)
 80843ee:	4633      	mov	r3, r6
 80843f0:	4638      	mov	r0, r7
 80843f2:	f7fc fae5 	bl	80809c0 <siscanf>
 80843f6:	4540      	cmp	r0, r8
 80843f8:	dc08      	bgt.n	808440c <_tzset_unlocked_r+0x11c>
 80843fa:	682b      	ldr	r3, [r5, #0]
 80843fc:	6a22      	ldr	r2, [r4, #32]
 80843fe:	606b      	str	r3, [r5, #4]
 8084400:	4b71      	ldr	r3, [pc, #452]	; (80845c8 <_tzset_unlocked_r+0x2d8>)
 8084402:	601a      	str	r2, [r3, #0]
 8084404:	4b72      	ldr	r3, [pc, #456]	; (80845d0 <_tzset_unlocked_r+0x2e0>)
 8084406:	f8c3 8000 	str.w	r8, [r3]
 808440a:	e0d5      	b.n	80845b8 <_tzset_unlocked_r+0x2c8>
 808440c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808440e:	f8c5 9004 	str.w	r9, [r5, #4]
 8084412:	18fd      	adds	r5, r7, r3
 8084414:	5cfb      	ldrb	r3, [r7, r3]
 8084416:	2b2d      	cmp	r3, #45	; 0x2d
 8084418:	d103      	bne.n	8084422 <_tzset_unlocked_r+0x132>
 808441a:	3501      	adds	r5, #1
 808441c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084420:	e003      	b.n	808442a <_tzset_unlocked_r+0x13a>
 8084422:	2b2b      	cmp	r3, #43	; 0x2b
 8084424:	bf08      	it	eq
 8084426:	3501      	addeq	r5, #1
 8084428:	2701      	movs	r7, #1
 808442a:	2300      	movs	r3, #0
 808442c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084430:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084434:	f8ad 3020 	strh.w	r3, [sp, #32]
 8084438:	930a      	str	r3, [sp, #40]	; 0x28
 808443a:	9603      	str	r6, [sp, #12]
 808443c:	f8cd a008 	str.w	sl, [sp, #8]
 8084440:	9601      	str	r6, [sp, #4]
 8084442:	f8cd b000 	str.w	fp, [sp]
 8084446:	4633      	mov	r3, r6
 8084448:	aa07      	add	r2, sp, #28
 808444a:	4965      	ldr	r1, [pc, #404]	; (80845e0 <_tzset_unlocked_r+0x2f0>)
 808444c:	4628      	mov	r0, r5
 808444e:	f7fc fab7 	bl	80809c0 <siscanf>
 8084452:	2800      	cmp	r0, #0
 8084454:	dc04      	bgt.n	8084460 <_tzset_unlocked_r+0x170>
 8084456:	6a23      	ldr	r3, [r4, #32]
 8084458:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808445c:	63e3      	str	r3, [r4, #60]	; 0x3c
 808445e:	e00e      	b.n	808447e <_tzset_unlocked_r+0x18e>
 8084460:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084464:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084468:	213c      	movs	r1, #60	; 0x3c
 808446a:	fb01 3302 	mla	r3, r1, r2, r3
 808446e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084472:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084476:	fb01 3302 	mla	r3, r1, r2, r3
 808447a:	435f      	muls	r7, r3
 808447c:	63e7      	str	r7, [r4, #60]	; 0x3c
 808447e:	4627      	mov	r7, r4
 8084480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084482:	f04f 0900 	mov.w	r9, #0
 8084486:	441d      	add	r5, r3
 8084488:	782b      	ldrb	r3, [r5, #0]
 808448a:	2b2c      	cmp	r3, #44	; 0x2c
 808448c:	bf08      	it	eq
 808448e:	3501      	addeq	r5, #1
 8084490:	f895 8000 	ldrb.w	r8, [r5]
 8084494:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8084498:	d126      	bne.n	80844e8 <_tzset_unlocked_r+0x1f8>
 808449a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808449e:	9302      	str	r3, [sp, #8]
 80844a0:	ab09      	add	r3, sp, #36	; 0x24
 80844a2:	9300      	str	r3, [sp, #0]
 80844a4:	9603      	str	r6, [sp, #12]
 80844a6:	9601      	str	r6, [sp, #4]
 80844a8:	4633      	mov	r3, r6
 80844aa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80844ae:	494d      	ldr	r1, [pc, #308]	; (80845e4 <_tzset_unlocked_r+0x2f4>)
 80844b0:	4628      	mov	r0, r5
 80844b2:	f7fc fa85 	bl	80809c0 <siscanf>
 80844b6:	2803      	cmp	r0, #3
 80844b8:	d17e      	bne.n	80845b8 <_tzset_unlocked_r+0x2c8>
 80844ba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80844be:	1e4b      	subs	r3, r1, #1
 80844c0:	2b0b      	cmp	r3, #11
 80844c2:	d879      	bhi.n	80845b8 <_tzset_unlocked_r+0x2c8>
 80844c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80844c8:	1e53      	subs	r3, r2, #1
 80844ca:	2b04      	cmp	r3, #4
 80844cc:	d874      	bhi.n	80845b8 <_tzset_unlocked_r+0x2c8>
 80844ce:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80844d2:	2b06      	cmp	r3, #6
 80844d4:	d870      	bhi.n	80845b8 <_tzset_unlocked_r+0x2c8>
 80844d6:	f887 8008 	strb.w	r8, [r7, #8]
 80844da:	60f9      	str	r1, [r7, #12]
 80844dc:	613a      	str	r2, [r7, #16]
 80844de:	617b      	str	r3, [r7, #20]
 80844e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80844e2:	eb05 0803 	add.w	r8, r5, r3
 80844e6:	e02a      	b.n	808453e <_tzset_unlocked_r+0x24e>
 80844e8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80844ec:	bf06      	itte	eq
 80844ee:	4643      	moveq	r3, r8
 80844f0:	3501      	addeq	r5, #1
 80844f2:	2344      	movne	r3, #68	; 0x44
 80844f4:	220a      	movs	r2, #10
 80844f6:	a90b      	add	r1, sp, #44	; 0x2c
 80844f8:	4628      	mov	r0, r5
 80844fa:	9305      	str	r3, [sp, #20]
 80844fc:	f7ff fe3e 	bl	808417c <strtoul>
 8084500:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8084504:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8084508:	4545      	cmp	r5, r8
 808450a:	9b05      	ldr	r3, [sp, #20]
 808450c:	d114      	bne.n	8084538 <_tzset_unlocked_r+0x248>
 808450e:	234d      	movs	r3, #77	; 0x4d
 8084510:	f1b9 0f00 	cmp.w	r9, #0
 8084514:	d107      	bne.n	8084526 <_tzset_unlocked_r+0x236>
 8084516:	7223      	strb	r3, [r4, #8]
 8084518:	2303      	movs	r3, #3
 808451a:	60e3      	str	r3, [r4, #12]
 808451c:	2302      	movs	r3, #2
 808451e:	6123      	str	r3, [r4, #16]
 8084520:	f8c4 9014 	str.w	r9, [r4, #20]
 8084524:	e00b      	b.n	808453e <_tzset_unlocked_r+0x24e>
 8084526:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808452a:	230b      	movs	r3, #11
 808452c:	62a3      	str	r3, [r4, #40]	; 0x28
 808452e:	2301      	movs	r3, #1
 8084530:	62e3      	str	r3, [r4, #44]	; 0x2c
 8084532:	2300      	movs	r3, #0
 8084534:	6323      	str	r3, [r4, #48]	; 0x30
 8084536:	e002      	b.n	808453e <_tzset_unlocked_r+0x24e>
 8084538:	b280      	uxth	r0, r0
 808453a:	723b      	strb	r3, [r7, #8]
 808453c:	6178      	str	r0, [r7, #20]
 808453e:	2302      	movs	r3, #2
 8084540:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084544:	2300      	movs	r3, #0
 8084546:	f8ad 301e 	strh.w	r3, [sp, #30]
 808454a:	f8ad 3020 	strh.w	r3, [sp, #32]
 808454e:	930a      	str	r3, [sp, #40]	; 0x28
 8084550:	f898 3000 	ldrb.w	r3, [r8]
 8084554:	2b2f      	cmp	r3, #47	; 0x2f
 8084556:	d10b      	bne.n	8084570 <_tzset_unlocked_r+0x280>
 8084558:	9603      	str	r6, [sp, #12]
 808455a:	f8cd a008 	str.w	sl, [sp, #8]
 808455e:	9601      	str	r6, [sp, #4]
 8084560:	f8cd b000 	str.w	fp, [sp]
 8084564:	4633      	mov	r3, r6
 8084566:	aa07      	add	r2, sp, #28
 8084568:	491f      	ldr	r1, [pc, #124]	; (80845e8 <_tzset_unlocked_r+0x2f8>)
 808456a:	4640      	mov	r0, r8
 808456c:	f7fc fa28 	bl	80809c0 <siscanf>
 8084570:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084574:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084578:	213c      	movs	r1, #60	; 0x3c
 808457a:	fb01 3302 	mla	r3, r1, r2, r3
 808457e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084582:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084586:	fb01 3302 	mla	r3, r1, r2, r3
 808458a:	61bb      	str	r3, [r7, #24]
 808458c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808458e:	f109 0901 	add.w	r9, r9, #1
 8084592:	f1b9 0f02 	cmp.w	r9, #2
 8084596:	4445      	add	r5, r8
 8084598:	f107 071c 	add.w	r7, r7, #28
 808459c:	f47f af74 	bne.w	8084488 <_tzset_unlocked_r+0x198>
 80845a0:	6860      	ldr	r0, [r4, #4]
 80845a2:	f7ff fdf5 	bl	8084190 <__tzcalc_limits>
 80845a6:	6a22      	ldr	r2, [r4, #32]
 80845a8:	4b07      	ldr	r3, [pc, #28]	; (80845c8 <_tzset_unlocked_r+0x2d8>)
 80845aa:	601a      	str	r2, [r3, #0]
 80845ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80845ae:	1a9b      	subs	r3, r3, r2
 80845b0:	4a07      	ldr	r2, [pc, #28]	; (80845d0 <_tzset_unlocked_r+0x2e0>)
 80845b2:	bf18      	it	ne
 80845b4:	2301      	movne	r3, #1
 80845b6:	6013      	str	r3, [r2, #0]
 80845b8:	b00d      	add	sp, #52	; 0x34
 80845ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80845be:	bf00      	nop
 80845c0:	08085c38 	.word	0x08085c38
 80845c4:	200007b4 	.word	0x200007b4
 80845c8:	200007bc 	.word	0x200007bc
 80845cc:	08085c3b 	.word	0x08085c3b
 80845d0:	200007b8 	.word	0x200007b8
 80845d4:	200004a8 	.word	0x200004a8
 80845d8:	200007a7 	.word	0x200007a7
 80845dc:	08085c3f 	.word	0x08085c3f
 80845e0:	08085c62 	.word	0x08085c62
 80845e4:	08085c4e 	.word	0x08085c4e
 80845e8:	08085c61 	.word	0x08085c61
 80845ec:	2000079c 	.word	0x2000079c

080845f0 <rshift>:
 80845f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80845f2:	6906      	ldr	r6, [r0, #16]
 80845f4:	114b      	asrs	r3, r1, #5
 80845f6:	42b3      	cmp	r3, r6
 80845f8:	f100 0514 	add.w	r5, r0, #20
 80845fc:	da27      	bge.n	808464e <rshift+0x5e>
 80845fe:	f011 011f 	ands.w	r1, r1, #31
 8084602:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8084606:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808460a:	d101      	bne.n	8084610 <rshift+0x20>
 808460c:	4629      	mov	r1, r5
 808460e:	e016      	b.n	808463e <rshift+0x4e>
 8084610:	1d14      	adds	r4, r2, #4
 8084612:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8084616:	462b      	mov	r3, r5
 8084618:	f1c1 0e20 	rsb	lr, r1, #32
 808461c:	40ca      	lsrs	r2, r1
 808461e:	42b4      	cmp	r4, r6
 8084620:	d209      	bcs.n	8084636 <rshift+0x46>
 8084622:	6827      	ldr	r7, [r4, #0]
 8084624:	fa07 f70e 	lsl.w	r7, r7, lr
 8084628:	433a      	orrs	r2, r7
 808462a:	f843 2b04 	str.w	r2, [r3], #4
 808462e:	f854 2b04 	ldr.w	r2, [r4], #4
 8084632:	40ca      	lsrs	r2, r1
 8084634:	e7f3      	b.n	808461e <rshift+0x2e>
 8084636:	601a      	str	r2, [r3, #0]
 8084638:	b152      	cbz	r2, 8084650 <rshift+0x60>
 808463a:	3304      	adds	r3, #4
 808463c:	e008      	b.n	8084650 <rshift+0x60>
 808463e:	42b2      	cmp	r2, r6
 8084640:	460b      	mov	r3, r1
 8084642:	d205      	bcs.n	8084650 <rshift+0x60>
 8084644:	f852 3b04 	ldr.w	r3, [r2], #4
 8084648:	f841 3b04 	str.w	r3, [r1], #4
 808464c:	e7f7      	b.n	808463e <rshift+0x4e>
 808464e:	462b      	mov	r3, r5
 8084650:	1b5b      	subs	r3, r3, r5
 8084652:	109b      	asrs	r3, r3, #2
 8084654:	6103      	str	r3, [r0, #16]
 8084656:	b903      	cbnz	r3, 808465a <rshift+0x6a>
 8084658:	6143      	str	r3, [r0, #20]
 808465a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808465c <__hexdig_fun>:
 808465c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8084660:	2b09      	cmp	r3, #9
 8084662:	d801      	bhi.n	8084668 <__hexdig_fun+0xc>
 8084664:	3820      	subs	r0, #32
 8084666:	e00a      	b.n	808467e <__hexdig_fun+0x22>
 8084668:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808466c:	2b05      	cmp	r3, #5
 808466e:	d801      	bhi.n	8084674 <__hexdig_fun+0x18>
 8084670:	3847      	subs	r0, #71	; 0x47
 8084672:	e004      	b.n	808467e <__hexdig_fun+0x22>
 8084674:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8084678:	2b05      	cmp	r3, #5
 808467a:	d802      	bhi.n	8084682 <__hexdig_fun+0x26>
 808467c:	3827      	subs	r0, #39	; 0x27
 808467e:	b2c0      	uxtb	r0, r0
 8084680:	4770      	bx	lr
 8084682:	2000      	movs	r0, #0
 8084684:	4770      	bx	lr

08084686 <__gethex>:
 8084686:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808468a:	b08b      	sub	sp, #44	; 0x2c
 808468c:	468a      	mov	sl, r1
 808468e:	4690      	mov	r8, r2
 8084690:	9306      	str	r3, [sp, #24]
 8084692:	9002      	str	r0, [sp, #8]
 8084694:	f7fe fd9a 	bl	80831cc <_localeconv_r>
 8084698:	6803      	ldr	r3, [r0, #0]
 808469a:	f04f 0b00 	mov.w	fp, #0
 808469e:	4618      	mov	r0, r3
 80846a0:	9303      	str	r3, [sp, #12]
 80846a2:	f7fe fe1a 	bl	80832da <strlen>
 80846a6:	9b03      	ldr	r3, [sp, #12]
 80846a8:	9001      	str	r0, [sp, #4]
 80846aa:	4403      	add	r3, r0
 80846ac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80846b0:	9307      	str	r3, [sp, #28]
 80846b2:	f8da 3000 	ldr.w	r3, [sl]
 80846b6:	3302      	adds	r3, #2
 80846b8:	461f      	mov	r7, r3
 80846ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 80846be:	2830      	cmp	r0, #48	; 0x30
 80846c0:	d102      	bne.n	80846c8 <__gethex+0x42>
 80846c2:	f10b 0b01 	add.w	fp, fp, #1
 80846c6:	e7f7      	b.n	80846b8 <__gethex+0x32>
 80846c8:	f7ff ffc8 	bl	808465c <__hexdig_fun>
 80846cc:	4604      	mov	r4, r0
 80846ce:	b9e0      	cbnz	r0, 808470a <__gethex+0x84>
 80846d0:	9a01      	ldr	r2, [sp, #4]
 80846d2:	9903      	ldr	r1, [sp, #12]
 80846d4:	4638      	mov	r0, r7
 80846d6:	f7fe fe08 	bl	80832ea <strncmp>
 80846da:	2800      	cmp	r0, #0
 80846dc:	d134      	bne.n	8084748 <__gethex+0xc2>
 80846de:	9b01      	ldr	r3, [sp, #4]
 80846e0:	5cf8      	ldrb	r0, [r7, r3]
 80846e2:	18fe      	adds	r6, r7, r3
 80846e4:	f7ff ffba 	bl	808465c <__hexdig_fun>
 80846e8:	b380      	cbz	r0, 808474c <__gethex+0xc6>
 80846ea:	4633      	mov	r3, r6
 80846ec:	7818      	ldrb	r0, [r3, #0]
 80846ee:	461f      	mov	r7, r3
 80846f0:	2830      	cmp	r0, #48	; 0x30
 80846f2:	f103 0301 	add.w	r3, r3, #1
 80846f6:	d0f9      	beq.n	80846ec <__gethex+0x66>
 80846f8:	f7ff ffb0 	bl	808465c <__hexdig_fun>
 80846fc:	fab0 f580 	clz	r5, r0
 8084700:	4634      	mov	r4, r6
 8084702:	096d      	lsrs	r5, r5, #5
 8084704:	f04f 0b01 	mov.w	fp, #1
 8084708:	e001      	b.n	808470e <__gethex+0x88>
 808470a:	2500      	movs	r5, #0
 808470c:	462c      	mov	r4, r5
 808470e:	463a      	mov	r2, r7
 8084710:	4616      	mov	r6, r2
 8084712:	7830      	ldrb	r0, [r6, #0]
 8084714:	3201      	adds	r2, #1
 8084716:	f7ff ffa1 	bl	808465c <__hexdig_fun>
 808471a:	2800      	cmp	r0, #0
 808471c:	d1f8      	bne.n	8084710 <__gethex+0x8a>
 808471e:	9a01      	ldr	r2, [sp, #4]
 8084720:	9903      	ldr	r1, [sp, #12]
 8084722:	4630      	mov	r0, r6
 8084724:	f7fe fde1 	bl	80832ea <strncmp>
 8084728:	b950      	cbnz	r0, 8084740 <__gethex+0xba>
 808472a:	b954      	cbnz	r4, 8084742 <__gethex+0xbc>
 808472c:	9b01      	ldr	r3, [sp, #4]
 808472e:	18f4      	adds	r4, r6, r3
 8084730:	4622      	mov	r2, r4
 8084732:	4616      	mov	r6, r2
 8084734:	7830      	ldrb	r0, [r6, #0]
 8084736:	3201      	adds	r2, #1
 8084738:	f7ff ff90 	bl	808465c <__hexdig_fun>
 808473c:	2800      	cmp	r0, #0
 808473e:	d1f8      	bne.n	8084732 <__gethex+0xac>
 8084740:	b134      	cbz	r4, 8084750 <__gethex+0xca>
 8084742:	1ba4      	subs	r4, r4, r6
 8084744:	00a4      	lsls	r4, r4, #2
 8084746:	e003      	b.n	8084750 <__gethex+0xca>
 8084748:	463e      	mov	r6, r7
 808474a:	e000      	b.n	808474e <__gethex+0xc8>
 808474c:	4604      	mov	r4, r0
 808474e:	2501      	movs	r5, #1
 8084750:	7833      	ldrb	r3, [r6, #0]
 8084752:	2b50      	cmp	r3, #80	; 0x50
 8084754:	d001      	beq.n	808475a <__gethex+0xd4>
 8084756:	2b70      	cmp	r3, #112	; 0x70
 8084758:	d12a      	bne.n	80847b0 <__gethex+0x12a>
 808475a:	7873      	ldrb	r3, [r6, #1]
 808475c:	2b2b      	cmp	r3, #43	; 0x2b
 808475e:	d008      	beq.n	8084772 <__gethex+0xec>
 8084760:	2b2d      	cmp	r3, #45	; 0x2d
 8084762:	d003      	beq.n	808476c <__gethex+0xe6>
 8084764:	1c71      	adds	r1, r6, #1
 8084766:	f04f 0900 	mov.w	r9, #0
 808476a:	e005      	b.n	8084778 <__gethex+0xf2>
 808476c:	f04f 0901 	mov.w	r9, #1
 8084770:	e001      	b.n	8084776 <__gethex+0xf0>
 8084772:	f04f 0900 	mov.w	r9, #0
 8084776:	1cb1      	adds	r1, r6, #2
 8084778:	7808      	ldrb	r0, [r1, #0]
 808477a:	f7ff ff6f 	bl	808465c <__hexdig_fun>
 808477e:	1e43      	subs	r3, r0, #1
 8084780:	b2db      	uxtb	r3, r3
 8084782:	2b18      	cmp	r3, #24
 8084784:	d814      	bhi.n	80847b0 <__gethex+0x12a>
 8084786:	f1a0 0210 	sub.w	r2, r0, #16
 808478a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808478e:	f7ff ff65 	bl	808465c <__hexdig_fun>
 8084792:	1e43      	subs	r3, r0, #1
 8084794:	b2db      	uxtb	r3, r3
 8084796:	2b18      	cmp	r3, #24
 8084798:	d804      	bhi.n	80847a4 <__gethex+0x11e>
 808479a:	230a      	movs	r3, #10
 808479c:	fb03 0202 	mla	r2, r3, r2, r0
 80847a0:	3a10      	subs	r2, #16
 80847a2:	e7f2      	b.n	808478a <__gethex+0x104>
 80847a4:	f1b9 0f00 	cmp.w	r9, #0
 80847a8:	d000      	beq.n	80847ac <__gethex+0x126>
 80847aa:	4252      	negs	r2, r2
 80847ac:	4414      	add	r4, r2
 80847ae:	e000      	b.n	80847b2 <__gethex+0x12c>
 80847b0:	4631      	mov	r1, r6
 80847b2:	f8ca 1000 	str.w	r1, [sl]
 80847b6:	b12d      	cbz	r5, 80847c4 <__gethex+0x13e>
 80847b8:	f1bb 0f00 	cmp.w	fp, #0
 80847bc:	bf14      	ite	ne
 80847be:	2000      	movne	r0, #0
 80847c0:	2006      	moveq	r0, #6
 80847c2:	e17c      	b.n	8084abe <__gethex+0x438>
 80847c4:	4629      	mov	r1, r5
 80847c6:	1bf3      	subs	r3, r6, r7
 80847c8:	3b01      	subs	r3, #1
 80847ca:	2b07      	cmp	r3, #7
 80847cc:	dd02      	ble.n	80847d4 <__gethex+0x14e>
 80847ce:	3101      	adds	r1, #1
 80847d0:	105b      	asrs	r3, r3, #1
 80847d2:	e7fa      	b.n	80847ca <__gethex+0x144>
 80847d4:	9802      	ldr	r0, [sp, #8]
 80847d6:	f000 fb07 	bl	8084de8 <_Balloc>
 80847da:	f04f 0900 	mov.w	r9, #0
 80847de:	4605      	mov	r5, r0
 80847e0:	46cb      	mov	fp, r9
 80847e2:	9b01      	ldr	r3, [sp, #4]
 80847e4:	f100 0a14 	add.w	sl, r0, #20
 80847e8:	f1c3 0301 	rsb	r3, r3, #1
 80847ec:	f8cd a010 	str.w	sl, [sp, #16]
 80847f0:	9308      	str	r3, [sp, #32]
 80847f2:	42b7      	cmp	r7, r6
 80847f4:	d22f      	bcs.n	8084856 <__gethex+0x1d0>
 80847f6:	1e73      	subs	r3, r6, #1
 80847f8:	9305      	str	r3, [sp, #20]
 80847fa:	9a07      	ldr	r2, [sp, #28]
 80847fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8084800:	4293      	cmp	r3, r2
 8084802:	d00b      	beq.n	808481c <__gethex+0x196>
 8084804:	f1bb 0f20 	cmp.w	fp, #32
 8084808:	d116      	bne.n	8084838 <__gethex+0x1b2>
 808480a:	9b04      	ldr	r3, [sp, #16]
 808480c:	f8c3 9000 	str.w	r9, [r3]
 8084810:	3304      	adds	r3, #4
 8084812:	f04f 0900 	mov.w	r9, #0
 8084816:	9304      	str	r3, [sp, #16]
 8084818:	46cb      	mov	fp, r9
 808481a:	e00d      	b.n	8084838 <__gethex+0x1b2>
 808481c:	9b05      	ldr	r3, [sp, #20]
 808481e:	9a08      	ldr	r2, [sp, #32]
 8084820:	4413      	add	r3, r2
 8084822:	429f      	cmp	r7, r3
 8084824:	d8ee      	bhi.n	8084804 <__gethex+0x17e>
 8084826:	4618      	mov	r0, r3
 8084828:	9a01      	ldr	r2, [sp, #4]
 808482a:	9903      	ldr	r1, [sp, #12]
 808482c:	9309      	str	r3, [sp, #36]	; 0x24
 808482e:	f7fe fd5c 	bl	80832ea <strncmp>
 8084832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084834:	b168      	cbz	r0, 8084852 <__gethex+0x1cc>
 8084836:	e7e5      	b.n	8084804 <__gethex+0x17e>
 8084838:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808483c:	f7ff ff0e 	bl	808465c <__hexdig_fun>
 8084840:	f000 000f 	and.w	r0, r0, #15
 8084844:	fa00 f00b 	lsl.w	r0, r0, fp
 8084848:	9b05      	ldr	r3, [sp, #20]
 808484a:	ea49 0900 	orr.w	r9, r9, r0
 808484e:	f10b 0b04 	add.w	fp, fp, #4
 8084852:	461e      	mov	r6, r3
 8084854:	e7cd      	b.n	80847f2 <__gethex+0x16c>
 8084856:	9804      	ldr	r0, [sp, #16]
 8084858:	f840 9b04 	str.w	r9, [r0], #4
 808485c:	ebca 0000 	rsb	r0, sl, r0
 8084860:	1080      	asrs	r0, r0, #2
 8084862:	6128      	str	r0, [r5, #16]
 8084864:	0147      	lsls	r7, r0, #5
 8084866:	4648      	mov	r0, r9
 8084868:	f000 fb83 	bl	8084f72 <__hi0bits>
 808486c:	f8d8 6000 	ldr.w	r6, [r8]
 8084870:	1a38      	subs	r0, r7, r0
 8084872:	42b0      	cmp	r0, r6
 8084874:	dd26      	ble.n	80848c4 <__gethex+0x23e>
 8084876:	1b87      	subs	r7, r0, r6
 8084878:	4639      	mov	r1, r7
 808487a:	4628      	mov	r0, r5
 808487c:	f000 fe7b 	bl	8085576 <__any_on>
 8084880:	b1c8      	cbz	r0, 80848b6 <__gethex+0x230>
 8084882:	1e7b      	subs	r3, r7, #1
 8084884:	1159      	asrs	r1, r3, #5
 8084886:	f003 021f 	and.w	r2, r3, #31
 808488a:	f04f 0901 	mov.w	r9, #1
 808488e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8084892:	fa09 f202 	lsl.w	r2, r9, r2
 8084896:	420a      	tst	r2, r1
 8084898:	d00e      	beq.n	80848b8 <__gethex+0x232>
 808489a:	454b      	cmp	r3, r9
 808489c:	dc02      	bgt.n	80848a4 <__gethex+0x21e>
 808489e:	f04f 0902 	mov.w	r9, #2
 80848a2:	e009      	b.n	80848b8 <__gethex+0x232>
 80848a4:	1eb9      	subs	r1, r7, #2
 80848a6:	4628      	mov	r0, r5
 80848a8:	f000 fe65 	bl	8085576 <__any_on>
 80848ac:	2800      	cmp	r0, #0
 80848ae:	d0f6      	beq.n	808489e <__gethex+0x218>
 80848b0:	f04f 0903 	mov.w	r9, #3
 80848b4:	e000      	b.n	80848b8 <__gethex+0x232>
 80848b6:	4681      	mov	r9, r0
 80848b8:	4639      	mov	r1, r7
 80848ba:	4628      	mov	r0, r5
 80848bc:	f7ff fe98 	bl	80845f0 <rshift>
 80848c0:	443c      	add	r4, r7
 80848c2:	e00c      	b.n	80848de <__gethex+0x258>
 80848c4:	da09      	bge.n	80848da <__gethex+0x254>
 80848c6:	1a37      	subs	r7, r6, r0
 80848c8:	4629      	mov	r1, r5
 80848ca:	463a      	mov	r2, r7
 80848cc:	9802      	ldr	r0, [sp, #8]
 80848ce:	f000 fc85 	bl	80851dc <__lshift>
 80848d2:	4605      	mov	r5, r0
 80848d4:	1be4      	subs	r4, r4, r7
 80848d6:	f100 0a14 	add.w	sl, r0, #20
 80848da:	f04f 0900 	mov.w	r9, #0
 80848de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80848e2:	429c      	cmp	r4, r3
 80848e4:	dd08      	ble.n	80848f8 <__gethex+0x272>
 80848e6:	9802      	ldr	r0, [sp, #8]
 80848e8:	4629      	mov	r1, r5
 80848ea:	f000 fab2 	bl	8084e52 <_Bfree>
 80848ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80848f0:	2300      	movs	r3, #0
 80848f2:	6013      	str	r3, [r2, #0]
 80848f4:	20a3      	movs	r0, #163	; 0xa3
 80848f6:	e0e2      	b.n	8084abe <__gethex+0x438>
 80848f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80848fc:	4284      	cmp	r4, r0
 80848fe:	da53      	bge.n	80849a8 <__gethex+0x322>
 8084900:	1b04      	subs	r4, r0, r4
 8084902:	42a6      	cmp	r6, r4
 8084904:	dc2e      	bgt.n	8084964 <__gethex+0x2de>
 8084906:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808490a:	2b02      	cmp	r3, #2
 808490c:	d01a      	beq.n	8084944 <__gethex+0x2be>
 808490e:	2b03      	cmp	r3, #3
 8084910:	d01c      	beq.n	808494c <__gethex+0x2c6>
 8084912:	2b01      	cmp	r3, #1
 8084914:	d11d      	bne.n	8084952 <__gethex+0x2cc>
 8084916:	42a6      	cmp	r6, r4
 8084918:	d11b      	bne.n	8084952 <__gethex+0x2cc>
 808491a:	2e01      	cmp	r6, #1
 808491c:	dc0b      	bgt.n	8084936 <__gethex+0x2b0>
 808491e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8084922:	9a06      	ldr	r2, [sp, #24]
 8084924:	2062      	movs	r0, #98	; 0x62
 8084926:	6013      	str	r3, [r2, #0]
 8084928:	2301      	movs	r3, #1
 808492a:	612b      	str	r3, [r5, #16]
 808492c:	f8ca 3000 	str.w	r3, [sl]
 8084930:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8084932:	601d      	str	r5, [r3, #0]
 8084934:	e0c3      	b.n	8084abe <__gethex+0x438>
 8084936:	1e71      	subs	r1, r6, #1
 8084938:	4628      	mov	r0, r5
 808493a:	f000 fe1c 	bl	8085576 <__any_on>
 808493e:	2800      	cmp	r0, #0
 8084940:	d1ed      	bne.n	808491e <__gethex+0x298>
 8084942:	e006      	b.n	8084952 <__gethex+0x2cc>
 8084944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8084946:	2b00      	cmp	r3, #0
 8084948:	d0e9      	beq.n	808491e <__gethex+0x298>
 808494a:	e002      	b.n	8084952 <__gethex+0x2cc>
 808494c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808494e:	2b00      	cmp	r3, #0
 8084950:	d1e5      	bne.n	808491e <__gethex+0x298>
 8084952:	9802      	ldr	r0, [sp, #8]
 8084954:	4629      	mov	r1, r5
 8084956:	f000 fa7c 	bl	8084e52 <_Bfree>
 808495a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808495c:	2300      	movs	r3, #0
 808495e:	6013      	str	r3, [r2, #0]
 8084960:	2050      	movs	r0, #80	; 0x50
 8084962:	e0ac      	b.n	8084abe <__gethex+0x438>
 8084964:	1e67      	subs	r7, r4, #1
 8084966:	f1b9 0f00 	cmp.w	r9, #0
 808496a:	d106      	bne.n	808497a <__gethex+0x2f4>
 808496c:	b13f      	cbz	r7, 808497e <__gethex+0x2f8>
 808496e:	4639      	mov	r1, r7
 8084970:	4628      	mov	r0, r5
 8084972:	f000 fe00 	bl	8085576 <__any_on>
 8084976:	4681      	mov	r9, r0
 8084978:	e001      	b.n	808497e <__gethex+0x2f8>
 808497a:	f04f 0901 	mov.w	r9, #1
 808497e:	117a      	asrs	r2, r7, #5
 8084980:	2301      	movs	r3, #1
 8084982:	f007 071f 	and.w	r7, r7, #31
 8084986:	fa03 f707 	lsl.w	r7, r3, r7
 808498a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808498e:	4621      	mov	r1, r4
 8084990:	421f      	tst	r7, r3
 8084992:	4628      	mov	r0, r5
 8084994:	bf18      	it	ne
 8084996:	f049 0902 	orrne.w	r9, r9, #2
 808499a:	1b36      	subs	r6, r6, r4
 808499c:	f7ff fe28 	bl	80845f0 <rshift>
 80849a0:	2702      	movs	r7, #2
 80849a2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80849a6:	e000      	b.n	80849aa <__gethex+0x324>
 80849a8:	2701      	movs	r7, #1
 80849aa:	f1b9 0f00 	cmp.w	r9, #0
 80849ae:	f000 8081 	beq.w	8084ab4 <__gethex+0x42e>
 80849b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80849b6:	2b02      	cmp	r3, #2
 80849b8:	d00e      	beq.n	80849d8 <__gethex+0x352>
 80849ba:	2b03      	cmp	r3, #3
 80849bc:	d010      	beq.n	80849e0 <__gethex+0x35a>
 80849be:	2b01      	cmp	r3, #1
 80849c0:	d176      	bne.n	8084ab0 <__gethex+0x42a>
 80849c2:	f019 0f02 	tst.w	r9, #2
 80849c6:	d073      	beq.n	8084ab0 <__gethex+0x42a>
 80849c8:	f8da 0000 	ldr.w	r0, [sl]
 80849cc:	ea49 0900 	orr.w	r9, r9, r0
 80849d0:	f019 0f01 	tst.w	r9, #1
 80849d4:	d107      	bne.n	80849e6 <__gethex+0x360>
 80849d6:	e06b      	b.n	8084ab0 <__gethex+0x42a>
 80849d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80849da:	f1c3 0301 	rsb	r3, r3, #1
 80849de:	9315      	str	r3, [sp, #84]	; 0x54
 80849e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80849e2:	2b00      	cmp	r3, #0
 80849e4:	d064      	beq.n	8084ab0 <__gethex+0x42a>
 80849e6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80849ea:	f105 0314 	add.w	r3, r5, #20
 80849ee:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80849f2:	eb03 0109 	add.w	r1, r3, r9
 80849f6:	2000      	movs	r0, #0
 80849f8:	681a      	ldr	r2, [r3, #0]
 80849fa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80849fe:	d002      	beq.n	8084a06 <__gethex+0x380>
 8084a00:	3201      	adds	r2, #1
 8084a02:	601a      	str	r2, [r3, #0]
 8084a04:	e020      	b.n	8084a48 <__gethex+0x3c2>
 8084a06:	f843 0b04 	str.w	r0, [r3], #4
 8084a0a:	4299      	cmp	r1, r3
 8084a0c:	d8f4      	bhi.n	80849f8 <__gethex+0x372>
 8084a0e:	68ab      	ldr	r3, [r5, #8]
 8084a10:	459a      	cmp	sl, r3
 8084a12:	db12      	blt.n	8084a3a <__gethex+0x3b4>
 8084a14:	6869      	ldr	r1, [r5, #4]
 8084a16:	9802      	ldr	r0, [sp, #8]
 8084a18:	3101      	adds	r1, #1
 8084a1a:	f000 f9e5 	bl	8084de8 <_Balloc>
 8084a1e:	4683      	mov	fp, r0
 8084a20:	692a      	ldr	r2, [r5, #16]
 8084a22:	f105 010c 	add.w	r1, r5, #12
 8084a26:	3202      	adds	r2, #2
 8084a28:	0092      	lsls	r2, r2, #2
 8084a2a:	300c      	adds	r0, #12
 8084a2c:	f7fe fbd2 	bl	80831d4 <memcpy>
 8084a30:	4629      	mov	r1, r5
 8084a32:	9802      	ldr	r0, [sp, #8]
 8084a34:	f000 fa0d 	bl	8084e52 <_Bfree>
 8084a38:	465d      	mov	r5, fp
 8084a3a:	692b      	ldr	r3, [r5, #16]
 8084a3c:	1c5a      	adds	r2, r3, #1
 8084a3e:	612a      	str	r2, [r5, #16]
 8084a40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8084a44:	2201      	movs	r2, #1
 8084a46:	615a      	str	r2, [r3, #20]
 8084a48:	2f02      	cmp	r7, #2
 8084a4a:	f105 0214 	add.w	r2, r5, #20
 8084a4e:	d111      	bne.n	8084a74 <__gethex+0x3ee>
 8084a50:	f8d8 3000 	ldr.w	r3, [r8]
 8084a54:	3b01      	subs	r3, #1
 8084a56:	429e      	cmp	r6, r3
 8084a58:	d127      	bne.n	8084aaa <__gethex+0x424>
 8084a5a:	1171      	asrs	r1, r6, #5
 8084a5c:	2301      	movs	r3, #1
 8084a5e:	f006 061f 	and.w	r6, r6, #31
 8084a62:	fa03 f606 	lsl.w	r6, r3, r6
 8084a66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8084a6a:	421e      	tst	r6, r3
 8084a6c:	bf0c      	ite	eq
 8084a6e:	2702      	moveq	r7, #2
 8084a70:	2701      	movne	r7, #1
 8084a72:	e01a      	b.n	8084aaa <__gethex+0x424>
 8084a74:	692b      	ldr	r3, [r5, #16]
 8084a76:	459a      	cmp	sl, r3
 8084a78:	da0a      	bge.n	8084a90 <__gethex+0x40a>
 8084a7a:	2101      	movs	r1, #1
 8084a7c:	4628      	mov	r0, r5
 8084a7e:	f7ff fdb7 	bl	80845f0 <rshift>
 8084a82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8084a86:	3401      	adds	r4, #1
 8084a88:	429c      	cmp	r4, r3
 8084a8a:	f73f af2c 	bgt.w	80848e6 <__gethex+0x260>
 8084a8e:	e00b      	b.n	8084aa8 <__gethex+0x422>
 8084a90:	f016 061f 	ands.w	r6, r6, #31
 8084a94:	d008      	beq.n	8084aa8 <__gethex+0x422>
 8084a96:	4491      	add	r9, r2
 8084a98:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8084a9c:	f000 fa69 	bl	8084f72 <__hi0bits>
 8084aa0:	f1c6 0620 	rsb	r6, r6, #32
 8084aa4:	42b0      	cmp	r0, r6
 8084aa6:	dbe8      	blt.n	8084a7a <__gethex+0x3f4>
 8084aa8:	2701      	movs	r7, #1
 8084aaa:	f047 0720 	orr.w	r7, r7, #32
 8084aae:	e001      	b.n	8084ab4 <__gethex+0x42e>
 8084ab0:	f047 0710 	orr.w	r7, r7, #16
 8084ab4:	4638      	mov	r0, r7
 8084ab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8084ab8:	601d      	str	r5, [r3, #0]
 8084aba:	9b06      	ldr	r3, [sp, #24]
 8084abc:	601c      	str	r4, [r3, #0]
 8084abe:	b00b      	add	sp, #44	; 0x2c
 8084ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08084ac4 <L_shift>:
 8084ac4:	f1c2 0208 	rsb	r2, r2, #8
 8084ac8:	0092      	lsls	r2, r2, #2
 8084aca:	b570      	push	{r4, r5, r6, lr}
 8084acc:	f1c2 0620 	rsb	r6, r2, #32
 8084ad0:	6843      	ldr	r3, [r0, #4]
 8084ad2:	6805      	ldr	r5, [r0, #0]
 8084ad4:	fa03 f406 	lsl.w	r4, r3, r6
 8084ad8:	432c      	orrs	r4, r5
 8084ada:	40d3      	lsrs	r3, r2
 8084adc:	6004      	str	r4, [r0, #0]
 8084ade:	f840 3f04 	str.w	r3, [r0, #4]!
 8084ae2:	4288      	cmp	r0, r1
 8084ae4:	d3f4      	bcc.n	8084ad0 <L_shift+0xc>
 8084ae6:	bd70      	pop	{r4, r5, r6, pc}

08084ae8 <__match>:
 8084ae8:	b530      	push	{r4, r5, lr}
 8084aea:	6803      	ldr	r3, [r0, #0]
 8084aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084af0:	3301      	adds	r3, #1
 8084af2:	b14c      	cbz	r4, 8084b08 <__match+0x20>
 8084af4:	781a      	ldrb	r2, [r3, #0]
 8084af6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8084afa:	2d19      	cmp	r5, #25
 8084afc:	bf98      	it	ls
 8084afe:	3220      	addls	r2, #32
 8084b00:	42a2      	cmp	r2, r4
 8084b02:	d0f3      	beq.n	8084aec <__match+0x4>
 8084b04:	2000      	movs	r0, #0
 8084b06:	bd30      	pop	{r4, r5, pc}
 8084b08:	6003      	str	r3, [r0, #0]
 8084b0a:	2001      	movs	r0, #1
 8084b0c:	bd30      	pop	{r4, r5, pc}

08084b0e <__hexnan>:
 8084b0e:	680b      	ldr	r3, [r1, #0]
 8084b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084b14:	115e      	asrs	r6, r3, #5
 8084b16:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8084b1a:	f013 031f 	ands.w	r3, r3, #31
 8084b1e:	bf18      	it	ne
 8084b20:	3604      	addne	r6, #4
 8084b22:	1f35      	subs	r5, r6, #4
 8084b24:	4617      	mov	r7, r2
 8084b26:	2200      	movs	r2, #0
 8084b28:	4682      	mov	sl, r0
 8084b2a:	46a8      	mov	r8, r5
 8084b2c:	462c      	mov	r4, r5
 8084b2e:	4691      	mov	r9, r2
 8084b30:	b085      	sub	sp, #20
 8084b32:	f8d0 b000 	ldr.w	fp, [r0]
 8084b36:	9301      	str	r3, [sp, #4]
 8084b38:	f846 2c04 	str.w	r2, [r6, #-4]
 8084b3c:	9200      	str	r2, [sp, #0]
 8084b3e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8084b42:	2900      	cmp	r1, #0
 8084b44:	d03c      	beq.n	8084bc0 <__hexnan+0xb2>
 8084b46:	4608      	mov	r0, r1
 8084b48:	9203      	str	r2, [sp, #12]
 8084b4a:	9102      	str	r1, [sp, #8]
 8084b4c:	f7ff fd86 	bl	808465c <__hexdig_fun>
 8084b50:	9a03      	ldr	r2, [sp, #12]
 8084b52:	bb00      	cbnz	r0, 8084b96 <__hexnan+0x88>
 8084b54:	9902      	ldr	r1, [sp, #8]
 8084b56:	2920      	cmp	r1, #32
 8084b58:	d816      	bhi.n	8084b88 <__hexnan+0x7a>
 8084b5a:	9b00      	ldr	r3, [sp, #0]
 8084b5c:	4599      	cmp	r9, r3
 8084b5e:	ddee      	ble.n	8084b3e <__hexnan+0x30>
 8084b60:	4544      	cmp	r4, r8
 8084b62:	d205      	bcs.n	8084b70 <__hexnan+0x62>
 8084b64:	2a07      	cmp	r2, #7
 8084b66:	dc03      	bgt.n	8084b70 <__hexnan+0x62>
 8084b68:	4641      	mov	r1, r8
 8084b6a:	4620      	mov	r0, r4
 8084b6c:	f7ff ffaa 	bl	8084ac4 <L_shift>
 8084b70:	42bc      	cmp	r4, r7
 8084b72:	d923      	bls.n	8084bbc <__hexnan+0xae>
 8084b74:	2300      	movs	r3, #0
 8084b76:	f1a4 0804 	sub.w	r8, r4, #4
 8084b7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8084b7e:	f8cd 9000 	str.w	r9, [sp]
 8084b82:	4644      	mov	r4, r8
 8084b84:	461a      	mov	r2, r3
 8084b86:	e7da      	b.n	8084b3e <__hexnan+0x30>
 8084b88:	2929      	cmp	r1, #41	; 0x29
 8084b8a:	d148      	bne.n	8084c1e <__hexnan+0x110>
 8084b8c:	f10b 0301 	add.w	r3, fp, #1
 8084b90:	f8ca 3000 	str.w	r3, [sl]
 8084b94:	e014      	b.n	8084bc0 <__hexnan+0xb2>
 8084b96:	3201      	adds	r2, #1
 8084b98:	2a08      	cmp	r2, #8
 8084b9a:	f109 0901 	add.w	r9, r9, #1
 8084b9e:	dd06      	ble.n	8084bae <__hexnan+0xa0>
 8084ba0:	42bc      	cmp	r4, r7
 8084ba2:	d9cc      	bls.n	8084b3e <__hexnan+0x30>
 8084ba4:	2300      	movs	r3, #0
 8084ba6:	f844 3c04 	str.w	r3, [r4, #-4]
 8084baa:	2201      	movs	r2, #1
 8084bac:	3c04      	subs	r4, #4
 8084bae:	6821      	ldr	r1, [r4, #0]
 8084bb0:	f000 000f 	and.w	r0, r0, #15
 8084bb4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8084bb8:	6020      	str	r0, [r4, #0]
 8084bba:	e7c0      	b.n	8084b3e <__hexnan+0x30>
 8084bbc:	2208      	movs	r2, #8
 8084bbe:	e7be      	b.n	8084b3e <__hexnan+0x30>
 8084bc0:	f1b9 0f00 	cmp.w	r9, #0
 8084bc4:	d02b      	beq.n	8084c1e <__hexnan+0x110>
 8084bc6:	4544      	cmp	r4, r8
 8084bc8:	d205      	bcs.n	8084bd6 <__hexnan+0xc8>
 8084bca:	2a07      	cmp	r2, #7
 8084bcc:	dc03      	bgt.n	8084bd6 <__hexnan+0xc8>
 8084bce:	4641      	mov	r1, r8
 8084bd0:	4620      	mov	r0, r4
 8084bd2:	f7ff ff77 	bl	8084ac4 <L_shift>
 8084bd6:	42bc      	cmp	r4, r7
 8084bd8:	d90c      	bls.n	8084bf4 <__hexnan+0xe6>
 8084bda:	463b      	mov	r3, r7
 8084bdc:	f854 2b04 	ldr.w	r2, [r4], #4
 8084be0:	42a5      	cmp	r5, r4
 8084be2:	f843 2b04 	str.w	r2, [r3], #4
 8084be6:	d2f9      	bcs.n	8084bdc <__hexnan+0xce>
 8084be8:	2200      	movs	r2, #0
 8084bea:	f843 2b04 	str.w	r2, [r3], #4
 8084bee:	429d      	cmp	r5, r3
 8084bf0:	d2fb      	bcs.n	8084bea <__hexnan+0xdc>
 8084bf2:	e00b      	b.n	8084c0c <__hexnan+0xfe>
 8084bf4:	9b01      	ldr	r3, [sp, #4]
 8084bf6:	b14b      	cbz	r3, 8084c0c <__hexnan+0xfe>
 8084bf8:	f1c3 0220 	rsb	r2, r3, #32
 8084bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8084c00:	40d3      	lsrs	r3, r2
 8084c02:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8084c06:	4013      	ands	r3, r2
 8084c08:	f846 3c04 	str.w	r3, [r6, #-4]
 8084c0c:	682b      	ldr	r3, [r5, #0]
 8084c0e:	b943      	cbnz	r3, 8084c22 <__hexnan+0x114>
 8084c10:	42bd      	cmp	r5, r7
 8084c12:	d102      	bne.n	8084c1a <__hexnan+0x10c>
 8084c14:	2301      	movs	r3, #1
 8084c16:	602b      	str	r3, [r5, #0]
 8084c18:	e003      	b.n	8084c22 <__hexnan+0x114>
 8084c1a:	3d04      	subs	r5, #4
 8084c1c:	e7f6      	b.n	8084c0c <__hexnan+0xfe>
 8084c1e:	2004      	movs	r0, #4
 8084c20:	e000      	b.n	8084c24 <__hexnan+0x116>
 8084c22:	2005      	movs	r0, #5
 8084c24:	b005      	add	sp, #20
 8084c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08084c2c <_findenv_r>:
 8084c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084c30:	4607      	mov	r7, r0
 8084c32:	468b      	mov	fp, r1
 8084c34:	4690      	mov	r8, r2
 8084c36:	f000 fcd3 	bl	80855e0 <__env_lock>
 8084c3a:	4b19      	ldr	r3, [pc, #100]	; (8084ca0 <_findenv_r+0x74>)
 8084c3c:	681d      	ldr	r5, [r3, #0]
 8084c3e:	469a      	mov	sl, r3
 8084c40:	b13d      	cbz	r5, 8084c52 <_findenv_r+0x26>
 8084c42:	465c      	mov	r4, fp
 8084c44:	4623      	mov	r3, r4
 8084c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084c4a:	b142      	cbz	r2, 8084c5e <_findenv_r+0x32>
 8084c4c:	2a3d      	cmp	r2, #61	; 0x3d
 8084c4e:	461c      	mov	r4, r3
 8084c50:	d1f8      	bne.n	8084c44 <_findenv_r+0x18>
 8084c52:	4638      	mov	r0, r7
 8084c54:	f000 fcc5 	bl	80855e2 <__env_unlock>
 8084c58:	2000      	movs	r0, #0
 8084c5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084c5e:	ebcb 0404 	rsb	r4, fp, r4
 8084c62:	46a9      	mov	r9, r5
 8084c64:	f859 0b04 	ldr.w	r0, [r9], #4
 8084c68:	2800      	cmp	r0, #0
 8084c6a:	d0f2      	beq.n	8084c52 <_findenv_r+0x26>
 8084c6c:	4622      	mov	r2, r4
 8084c6e:	4659      	mov	r1, fp
 8084c70:	f7fe fb3b 	bl	80832ea <strncmp>
 8084c74:	b988      	cbnz	r0, 8084c9a <_findenv_r+0x6e>
 8084c76:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8084c7a:	191e      	adds	r6, r3, r4
 8084c7c:	5d1b      	ldrb	r3, [r3, r4]
 8084c7e:	2b3d      	cmp	r3, #61	; 0x3d
 8084c80:	d10b      	bne.n	8084c9a <_findenv_r+0x6e>
 8084c82:	f8da 3000 	ldr.w	r3, [sl]
 8084c86:	4638      	mov	r0, r7
 8084c88:	1aed      	subs	r5, r5, r3
 8084c8a:	10ad      	asrs	r5, r5, #2
 8084c8c:	f8c8 5000 	str.w	r5, [r8]
 8084c90:	f000 fca7 	bl	80855e2 <__env_unlock>
 8084c94:	1c70      	adds	r0, r6, #1
 8084c96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084c9a:	464d      	mov	r5, r9
 8084c9c:	e7e1      	b.n	8084c62 <_findenv_r+0x36>
 8084c9e:	bf00      	nop
 8084ca0:	200004f0 	.word	0x200004f0

08084ca4 <_getenv_r>:
 8084ca4:	b507      	push	{r0, r1, r2, lr}
 8084ca6:	aa01      	add	r2, sp, #4
 8084ca8:	f7ff ffc0 	bl	8084c2c <_findenv_r>
 8084cac:	b003      	add	sp, #12
 8084cae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084cb4 <__gettzinfo>:
 8084cb4:	4800      	ldr	r0, [pc, #0]	; (8084cb8 <__gettzinfo+0x4>)
 8084cb6:	4770      	bx	lr
 8084cb8:	200004b0 	.word	0x200004b0

08084cbc <gmtime_r>:
 8084cbc:	6802      	ldr	r2, [r0, #0]
 8084cbe:	4b46      	ldr	r3, [pc, #280]	; (8084dd8 <gmtime_r+0x11c>)
 8084cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084cc2:	fb92 f4f3 	sdiv	r4, r2, r3
 8084cc6:	fb03 2214 	mls	r2, r3, r4, r2
 8084cca:	2a00      	cmp	r2, #0
 8084ccc:	bfbc      	itt	lt
 8084cce:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8084cd2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8084cd6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8084cda:	fb92 f3f0 	sdiv	r3, r2, r0
 8084cde:	fb00 2213 	mls	r2, r0, r3, r2
 8084ce2:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8084ce6:	608b      	str	r3, [r1, #8]
 8084ce8:	fb92 f3f0 	sdiv	r3, r2, r0
 8084cec:	fb00 2213 	mls	r2, r0, r3, r2
 8084cf0:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8084cf4:	bfac      	ite	ge
 8084cf6:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8084cfa:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8084cfe:	604b      	str	r3, [r1, #4]
 8084d00:	600a      	str	r2, [r1, #0]
 8084d02:	2307      	movs	r3, #7
 8084d04:	1ce2      	adds	r2, r4, #3
 8084d06:	fb92 f3f3 	sdiv	r3, r2, r3
 8084d0a:	4d34      	ldr	r5, [pc, #208]	; (8084ddc <gmtime_r+0x120>)
 8084d0c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8084d10:	fb94 f5f5 	sdiv	r5, r4, r5
 8084d14:	1ad3      	subs	r3, r2, r3
 8084d16:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8084d1a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8084d1e:	618b      	str	r3, [r1, #24]
 8084d20:	4b2f      	ldr	r3, [pc, #188]	; (8084de0 <gmtime_r+0x124>)
 8084d22:	4830      	ldr	r0, [pc, #192]	; (8084de4 <gmtime_r+0x128>)
 8084d24:	fb03 4405 	mla	r4, r3, r5, r4
 8084d28:	fbb4 f2f2 	udiv	r2, r4, r2
 8084d2c:	fbb4 f3f7 	udiv	r3, r4, r7
 8084d30:	fbb4 f0f0 	udiv	r0, r4, r0
 8084d34:	4422      	add	r2, r4
 8084d36:	1ad2      	subs	r2, r2, r3
 8084d38:	f648 6694 	movw	r6, #36500	; 0x8e94
 8084d3c:	1a13      	subs	r3, r2, r0
 8084d3e:	f240 126d 	movw	r2, #365	; 0x16d
 8084d42:	fbb3 f6f6 	udiv	r6, r3, r6
 8084d46:	fbb3 f0f2 	udiv	r0, r3, r2
 8084d4a:	fbb3 f3f7 	udiv	r3, r3, r7
 8084d4e:	4434      	add	r4, r6
 8084d50:	1ae3      	subs	r3, r4, r3
 8084d52:	fb02 3310 	mls	r3, r2, r0, r3
 8084d56:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8084d5a:	2499      	movs	r4, #153	; 0x99
 8084d5c:	3202      	adds	r2, #2
 8084d5e:	fbb2 f2f4 	udiv	r2, r2, r4
 8084d62:	4354      	muls	r4, r2
 8084d64:	1ca6      	adds	r6, r4, #2
 8084d66:	2405      	movs	r4, #5
 8084d68:	fbb6 f4f4 	udiv	r4, r6, r4
 8084d6c:	2a0a      	cmp	r2, #10
 8084d6e:	bf34      	ite	cc
 8084d70:	2602      	movcc	r6, #2
 8084d72:	f06f 0609 	mvncs.w	r6, #9
 8084d76:	4416      	add	r6, r2
 8084d78:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084d7c:	fb02 0505 	mla	r5, r2, r5, r0
 8084d80:	1c5f      	adds	r7, r3, #1
 8084d82:	2e01      	cmp	r6, #1
 8084d84:	bf98      	it	ls
 8084d86:	3501      	addls	r5, #1
 8084d88:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8084d8c:	eba7 0704 	sub.w	r7, r7, r4
 8084d90:	d302      	bcc.n	8084d98 <gmtime_r+0xdc>
 8084d92:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8084d96:	e014      	b.n	8084dc2 <gmtime_r+0x106>
 8084d98:	0782      	lsls	r2, r0, #30
 8084d9a:	d105      	bne.n	8084da8 <gmtime_r+0xec>
 8084d9c:	2464      	movs	r4, #100	; 0x64
 8084d9e:	fbb0 f2f4 	udiv	r2, r0, r4
 8084da2:	fb04 0212 	mls	r2, r4, r2, r0
 8084da6:	b94a      	cbnz	r2, 8084dbc <gmtime_r+0x100>
 8084da8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084dac:	fbb0 f4f2 	udiv	r4, r0, r2
 8084db0:	fb02 0014 	mls	r0, r2, r4, r0
 8084db4:	fab0 f280 	clz	r2, r0
 8084db8:	0952      	lsrs	r2, r2, #5
 8084dba:	e000      	b.n	8084dbe <gmtime_r+0x102>
 8084dbc:	2201      	movs	r2, #1
 8084dbe:	333b      	adds	r3, #59	; 0x3b
 8084dc0:	441a      	add	r2, r3
 8084dc2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8084dc6:	2300      	movs	r3, #0
 8084dc8:	61ca      	str	r2, [r1, #28]
 8084dca:	614d      	str	r5, [r1, #20]
 8084dcc:	610e      	str	r6, [r1, #16]
 8084dce:	60cf      	str	r7, [r1, #12]
 8084dd0:	620b      	str	r3, [r1, #32]
 8084dd2:	4608      	mov	r0, r1
 8084dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084dd6:	bf00      	nop
 8084dd8:	00015180 	.word	0x00015180
 8084ddc:	00023ab1 	.word	0x00023ab1
 8084de0:	fffdc54f 	.word	0xfffdc54f
 8084de4:	00023ab0 	.word	0x00023ab0

08084de8 <_Balloc>:
 8084de8:	b570      	push	{r4, r5, r6, lr}
 8084dea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8084dec:	4604      	mov	r4, r0
 8084dee:	460e      	mov	r6, r1
 8084df0:	b93d      	cbnz	r5, 8084e02 <_Balloc+0x1a>
 8084df2:	2010      	movs	r0, #16
 8084df4:	f7fb fdcc 	bl	8080990 <malloc>
 8084df8:	6260      	str	r0, [r4, #36]	; 0x24
 8084dfa:	6045      	str	r5, [r0, #4]
 8084dfc:	6085      	str	r5, [r0, #8]
 8084dfe:	6005      	str	r5, [r0, #0]
 8084e00:	60c5      	str	r5, [r0, #12]
 8084e02:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8084e04:	68eb      	ldr	r3, [r5, #12]
 8084e06:	b143      	cbz	r3, 8084e1a <_Balloc+0x32>
 8084e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8084e0a:	68db      	ldr	r3, [r3, #12]
 8084e0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8084e10:	b178      	cbz	r0, 8084e32 <_Balloc+0x4a>
 8084e12:	6802      	ldr	r2, [r0, #0]
 8084e14:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8084e18:	e017      	b.n	8084e4a <_Balloc+0x62>
 8084e1a:	2221      	movs	r2, #33	; 0x21
 8084e1c:	2104      	movs	r1, #4
 8084e1e:	4620      	mov	r0, r4
 8084e20:	f000 fbcb 	bl	80855ba <_calloc_r>
 8084e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8084e26:	60e8      	str	r0, [r5, #12]
 8084e28:	68db      	ldr	r3, [r3, #12]
 8084e2a:	2b00      	cmp	r3, #0
 8084e2c:	d1ec      	bne.n	8084e08 <_Balloc+0x20>
 8084e2e:	2000      	movs	r0, #0
 8084e30:	bd70      	pop	{r4, r5, r6, pc}
 8084e32:	2101      	movs	r1, #1
 8084e34:	fa01 f506 	lsl.w	r5, r1, r6
 8084e38:	1d6a      	adds	r2, r5, #5
 8084e3a:	0092      	lsls	r2, r2, #2
 8084e3c:	4620      	mov	r0, r4
 8084e3e:	f000 fbbc 	bl	80855ba <_calloc_r>
 8084e42:	2800      	cmp	r0, #0
 8084e44:	d0f3      	beq.n	8084e2e <_Balloc+0x46>
 8084e46:	6046      	str	r6, [r0, #4]
 8084e48:	6085      	str	r5, [r0, #8]
 8084e4a:	2300      	movs	r3, #0
 8084e4c:	6103      	str	r3, [r0, #16]
 8084e4e:	60c3      	str	r3, [r0, #12]
 8084e50:	bd70      	pop	{r4, r5, r6, pc}

08084e52 <_Bfree>:
 8084e52:	b570      	push	{r4, r5, r6, lr}
 8084e54:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8084e56:	4606      	mov	r6, r0
 8084e58:	460d      	mov	r5, r1
 8084e5a:	b93c      	cbnz	r4, 8084e6c <_Bfree+0x1a>
 8084e5c:	2010      	movs	r0, #16
 8084e5e:	f7fb fd97 	bl	8080990 <malloc>
 8084e62:	6270      	str	r0, [r6, #36]	; 0x24
 8084e64:	6044      	str	r4, [r0, #4]
 8084e66:	6084      	str	r4, [r0, #8]
 8084e68:	6004      	str	r4, [r0, #0]
 8084e6a:	60c4      	str	r4, [r0, #12]
 8084e6c:	b13d      	cbz	r5, 8084e7e <_Bfree+0x2c>
 8084e6e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8084e70:	686a      	ldr	r2, [r5, #4]
 8084e72:	68db      	ldr	r3, [r3, #12]
 8084e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8084e78:	6029      	str	r1, [r5, #0]
 8084e7a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8084e7e:	bd70      	pop	{r4, r5, r6, pc}

08084e80 <__multadd>:
 8084e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084e84:	4606      	mov	r6, r0
 8084e86:	460c      	mov	r4, r1
 8084e88:	690d      	ldr	r5, [r1, #16]
 8084e8a:	461f      	mov	r7, r3
 8084e8c:	f101 0e14 	add.w	lr, r1, #20
 8084e90:	2300      	movs	r3, #0
 8084e92:	f8de 0000 	ldr.w	r0, [lr]
 8084e96:	3301      	adds	r3, #1
 8084e98:	b281      	uxth	r1, r0
 8084e9a:	fb02 7101 	mla	r1, r2, r1, r7
 8084e9e:	0c00      	lsrs	r0, r0, #16
 8084ea0:	0c0f      	lsrs	r7, r1, #16
 8084ea2:	fb02 7000 	mla	r0, r2, r0, r7
 8084ea6:	b289      	uxth	r1, r1
 8084ea8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8084eac:	429d      	cmp	r5, r3
 8084eae:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8084eb2:	f84e 1b04 	str.w	r1, [lr], #4
 8084eb6:	dcec      	bgt.n	8084e92 <__multadd+0x12>
 8084eb8:	b1d7      	cbz	r7, 8084ef0 <__multadd+0x70>
 8084eba:	68a3      	ldr	r3, [r4, #8]
 8084ebc:	429d      	cmp	r5, r3
 8084ebe:	db12      	blt.n	8084ee6 <__multadd+0x66>
 8084ec0:	6861      	ldr	r1, [r4, #4]
 8084ec2:	4630      	mov	r0, r6
 8084ec4:	3101      	adds	r1, #1
 8084ec6:	f7ff ff8f 	bl	8084de8 <_Balloc>
 8084eca:	4680      	mov	r8, r0
 8084ecc:	6922      	ldr	r2, [r4, #16]
 8084ece:	f104 010c 	add.w	r1, r4, #12
 8084ed2:	3202      	adds	r2, #2
 8084ed4:	0092      	lsls	r2, r2, #2
 8084ed6:	300c      	adds	r0, #12
 8084ed8:	f7fe f97c 	bl	80831d4 <memcpy>
 8084edc:	4621      	mov	r1, r4
 8084ede:	4630      	mov	r0, r6
 8084ee0:	f7ff ffb7 	bl	8084e52 <_Bfree>
 8084ee4:	4644      	mov	r4, r8
 8084ee6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8084eea:	3501      	adds	r5, #1
 8084eec:	615f      	str	r7, [r3, #20]
 8084eee:	6125      	str	r5, [r4, #16]
 8084ef0:	4620      	mov	r0, r4
 8084ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08084ef6 <__s2b>:
 8084ef6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8084efa:	4606      	mov	r6, r0
 8084efc:	4615      	mov	r5, r2
 8084efe:	461f      	mov	r7, r3
 8084f00:	2209      	movs	r2, #9
 8084f02:	3308      	adds	r3, #8
 8084f04:	460c      	mov	r4, r1
 8084f06:	fb93 f3f2 	sdiv	r3, r3, r2
 8084f0a:	2100      	movs	r1, #0
 8084f0c:	2201      	movs	r2, #1
 8084f0e:	429a      	cmp	r2, r3
 8084f10:	da02      	bge.n	8084f18 <__s2b+0x22>
 8084f12:	0052      	lsls	r2, r2, #1
 8084f14:	3101      	adds	r1, #1
 8084f16:	e7fa      	b.n	8084f0e <__s2b+0x18>
 8084f18:	4630      	mov	r0, r6
 8084f1a:	f7ff ff65 	bl	8084de8 <_Balloc>
 8084f1e:	9b08      	ldr	r3, [sp, #32]
 8084f20:	2d09      	cmp	r5, #9
 8084f22:	6143      	str	r3, [r0, #20]
 8084f24:	f04f 0301 	mov.w	r3, #1
 8084f28:	6103      	str	r3, [r0, #16]
 8084f2a:	dd11      	ble.n	8084f50 <__s2b+0x5a>
 8084f2c:	f104 0809 	add.w	r8, r4, #9
 8084f30:	46c1      	mov	r9, r8
 8084f32:	442c      	add	r4, r5
 8084f34:	f819 3b01 	ldrb.w	r3, [r9], #1
 8084f38:	4601      	mov	r1, r0
 8084f3a:	3b30      	subs	r3, #48	; 0x30
 8084f3c:	220a      	movs	r2, #10
 8084f3e:	4630      	mov	r0, r6
 8084f40:	f7ff ff9e 	bl	8084e80 <__multadd>
 8084f44:	45a1      	cmp	r9, r4
 8084f46:	d1f5      	bne.n	8084f34 <__s2b+0x3e>
 8084f48:	eb08 0405 	add.w	r4, r8, r5
 8084f4c:	3c08      	subs	r4, #8
 8084f4e:	e001      	b.n	8084f54 <__s2b+0x5e>
 8084f50:	340a      	adds	r4, #10
 8084f52:	2509      	movs	r5, #9
 8084f54:	1b2d      	subs	r5, r5, r4
 8084f56:	1963      	adds	r3, r4, r5
 8084f58:	429f      	cmp	r7, r3
 8084f5a:	dd08      	ble.n	8084f6e <__s2b+0x78>
 8084f5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8084f60:	4601      	mov	r1, r0
 8084f62:	3b30      	subs	r3, #48	; 0x30
 8084f64:	220a      	movs	r2, #10
 8084f66:	4630      	mov	r0, r6
 8084f68:	f7ff ff8a 	bl	8084e80 <__multadd>
 8084f6c:	e7f3      	b.n	8084f56 <__s2b+0x60>
 8084f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08084f72 <__hi0bits>:
 8084f72:	0c03      	lsrs	r3, r0, #16
 8084f74:	041b      	lsls	r3, r3, #16
 8084f76:	b913      	cbnz	r3, 8084f7e <__hi0bits+0xc>
 8084f78:	0400      	lsls	r0, r0, #16
 8084f7a:	2310      	movs	r3, #16
 8084f7c:	e000      	b.n	8084f80 <__hi0bits+0xe>
 8084f7e:	2300      	movs	r3, #0
 8084f80:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8084f84:	bf04      	itt	eq
 8084f86:	0200      	lsleq	r0, r0, #8
 8084f88:	3308      	addeq	r3, #8
 8084f8a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8084f8e:	bf04      	itt	eq
 8084f90:	0100      	lsleq	r0, r0, #4
 8084f92:	3304      	addeq	r3, #4
 8084f94:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8084f98:	bf04      	itt	eq
 8084f9a:	0080      	lsleq	r0, r0, #2
 8084f9c:	3302      	addeq	r3, #2
 8084f9e:	2800      	cmp	r0, #0
 8084fa0:	db03      	blt.n	8084faa <__hi0bits+0x38>
 8084fa2:	0042      	lsls	r2, r0, #1
 8084fa4:	d503      	bpl.n	8084fae <__hi0bits+0x3c>
 8084fa6:	1c58      	adds	r0, r3, #1
 8084fa8:	4770      	bx	lr
 8084faa:	4618      	mov	r0, r3
 8084fac:	4770      	bx	lr
 8084fae:	2020      	movs	r0, #32
 8084fb0:	4770      	bx	lr

08084fb2 <__lo0bits>:
 8084fb2:	6803      	ldr	r3, [r0, #0]
 8084fb4:	f013 0207 	ands.w	r2, r3, #7
 8084fb8:	d00b      	beq.n	8084fd2 <__lo0bits+0x20>
 8084fba:	07d9      	lsls	r1, r3, #31
 8084fbc:	d422      	bmi.n	8085004 <__lo0bits+0x52>
 8084fbe:	079a      	lsls	r2, r3, #30
 8084fc0:	bf4b      	itete	mi
 8084fc2:	085b      	lsrmi	r3, r3, #1
 8084fc4:	089b      	lsrpl	r3, r3, #2
 8084fc6:	6003      	strmi	r3, [r0, #0]
 8084fc8:	6003      	strpl	r3, [r0, #0]
 8084fca:	bf4c      	ite	mi
 8084fcc:	2001      	movmi	r0, #1
 8084fce:	2002      	movpl	r0, #2
 8084fd0:	4770      	bx	lr
 8084fd2:	b299      	uxth	r1, r3
 8084fd4:	b909      	cbnz	r1, 8084fda <__lo0bits+0x28>
 8084fd6:	0c1b      	lsrs	r3, r3, #16
 8084fd8:	2210      	movs	r2, #16
 8084fda:	f013 0fff 	tst.w	r3, #255	; 0xff
 8084fde:	bf04      	itt	eq
 8084fe0:	0a1b      	lsreq	r3, r3, #8
 8084fe2:	3208      	addeq	r2, #8
 8084fe4:	0719      	lsls	r1, r3, #28
 8084fe6:	bf04      	itt	eq
 8084fe8:	091b      	lsreq	r3, r3, #4
 8084fea:	3204      	addeq	r2, #4
 8084fec:	0799      	lsls	r1, r3, #30
 8084fee:	bf04      	itt	eq
 8084ff0:	089b      	lsreq	r3, r3, #2
 8084ff2:	3202      	addeq	r2, #2
 8084ff4:	07d9      	lsls	r1, r3, #31
 8084ff6:	d402      	bmi.n	8084ffe <__lo0bits+0x4c>
 8084ff8:	085b      	lsrs	r3, r3, #1
 8084ffa:	d005      	beq.n	8085008 <__lo0bits+0x56>
 8084ffc:	3201      	adds	r2, #1
 8084ffe:	6003      	str	r3, [r0, #0]
 8085000:	4610      	mov	r0, r2
 8085002:	4770      	bx	lr
 8085004:	2000      	movs	r0, #0
 8085006:	4770      	bx	lr
 8085008:	2020      	movs	r0, #32
 808500a:	4770      	bx	lr

0808500c <__i2b>:
 808500c:	b510      	push	{r4, lr}
 808500e:	460c      	mov	r4, r1
 8085010:	2101      	movs	r1, #1
 8085012:	f7ff fee9 	bl	8084de8 <_Balloc>
 8085016:	2201      	movs	r2, #1
 8085018:	6144      	str	r4, [r0, #20]
 808501a:	6102      	str	r2, [r0, #16]
 808501c:	bd10      	pop	{r4, pc}

0808501e <__multiply>:
 808501e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085022:	4614      	mov	r4, r2
 8085024:	690a      	ldr	r2, [r1, #16]
 8085026:	6923      	ldr	r3, [r4, #16]
 8085028:	4688      	mov	r8, r1
 808502a:	429a      	cmp	r2, r3
 808502c:	bfbe      	ittt	lt
 808502e:	460b      	movlt	r3, r1
 8085030:	46a0      	movlt	r8, r4
 8085032:	461c      	movlt	r4, r3
 8085034:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8085038:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808503c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8085040:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8085044:	eb07 0609 	add.w	r6, r7, r9
 8085048:	429e      	cmp	r6, r3
 808504a:	bfc8      	it	gt
 808504c:	3101      	addgt	r1, #1
 808504e:	f7ff fecb 	bl	8084de8 <_Balloc>
 8085052:	f100 0514 	add.w	r5, r0, #20
 8085056:	462b      	mov	r3, r5
 8085058:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 808505c:	2200      	movs	r2, #0
 808505e:	4563      	cmp	r3, ip
 8085060:	d202      	bcs.n	8085068 <__multiply+0x4a>
 8085062:	f843 2b04 	str.w	r2, [r3], #4
 8085066:	e7fa      	b.n	808505e <__multiply+0x40>
 8085068:	f104 0214 	add.w	r2, r4, #20
 808506c:	f108 0114 	add.w	r1, r8, #20
 8085070:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8085074:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8085078:	9300      	str	r3, [sp, #0]
 808507a:	9b00      	ldr	r3, [sp, #0]
 808507c:	9201      	str	r2, [sp, #4]
 808507e:	4293      	cmp	r3, r2
 8085080:	d957      	bls.n	8085132 <__multiply+0x114>
 8085082:	f8b2 b000 	ldrh.w	fp, [r2]
 8085086:	f1bb 0f00 	cmp.w	fp, #0
 808508a:	d023      	beq.n	80850d4 <__multiply+0xb6>
 808508c:	4689      	mov	r9, r1
 808508e:	46ae      	mov	lr, r5
 8085090:	f04f 0800 	mov.w	r8, #0
 8085094:	f859 4b04 	ldr.w	r4, [r9], #4
 8085098:	f8be a000 	ldrh.w	sl, [lr]
 808509c:	b2a3      	uxth	r3, r4
 808509e:	fb0b a303 	mla	r3, fp, r3, sl
 80850a2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80850a6:	f8de 4000 	ldr.w	r4, [lr]
 80850aa:	4443      	add	r3, r8
 80850ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80850b0:	fb0b 840a 	mla	r4, fp, sl, r8
 80850b4:	46f2      	mov	sl, lr
 80850b6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80850ba:	b29b      	uxth	r3, r3
 80850bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80850c0:	454f      	cmp	r7, r9
 80850c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80850c6:	f84a 3b04 	str.w	r3, [sl], #4
 80850ca:	d901      	bls.n	80850d0 <__multiply+0xb2>
 80850cc:	46d6      	mov	lr, sl
 80850ce:	e7e1      	b.n	8085094 <__multiply+0x76>
 80850d0:	f8ce 8004 	str.w	r8, [lr, #4]
 80850d4:	9b01      	ldr	r3, [sp, #4]
 80850d6:	3204      	adds	r2, #4
 80850d8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80850dc:	f1ba 0f00 	cmp.w	sl, #0
 80850e0:	d021      	beq.n	8085126 <__multiply+0x108>
 80850e2:	462c      	mov	r4, r5
 80850e4:	4689      	mov	r9, r1
 80850e6:	682b      	ldr	r3, [r5, #0]
 80850e8:	f04f 0800 	mov.w	r8, #0
 80850ec:	f8b9 e000 	ldrh.w	lr, [r9]
 80850f0:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80850f4:	b29b      	uxth	r3, r3
 80850f6:	fb0a be0e 	mla	lr, sl, lr, fp
 80850fa:	46a3      	mov	fp, r4
 80850fc:	44f0      	add	r8, lr
 80850fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8085102:	f84b 3b04 	str.w	r3, [fp], #4
 8085106:	f859 3b04 	ldr.w	r3, [r9], #4
 808510a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 808510e:	0c1b      	lsrs	r3, r3, #16
 8085110:	fb0a e303 	mla	r3, sl, r3, lr
 8085114:	454f      	cmp	r7, r9
 8085116:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 808511a:	ea4f 4813 	mov.w	r8, r3, lsr #16
 808511e:	d901      	bls.n	8085124 <__multiply+0x106>
 8085120:	465c      	mov	r4, fp
 8085122:	e7e3      	b.n	80850ec <__multiply+0xce>
 8085124:	6063      	str	r3, [r4, #4]
 8085126:	3504      	adds	r5, #4
 8085128:	e7a7      	b.n	808507a <__multiply+0x5c>
 808512a:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 808512e:	b913      	cbnz	r3, 8085136 <__multiply+0x118>
 8085130:	3e01      	subs	r6, #1
 8085132:	2e00      	cmp	r6, #0
 8085134:	dcf9      	bgt.n	808512a <__multiply+0x10c>
 8085136:	6106      	str	r6, [r0, #16]
 8085138:	b003      	add	sp, #12
 808513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08085140 <__pow5mult>:
 8085140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085144:	4615      	mov	r5, r2
 8085146:	f012 0203 	ands.w	r2, r2, #3
 808514a:	4606      	mov	r6, r0
 808514c:	460f      	mov	r7, r1
 808514e:	d007      	beq.n	8085160 <__pow5mult+0x20>
 8085150:	4c21      	ldr	r4, [pc, #132]	; (80851d8 <__pow5mult+0x98>)
 8085152:	3a01      	subs	r2, #1
 8085154:	2300      	movs	r3, #0
 8085156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808515a:	f7ff fe91 	bl	8084e80 <__multadd>
 808515e:	4607      	mov	r7, r0
 8085160:	10ad      	asrs	r5, r5, #2
 8085162:	d036      	beq.n	80851d2 <__pow5mult+0x92>
 8085164:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8085166:	b93c      	cbnz	r4, 8085178 <__pow5mult+0x38>
 8085168:	2010      	movs	r0, #16
 808516a:	f7fb fc11 	bl	8080990 <malloc>
 808516e:	6270      	str	r0, [r6, #36]	; 0x24
 8085170:	6044      	str	r4, [r0, #4]
 8085172:	6084      	str	r4, [r0, #8]
 8085174:	6004      	str	r4, [r0, #0]
 8085176:	60c4      	str	r4, [r0, #12]
 8085178:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808517c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8085180:	b94c      	cbnz	r4, 8085196 <__pow5mult+0x56>
 8085182:	f240 2171 	movw	r1, #625	; 0x271
 8085186:	4630      	mov	r0, r6
 8085188:	f7ff ff40 	bl	808500c <__i2b>
 808518c:	4604      	mov	r4, r0
 808518e:	2300      	movs	r3, #0
 8085190:	f8c8 0008 	str.w	r0, [r8, #8]
 8085194:	6003      	str	r3, [r0, #0]
 8085196:	f04f 0800 	mov.w	r8, #0
 808519a:	07eb      	lsls	r3, r5, #31
 808519c:	d50a      	bpl.n	80851b4 <__pow5mult+0x74>
 808519e:	4639      	mov	r1, r7
 80851a0:	4622      	mov	r2, r4
 80851a2:	4630      	mov	r0, r6
 80851a4:	f7ff ff3b 	bl	808501e <__multiply>
 80851a8:	4681      	mov	r9, r0
 80851aa:	4639      	mov	r1, r7
 80851ac:	4630      	mov	r0, r6
 80851ae:	f7ff fe50 	bl	8084e52 <_Bfree>
 80851b2:	464f      	mov	r7, r9
 80851b4:	106d      	asrs	r5, r5, #1
 80851b6:	d00c      	beq.n	80851d2 <__pow5mult+0x92>
 80851b8:	6820      	ldr	r0, [r4, #0]
 80851ba:	b108      	cbz	r0, 80851c0 <__pow5mult+0x80>
 80851bc:	4604      	mov	r4, r0
 80851be:	e7ec      	b.n	808519a <__pow5mult+0x5a>
 80851c0:	4622      	mov	r2, r4
 80851c2:	4621      	mov	r1, r4
 80851c4:	4630      	mov	r0, r6
 80851c6:	f7ff ff2a 	bl	808501e <__multiply>
 80851ca:	6020      	str	r0, [r4, #0]
 80851cc:	f8c0 8000 	str.w	r8, [r0]
 80851d0:	e7f4      	b.n	80851bc <__pow5mult+0x7c>
 80851d2:	4638      	mov	r0, r7
 80851d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80851d8:	08085d68 	.word	0x08085d68

080851dc <__lshift>:
 80851dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80851e0:	460c      	mov	r4, r1
 80851e2:	4607      	mov	r7, r0
 80851e4:	4691      	mov	r9, r2
 80851e6:	6926      	ldr	r6, [r4, #16]
 80851e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80851ec:	4456      	add	r6, sl
 80851ee:	6849      	ldr	r1, [r1, #4]
 80851f0:	68a3      	ldr	r3, [r4, #8]
 80851f2:	1c75      	adds	r5, r6, #1
 80851f4:	42ab      	cmp	r3, r5
 80851f6:	da02      	bge.n	80851fe <__lshift+0x22>
 80851f8:	3101      	adds	r1, #1
 80851fa:	005b      	lsls	r3, r3, #1
 80851fc:	e7fa      	b.n	80851f4 <__lshift+0x18>
 80851fe:	4638      	mov	r0, r7
 8085200:	f7ff fdf2 	bl	8084de8 <_Balloc>
 8085204:	2300      	movs	r3, #0
 8085206:	4680      	mov	r8, r0
 8085208:	461a      	mov	r2, r3
 808520a:	f100 0114 	add.w	r1, r0, #20
 808520e:	4553      	cmp	r3, sl
 8085210:	da03      	bge.n	808521a <__lshift+0x3e>
 8085212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8085216:	3301      	adds	r3, #1
 8085218:	e7f9      	b.n	808520e <__lshift+0x32>
 808521a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 808521e:	6920      	ldr	r0, [r4, #16]
 8085220:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8085224:	f019 091f 	ands.w	r9, r9, #31
 8085228:	f104 0114 	add.w	r1, r4, #20
 808522c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8085230:	d014      	beq.n	808525c <__lshift+0x80>
 8085232:	f1c9 0c20 	rsb	ip, r9, #32
 8085236:	2200      	movs	r2, #0
 8085238:	6808      	ldr	r0, [r1, #0]
 808523a:	469a      	mov	sl, r3
 808523c:	fa00 f009 	lsl.w	r0, r0, r9
 8085240:	4302      	orrs	r2, r0
 8085242:	f843 2b04 	str.w	r2, [r3], #4
 8085246:	f851 2b04 	ldr.w	r2, [r1], #4
 808524a:	458e      	cmp	lr, r1
 808524c:	fa22 f20c 	lsr.w	r2, r2, ip
 8085250:	d8f2      	bhi.n	8085238 <__lshift+0x5c>
 8085252:	f8ca 2004 	str.w	r2, [sl, #4]
 8085256:	b142      	cbz	r2, 808526a <__lshift+0x8e>
 8085258:	1cb5      	adds	r5, r6, #2
 808525a:	e006      	b.n	808526a <__lshift+0x8e>
 808525c:	3b04      	subs	r3, #4
 808525e:	f851 2b04 	ldr.w	r2, [r1], #4
 8085262:	458e      	cmp	lr, r1
 8085264:	f843 2f04 	str.w	r2, [r3, #4]!
 8085268:	d8f9      	bhi.n	808525e <__lshift+0x82>
 808526a:	3d01      	subs	r5, #1
 808526c:	4638      	mov	r0, r7
 808526e:	f8c8 5010 	str.w	r5, [r8, #16]
 8085272:	4621      	mov	r1, r4
 8085274:	f7ff fded 	bl	8084e52 <_Bfree>
 8085278:	4640      	mov	r0, r8
 808527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808527e <__mcmp>:
 808527e:	6903      	ldr	r3, [r0, #16]
 8085280:	690a      	ldr	r2, [r1, #16]
 8085282:	b510      	push	{r4, lr}
 8085284:	1a9b      	subs	r3, r3, r2
 8085286:	d111      	bne.n	80852ac <__mcmp+0x2e>
 8085288:	0092      	lsls	r2, r2, #2
 808528a:	3014      	adds	r0, #20
 808528c:	3114      	adds	r1, #20
 808528e:	1883      	adds	r3, r0, r2
 8085290:	440a      	add	r2, r1
 8085292:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8085296:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 808529a:	428c      	cmp	r4, r1
 808529c:	d002      	beq.n	80852a4 <__mcmp+0x26>
 808529e:	d307      	bcc.n	80852b0 <__mcmp+0x32>
 80852a0:	2001      	movs	r0, #1
 80852a2:	bd10      	pop	{r4, pc}
 80852a4:	4298      	cmp	r0, r3
 80852a6:	d3f4      	bcc.n	8085292 <__mcmp+0x14>
 80852a8:	2000      	movs	r0, #0
 80852aa:	bd10      	pop	{r4, pc}
 80852ac:	4618      	mov	r0, r3
 80852ae:	bd10      	pop	{r4, pc}
 80852b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80852b4:	bd10      	pop	{r4, pc}

080852b6 <__mdiff>:
 80852b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80852ba:	460c      	mov	r4, r1
 80852bc:	4607      	mov	r7, r0
 80852be:	4611      	mov	r1, r2
 80852c0:	4620      	mov	r0, r4
 80852c2:	4615      	mov	r5, r2
 80852c4:	f7ff ffdb 	bl	808527e <__mcmp>
 80852c8:	1e06      	subs	r6, r0, #0
 80852ca:	d108      	bne.n	80852de <__mdiff+0x28>
 80852cc:	4631      	mov	r1, r6
 80852ce:	4638      	mov	r0, r7
 80852d0:	f7ff fd8a 	bl	8084de8 <_Balloc>
 80852d4:	2301      	movs	r3, #1
 80852d6:	6103      	str	r3, [r0, #16]
 80852d8:	6146      	str	r6, [r0, #20]
 80852da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80852de:	bfbc      	itt	lt
 80852e0:	4623      	movlt	r3, r4
 80852e2:	462c      	movlt	r4, r5
 80852e4:	4638      	mov	r0, r7
 80852e6:	6861      	ldr	r1, [r4, #4]
 80852e8:	bfba      	itte	lt
 80852ea:	461d      	movlt	r5, r3
 80852ec:	2601      	movlt	r6, #1
 80852ee:	2600      	movge	r6, #0
 80852f0:	f7ff fd7a 	bl	8084de8 <_Balloc>
 80852f4:	692b      	ldr	r3, [r5, #16]
 80852f6:	60c6      	str	r6, [r0, #12]
 80852f8:	6926      	ldr	r6, [r4, #16]
 80852fa:	f105 0914 	add.w	r9, r5, #20
 80852fe:	f104 0114 	add.w	r1, r4, #20
 8085302:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8085306:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 808530a:	f100 0514 	add.w	r5, r0, #20
 808530e:	f04f 0c00 	mov.w	ip, #0
 8085312:	f851 2b04 	ldr.w	r2, [r1], #4
 8085316:	f859 4b04 	ldr.w	r4, [r9], #4
 808531a:	b293      	uxth	r3, r2
 808531c:	449c      	add	ip, r3
 808531e:	b2a3      	uxth	r3, r4
 8085320:	0c24      	lsrs	r4, r4, #16
 8085322:	ebc3 030c 	rsb	r3, r3, ip
 8085326:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 808532a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808532e:	b29b      	uxth	r3, r3
 8085330:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8085334:	45c8      	cmp	r8, r9
 8085336:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808533a:	468e      	mov	lr, r1
 808533c:	f845 2b04 	str.w	r2, [r5], #4
 8085340:	d8e7      	bhi.n	8085312 <__mdiff+0x5c>
 8085342:	45be      	cmp	lr, r7
 8085344:	d20e      	bcs.n	8085364 <__mdiff+0xae>
 8085346:	f85e 1b04 	ldr.w	r1, [lr], #4
 808534a:	b28a      	uxth	r2, r1
 808534c:	4462      	add	r2, ip
 808534e:	1413      	asrs	r3, r2, #16
 8085350:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8085354:	b292      	uxth	r2, r2
 8085356:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 808535a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808535e:	f845 2b04 	str.w	r2, [r5], #4
 8085362:	e7ee      	b.n	8085342 <__mdiff+0x8c>
 8085364:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8085368:	b90b      	cbnz	r3, 808536e <__mdiff+0xb8>
 808536a:	3e01      	subs	r6, #1
 808536c:	e7fa      	b.n	8085364 <__mdiff+0xae>
 808536e:	6106      	str	r6, [r0, #16]
 8085370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08085374 <__ulp>:
 8085374:	4b10      	ldr	r3, [pc, #64]	; (80853b8 <__ulp+0x44>)
 8085376:	400b      	ands	r3, r1
 8085378:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808537c:	2b00      	cmp	r3, #0
 808537e:	dd02      	ble.n	8085386 <__ulp+0x12>
 8085380:	2000      	movs	r0, #0
 8085382:	4619      	mov	r1, r3
 8085384:	4770      	bx	lr
 8085386:	425b      	negs	r3, r3
 8085388:	151b      	asrs	r3, r3, #20
 808538a:	2b13      	cmp	r3, #19
 808538c:	f04f 0000 	mov.w	r0, #0
 8085390:	f04f 0100 	mov.w	r1, #0
 8085394:	dc04      	bgt.n	80853a0 <__ulp+0x2c>
 8085396:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 808539a:	fa42 f103 	asr.w	r1, r2, r3
 808539e:	4770      	bx	lr
 80853a0:	3b14      	subs	r3, #20
 80853a2:	2b1e      	cmp	r3, #30
 80853a4:	f04f 0201 	mov.w	r2, #1
 80853a8:	bfce      	itee	gt
 80853aa:	4613      	movgt	r3, r2
 80853ac:	f1c3 031f 	rsble	r3, r3, #31
 80853b0:	fa02 f303 	lslle.w	r3, r2, r3
 80853b4:	4618      	mov	r0, r3
 80853b6:	4770      	bx	lr
 80853b8:	7ff00000 	.word	0x7ff00000

080853bc <__b2d>:
 80853bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80853be:	6905      	ldr	r5, [r0, #16]
 80853c0:	f100 0614 	add.w	r6, r0, #20
 80853c4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80853c8:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80853cc:	1f2f      	subs	r7, r5, #4
 80853ce:	4620      	mov	r0, r4
 80853d0:	f7ff fdcf 	bl	8084f72 <__hi0bits>
 80853d4:	f1c0 0320 	rsb	r3, r0, #32
 80853d8:	280a      	cmp	r0, #10
 80853da:	600b      	str	r3, [r1, #0]
 80853dc:	dc14      	bgt.n	8085408 <__b2d+0x4c>
 80853de:	f1c0 0e0b 	rsb	lr, r0, #11
 80853e2:	fa24 f10e 	lsr.w	r1, r4, lr
 80853e6:	42be      	cmp	r6, r7
 80853e8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80853ec:	bf34      	ite	cc
 80853ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80853f2:	2100      	movcs	r1, #0
 80853f4:	3015      	adds	r0, #21
 80853f6:	fa04 f000 	lsl.w	r0, r4, r0
 80853fa:	fa21 f10e 	lsr.w	r1, r1, lr
 80853fe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8085402:	ea40 0201 	orr.w	r2, r0, r1
 8085406:	e023      	b.n	8085450 <__b2d+0x94>
 8085408:	42be      	cmp	r6, r7
 808540a:	bf3a      	itte	cc
 808540c:	f1a5 0708 	subcc.w	r7, r5, #8
 8085410:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8085414:	2100      	movcs	r1, #0
 8085416:	380b      	subs	r0, #11
 8085418:	d015      	beq.n	8085446 <__b2d+0x8a>
 808541a:	4084      	lsls	r4, r0
 808541c:	f1c0 0520 	rsb	r5, r0, #32
 8085420:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8085424:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8085428:	42b7      	cmp	r7, r6
 808542a:	fa21 fe05 	lsr.w	lr, r1, r5
 808542e:	ea44 030e 	orr.w	r3, r4, lr
 8085432:	bf8c      	ite	hi
 8085434:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 8085438:	2400      	movls	r4, #0
 808543a:	fa01 f000 	lsl.w	r0, r1, r0
 808543e:	40ec      	lsrs	r4, r5
 8085440:	ea40 0204 	orr.w	r2, r0, r4
 8085444:	e004      	b.n	8085450 <__b2d+0x94>
 8085446:	460a      	mov	r2, r1
 8085448:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 808544c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8085450:	4610      	mov	r0, r2
 8085452:	4619      	mov	r1, r3
 8085454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085456 <__d2b>:
 8085456:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808545a:	461c      	mov	r4, r3
 808545c:	2101      	movs	r1, #1
 808545e:	4690      	mov	r8, r2
 8085460:	9e08      	ldr	r6, [sp, #32]
 8085462:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8085464:	f7ff fcc0 	bl	8084de8 <_Balloc>
 8085468:	f3c4 0213 	ubfx	r2, r4, #0, #20
 808546c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8085470:	4607      	mov	r7, r0
 8085472:	b10c      	cbz	r4, 8085478 <__d2b+0x22>
 8085474:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8085478:	9201      	str	r2, [sp, #4]
 808547a:	f1b8 0f00 	cmp.w	r8, #0
 808547e:	d019      	beq.n	80854b4 <__d2b+0x5e>
 8085480:	a802      	add	r0, sp, #8
 8085482:	f840 8d08 	str.w	r8, [r0, #-8]!
 8085486:	f7ff fd94 	bl	8084fb2 <__lo0bits>
 808548a:	9b00      	ldr	r3, [sp, #0]
 808548c:	b148      	cbz	r0, 80854a2 <__d2b+0x4c>
 808548e:	9a01      	ldr	r2, [sp, #4]
 8085490:	f1c0 0120 	rsb	r1, r0, #32
 8085494:	fa02 f101 	lsl.w	r1, r2, r1
 8085498:	430b      	orrs	r3, r1
 808549a:	40c2      	lsrs	r2, r0
 808549c:	617b      	str	r3, [r7, #20]
 808549e:	9201      	str	r2, [sp, #4]
 80854a0:	e000      	b.n	80854a4 <__d2b+0x4e>
 80854a2:	617b      	str	r3, [r7, #20]
 80854a4:	9b01      	ldr	r3, [sp, #4]
 80854a6:	2b00      	cmp	r3, #0
 80854a8:	bf14      	ite	ne
 80854aa:	2102      	movne	r1, #2
 80854ac:	2101      	moveq	r1, #1
 80854ae:	61bb      	str	r3, [r7, #24]
 80854b0:	6139      	str	r1, [r7, #16]
 80854b2:	e007      	b.n	80854c4 <__d2b+0x6e>
 80854b4:	a801      	add	r0, sp, #4
 80854b6:	f7ff fd7c 	bl	8084fb2 <__lo0bits>
 80854ba:	9b01      	ldr	r3, [sp, #4]
 80854bc:	2101      	movs	r1, #1
 80854be:	617b      	str	r3, [r7, #20]
 80854c0:	6139      	str	r1, [r7, #16]
 80854c2:	3020      	adds	r0, #32
 80854c4:	b134      	cbz	r4, 80854d4 <__d2b+0x7e>
 80854c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80854ca:	4404      	add	r4, r0
 80854cc:	6034      	str	r4, [r6, #0]
 80854ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80854d2:	e009      	b.n	80854e8 <__d2b+0x92>
 80854d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80854d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80854dc:	6030      	str	r0, [r6, #0]
 80854de:	6918      	ldr	r0, [r3, #16]
 80854e0:	f7ff fd47 	bl	8084f72 <__hi0bits>
 80854e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80854e8:	6028      	str	r0, [r5, #0]
 80854ea:	4638      	mov	r0, r7
 80854ec:	b002      	add	sp, #8
 80854ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080854f2 <__ratio>:
 80854f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80854f6:	4688      	mov	r8, r1
 80854f8:	4669      	mov	r1, sp
 80854fa:	4681      	mov	r9, r0
 80854fc:	f7ff ff5e 	bl	80853bc <__b2d>
 8085500:	460d      	mov	r5, r1
 8085502:	4604      	mov	r4, r0
 8085504:	a901      	add	r1, sp, #4
 8085506:	4640      	mov	r0, r8
 8085508:	f7ff ff58 	bl	80853bc <__b2d>
 808550c:	460f      	mov	r7, r1
 808550e:	4606      	mov	r6, r0
 8085510:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8085514:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8085518:	4620      	mov	r0, r4
 808551a:	1a9a      	subs	r2, r3, r2
 808551c:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8085520:	1ac9      	subs	r1, r1, r3
 8085522:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8085526:	2b00      	cmp	r3, #0
 8085528:	bfcc      	ite	gt
 808552a:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 808552e:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8085532:	4632      	mov	r2, r6
 8085534:	463b      	mov	r3, r7
 8085536:	4629      	mov	r1, r5
 8085538:	f7fd f8c6 	bl	80826c8 <__aeabi_ddiv>
 808553c:	b003      	add	sp, #12
 808553e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08085542 <__copybits>:
 8085542:	3901      	subs	r1, #1
 8085544:	b510      	push	{r4, lr}
 8085546:	1149      	asrs	r1, r1, #5
 8085548:	6914      	ldr	r4, [r2, #16]
 808554a:	3101      	adds	r1, #1
 808554c:	f102 0314 	add.w	r3, r2, #20
 8085550:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8085554:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8085558:	42a3      	cmp	r3, r4
 808555a:	4602      	mov	r2, r0
 808555c:	d204      	bcs.n	8085568 <__copybits+0x26>
 808555e:	f853 2b04 	ldr.w	r2, [r3], #4
 8085562:	f840 2b04 	str.w	r2, [r0], #4
 8085566:	e7f7      	b.n	8085558 <__copybits+0x16>
 8085568:	2300      	movs	r3, #0
 808556a:	428a      	cmp	r2, r1
 808556c:	d202      	bcs.n	8085574 <__copybits+0x32>
 808556e:	f842 3b04 	str.w	r3, [r2], #4
 8085572:	e7fa      	b.n	808556a <__copybits+0x28>
 8085574:	bd10      	pop	{r4, pc}

08085576 <__any_on>:
 8085576:	f100 0214 	add.w	r2, r0, #20
 808557a:	6900      	ldr	r0, [r0, #16]
 808557c:	114b      	asrs	r3, r1, #5
 808557e:	4298      	cmp	r0, r3
 8085580:	b510      	push	{r4, lr}
 8085582:	db0c      	blt.n	808559e <__any_on+0x28>
 8085584:	dd0c      	ble.n	80855a0 <__any_on+0x2a>
 8085586:	f011 011f 	ands.w	r1, r1, #31
 808558a:	d009      	beq.n	80855a0 <__any_on+0x2a>
 808558c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8085590:	fa24 f001 	lsr.w	r0, r4, r1
 8085594:	fa00 f101 	lsl.w	r1, r0, r1
 8085598:	428c      	cmp	r4, r1
 808559a:	d10c      	bne.n	80855b6 <__any_on+0x40>
 808559c:	e000      	b.n	80855a0 <__any_on+0x2a>
 808559e:	4603      	mov	r3, r0
 80855a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80855a4:	4293      	cmp	r3, r2
 80855a6:	d904      	bls.n	80855b2 <__any_on+0x3c>
 80855a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80855ac:	2900      	cmp	r1, #0
 80855ae:	d0f9      	beq.n	80855a4 <__any_on+0x2e>
 80855b0:	e001      	b.n	80855b6 <__any_on+0x40>
 80855b2:	2000      	movs	r0, #0
 80855b4:	bd10      	pop	{r4, pc}
 80855b6:	2001      	movs	r0, #1
 80855b8:	bd10      	pop	{r4, pc}

080855ba <_calloc_r>:
 80855ba:	b538      	push	{r3, r4, r5, lr}
 80855bc:	fb02 f401 	mul.w	r4, r2, r1
 80855c0:	4621      	mov	r1, r4
 80855c2:	f7fb fa1d 	bl	8080a00 <_malloc_r>
 80855c6:	4605      	mov	r5, r0
 80855c8:	b118      	cbz	r0, 80855d2 <_calloc_r+0x18>
 80855ca:	4622      	mov	r2, r4
 80855cc:	2100      	movs	r1, #0
 80855ce:	f7fd fe27 	bl	8083220 <memset>
 80855d2:	4628      	mov	r0, r5
 80855d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080855d8 <nanf>:
 80855d8:	4800      	ldr	r0, [pc, #0]	; (80855dc <nanf+0x4>)
 80855da:	4770      	bx	lr
 80855dc:	7fc00000 	.word	0x7fc00000

080855e0 <__env_lock>:
 80855e0:	4770      	bx	lr

080855e2 <__env_unlock>:
 80855e2:	4770      	bx	lr

080855e4 <dynalib_user>:
 80855e4:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 80855f4:	0000 0000 7741 6b61 2e65 5420 7275 206e     ....Awake. Turn 
 8085604:	6563 6c6c 6f20 2e6e 2000 0009 500a 7261     cell on.. ...Par
 8085614:	6573 2064 6553 7061 4f48 2058 200a 6144     sed SeapHOX . Da
 8085624:	6574 742d 6d69 2065 7325 252d 0a73 4d20     te-time %s-%s. M
 8085634:	6961 5f6e 6142 7474 565f 6c6f 2074 2e25     ain_Batt_Volt %.
 8085644:	6635 200a 5f56 6854 7265 206d 2e25 6635     5f. V_Therm %.5f
 8085654:	200a 5f56 4546 5f54 4e49 2054 2e25 6635     . V_FET_INT %.5f
 8085664:	200a 5f56 4546 5f54 5845 2054 2e25 6635     . V_FET_EXT %.5f
 8085674:	200a 7544 6172 6566 5f74 6554 706d 2520     . Durafet_Temp %
 8085684:	2e32 6635 200a 5f56 7250 7365 7573 6572     2.5f. V_Pressure
 8085694:	2520 352e 0a66 7020 4948 544e 2520 352e      %.5f. pHINT %.5
 80856a4:	0a66 7020 4548 5458 2520 352e 0a66 4f20     f. pHEXT %.5f. O
 80856b4:	2032 2e25 6635 200a 324f 535f 7461 7275     2 %.5f. O2_Satur
 80856c4:	7461 6f69 206e 2520 352e 0a66 4f20 7470     ation  %.5f. Opt
 80856d4:	646f 5f65 6554 706d 2520 352e 0a66 5320     ode_Temp %.5f. S
 80856e4:	4542 3733 545f 6d65 2070 2e25 6635 200a     BE37_Temp %.5f. 
 80856f4:	4253 3345 5f37 6f43 646e 2520 352e 0a66     SBE37_Cond %.5f.
 8085704:	5320 4542 3733 535f 6c61 6e69 7469 2079      SBE37_Salinity 
 8085714:	2e25 6635 000a 7245 6f72 3a72 6920 706d     %.5f..Error: imp
 8085724:	6f72 6570 2072 726f 6920 636e 6d6f 6c70     roper or incompl
 8085734:	7465 2065 6164 6174 7220 6365 6965 6576     ete data receive
 8085744:	6620 6f72 206d 6573 5061 4f48 0058 6c67      from seaPHOX.gl
 8085754:	7361 0074 7245 6f72 2e72 7874 2074 5f66     ast.Error.txt f_
 8085764:	6572 6461 6520 7272 726f 203a 5246 4f5f     read error: FR_O
 8085774:	0d4b 000a 7325 252c 2c73 2e25 6633 252c     K...%s,%s,%.3f,%
 8085784:	352e 2c66 2e25 6635 252c 352e 2c66 2e25     .5f,%.5f,%.5f,%.
 8085794:	6635 252c 352e 2c66 2e25 6635 252c 352e     5f,%.5f,%.5f,%.5
 80857a4:	2c66 2e25 3230 2c66 2e25 3230 0066 6e69     f,%.02f,%.02f.in
 80857b4:	6176 696c 0064 7570 6c62 7369 6968 676e     valid.publishing
 80857c4:	6420 7461 0061 616d 2078 6974 656d 6620      data.max time f
 80857d4:	726f 7020 6c75 7369 6968 676e 7220 6165     or pulishing rea
 80857e4:	6863 4e00 746f 6d20 7861 7420 6d69 2c65     ch.Not max time,
 80857f4:	7420 7972 6120 6167 6e69 7420 206f 7570      try again to pu
 8085804:	6c62 7369 0068 6f67 6e69 2067 6f74 7320     blish.going to s
 8085814:	656c 7065 5300 656c 7065 6620 726f 2520     leep.Sleep for %
 8085824:	2064 6573 6f63 646e 0a73 4300 4870 784f     d seconds..CpHOx
 8085834:	0031 0000                                   1...

08085838 <_ZTVN5spark13CellularClassE>:
	...
 8085840:	0a3d 0808                                   =...

08085844 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808584c:	0a85 0808 0a8b 0808 0ab3 0808 0a97 0808     ................
 808585c:	0a87 0808                                   ....

08085860 <_ZTV7TwoWire>:
	...
 8085868:	1119 0808 1163 0808 113b 0808 111b 0808     ....c...;.......
 8085878:	1143 0808 114b 0808 1153 0808 115b 0808     C...K...S...[...

08085888 <_ZTV9IPAddress>:
	...
 8085890:	11f9 0808 11eb 0808 11ed 0808 6e6c 6600     ............ln.f
 80858a0:	006e 6f63 6564 6400 7465 6961 006c 3025     n.code.detail.%0
 80858b0:	3031 2075 5d00 0020 6425 2c00 0020 2928     10u .] .%d., .()
 80858c0:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
 80858d0:	6400 7465 6961 736c 3d20 0020 6162 6475     .details = .baud
 80858e0:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80858f0:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 8085900:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
 8085910:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
 8085920:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
 8085930:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
 8085940:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
 8085950:	7070 6e00 6e6f 0065 7274 6361 0065 6e69     pp.none.trace.in
 8085960:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
 8085970:	696e 0063 6c61 006c                         nic.all.

08085978 <_ZTV8SPIClass>:
	...
 8085980:	1525 0808 1527 0808 2b25 3330 3a64 3025     %...'...%+03d:%0
 8085990:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80859a0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080859b0 <_ZTV11USARTSerial>:
	...
 80859b8:	19f9 0808 1a1d 0808 1a29 0808 13b3 0808     ........).......
 80859c8:	1a05 0808 1a11 0808 1a0b 0808 1a17 0808     ................
 80859d8:	19fb 0808 19ff 0808                         ........

080859e0 <_ZTV9USBSerial>:
	...
 80859e8:	1b11 0808 1b55 0808 1b2f 0808 13b3 0808     ....U.../.......
 80859f8:	1b29 0808 1b13 0808 1b1b 0808 1b4f 0808     )...........O...
 8085a08:	1b23 0808 1b0d 0808                         #.......

08085a10 <_ctype_>:
 8085a10:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8085a20:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8085a30:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8085a40:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8085a50:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8085a60:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8085a70:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8085a80:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8085a90:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08085b14 <__sf_fake_stdin>:
	...

08085b34 <__sf_fake_stdout>:
	...

08085b54 <__sf_fake_stderr>:
	...
 8085b74:	0043 4f50 4953 0058                         C.POSIX.

08085b7c <__month_lengths>:
 8085b7c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8085b8c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8085b9c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8085bac:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8085bbc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8085bcc:	001e 0000 001f 0000 001e 0000 001f 0000     ................

08085bdc <fpi.5342>:
 8085bdc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8085bec:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

08085bfc <fpinan.5378>:
 8085bfc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 8085c0c:	0000 0000                                   ....

08085c10 <tinytens>:
 8085c10:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8085c20:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8085c30:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
 8085c40:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
 8085c50:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
 8085c60:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
 8085c70:	2575 006e 0000 0000                         u%n.....

08085c78 <__mprec_tens>:
 8085c78:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8085c88:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8085c98:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8085ca8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8085cb8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8085cc8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8085cd8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8085ce8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8085cf8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8085d08:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8085d18:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8085d28:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8085d38:	9db4 79d9 7843 44ea                         ...yCx.D

08085d40 <__mprec_bigtens>:
 8085d40:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8085d50:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8085d60:	bf3c 7f73 4fdd 7515                         <.s..O.u

08085d68 <p05.5385>:
 8085d68:	0005 0000 0019 0000 007d 0000               ........}...

08085d74 <link_const_variable_data_end>:
 8085d74:	080805ad 	.word	0x080805ad
 8085d78:	08080a49 	.word	0x08080a49
 8085d7c:	08081259 	.word	0x08081259
 8085d80:	08081509 	.word	0x08081509
 8085d84:	080818c1 	.word	0x080818c1
 8085d88:	080819e5 	.word	0x080819e5
 8085d8c:	08081dd9 	.word	0x08081dd9
 8085d90:	08081e09 	.word	0x08081e09
 8085d94:	08081e75 	.word	0x08081e75
 8085d98:	08081f39 	.word	0x08081f39
 8085d9c:	08081fbd 	.word	0x08081fbd
 8085da0:	08082041 	.word	0x08082041

08085da4 <link_constructors_end>:
	...
